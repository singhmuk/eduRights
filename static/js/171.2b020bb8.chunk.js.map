{"version":3,"sources":["components/ReactJs/prismCode.js","components/mern/sidebar.js","components/mern/projects/mernSocial.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","configuration","helpers","models","controllers","routes","passport","appServer","actions","reducers","authGuard","customInput","dashboard","header","signIn","signUp","ClientApp","MainIndex","MernSocial","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/171.2b020bb8.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/setUpFiles' className={classes.line}>SetUp</Link></MenuItem>\n        <MenuItem><Link to='/javaScript' className={classes.line}>JavaScript</Link></MenuItem>\n        <MenuItem><Link to='/reactCurdMern' className={classes.line}>Mern React</Link></MenuItem>\n        <MenuItem><Link to='/4_reactCurdHooks' className={classes.line}>Mern React Hooks</Link></MenuItem>\n        <MenuItem><Link to='/pagination' className={classes.line}>Sea Sort Pagi Auth_Token</Link></MenuItem>\n        <MenuItem><Link to='/propsModel' className={classes.line}>SS pagination-Captcha</Link></MenuItem>\n        <MenuItem><Link to='/imageGallery' className={classes.line}>ImageGallery</Link></MenuItem>\n        <MenuItem><Link to='/stripes' className={classes.line}>Stripes-Signin with gfb</Link></MenuItem>\n        <MenuItem><Link to='/paginationsMern' className={classes.line}>Paginations-push_notifis</Link></MenuItem>\n        <MenuItem><Link to='/googleMap' className={classes.line}>GoogleMap</Link></MenuItem>\n        <MenuItem><Link to='/videoChat' className={classes.line}>VideoChat</Link></MenuItem>\n        <MenuItem><Link to='/qrSccaners' className={classes.line}>QrCode-reCapcha</Link></MenuItem>\n        <MenuItem><Link to='/react_share' className={classes.line}>Share-Stripe</Link></MenuItem>\n        <MenuItem><Link to='/socialSignUp' className={classes.line}>SocialSignUp</Link></MenuItem>\n        <MenuItem><Link to='/mernSocial' className={classes.line}>MernSocial</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst configuration = `\nif (process.env.NODE_ENV === 'test') {\n  module.exports = {\n    JWT_SECRET: 'codeworkrauthentication',\n    oauth: {\n      google: { clientID: 'number', clientSecret: 'string' },\n      facebook: { clientID: 'number', clientSecret: 'string' },\n    },\n  };\n} else {\n  module.exports = {\n    JWT_SECRET: 'codeworkrauthentication',\n    oauth: {\n      google: { clientID: 'number', clientSecret: 'string' },\n      facebook: { clientID: 'number', clientSecret: 'string' },\n    },\n  };\n}`.trim();\n\nconst helpers = `\nconst Joi = require('joi');\n\nmodule.exports = {\n  validateBody: (schema) => {\n    return (req, res, next) => {\n      const result = Joi.validate(req.body, schema);\n      if (result.error) {\n        return res.status(400).json(result.error);\n      }\n\n      if (!req.value) { req.value = {}; }\n      req.value['body'] = result.value;\n      next();\n    }\n  },\n\n  schemas: {\n    authSchema: Joi.object().keys({\n      email: Joi.string().email().required(),\n      password: Joi.string().required()\n    })\n  }\n}`.trim();\n\nconst models = `\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  methods: { type: [String], required: true },\n  local: {\n    email: { type: String, lowercase: true },\n    password: { type: String }\n  },\n  google: {\n    id: { type: String },\n    email: { type: String, lowercase: true }\n  },\n  facebook: {\n    id: { type: String },\n    email: { type: String, lowercase: true }\n  }\n});\n\nuserSchema.pre('save', async function (next) {\n  try {\n    console.log('entered');\n    if (!this.methods.includes('local')) {\n      next();\n    }\n    \n    const user = this;\n    if (!user.isModified('local.password')) {\n      next();\n    }\n\n    const salt = await bcrypt.genSalt(10);\n    const passwordHash = await bcrypt.hash(this.local.password, salt);\n    this.local.password = passwordHash;\n    console.log('exited');\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\nuserSchema.methods.isValidPassword = async function (newPassword) {\n  try {\n    return await bcrypt.compare(newPassword, this.local.password);\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nconst User = mongoose.model('user', userSchema);\n\nmodule.exports = User;`.trim();\n\nconst controllers = `\nconst JWT = require('jsonwebtoken');\nconst User = require('../models/user');\nconst { JWT_SECRET } = require('../configuration');\n\nsignToken = user => {\n  return JWT.sign({\n    iss: 'CodeWorkr',\n    sub: user.id,\n    iat: new Date().getTime(),\n    exp: new Date().setDate(new Date().getDate() + 1) // current time + 1 day ahead\n  }, JWT_SECRET);\n}\n\nmodule.exports = {\n  signUp: async (req, res, next) => {\n    const { email, password } = req.value.body;\n\n    // Check if there is a user with the same email\n    let foundUser = await User.findOne({ \"local.email\": email });\n    if (foundUser) {\n      return res.status(403).json({ error: 'Email is already in use' });\n    }\n\n    // Is there a Google account with the same email?\n    foundUser = await User.findOne({\n      $or: [\n        { \"google.email\": email },\n        { \"facebook.email\": email },\n      ]\n    });\n    if (foundUser) {\n      foundUser.methods.push('local')\n      foundUser.local = {\n        email: email,\n        password: password\n      }\n      await foundUser.save()\n      \n      const token = signToken(foundUser);\n      res.cookie('access_token', token, {\n        httpOnly: true\n      });\n      res.status(200).json({ success: true });\n    }\n\n    // Is there a Google account with the same email?\n    foundUser = await User.findOne({ \"facebook.email\": email });\n    if (foundUser) {\n      foundUser.methods.push('local')\n      foundUser.local = {\n        email: email,\n        password: password\n      }\n      await foundUser.save()\n     \n      const token = signToken(foundUser);\n      res.status(200).json({ token });\n    }\n\n    const newUser = new User({\n      methods: ['local'],\n      local: {\n        email: email,\n        password: password\n      }\n    });\n\n    await newUser.save();\n\n    \n    const token = signToken(newUser);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  signIn: async (req, res, next) => {\n    \n    const token = signToken(req.user);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  signOut: async (req, res, next) => {\n    res.clearCookie('access_token');\n    res.json({ success: true });\n  },\n\n  googleOAuth: async (req, res, next) => {\n    const token = signToken(req.user);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  linkGoogle: async (req, res, next) => {\n    res.json({\n      success: true,\n      methods: req.user.methods,\n      message: 'Successfully linked account with Google'\n    });\n  },\n\n  unlinkGoogle: async (req, res, next) => {\n    if (req.user.google) {\n      req.user.google = undefined\n    }\n\n    const googleStrPos = req.user.methods.indexOf('google')\n    if (googleStrPos >= 0) {\n      req.user.methods.splice(googleStrPos, 1)\n    }\n    await req.user.save()\n\n    res.json({\n      success: true,\n      methods: req.user.methods,\n      message: 'Successfully unlinked account from Google'\n    });\n  },\n\n  facebookOAuth: async (req, res, next) => {\n    const token = signToken(req.user);\n    res.cookie('access_token', token, {\n      httpOnly: true\n    });\n    res.status(200).json({ success: true });\n  },\n\n  linkFacebook: async (req, res, next) => {\n    res.json({\n      success: true,\n      methods: req.user.methods,\n      message: 'Successfully linked account with Facebook'\n    });\n  },\n\n  unlinkFacebook: async (req, res, next) => {\n    if (req.user.facebook) {\n      req.user.facebook = undefined\n    }\n    \n    const facebookStrPos = req.user.methods.indexOf('facebook')\n    if (facebookStrPos >= 0) {\n      req.user.methods.splice(facebookStrPos, 1)\n    }\n    await req.user.save()\n\n    res.json({\n      success: true,\n      methods: req.user.methods,\n      message: 'Successfully unlinked account from Facebook'\n    });\n  },\n\n  dashboard: async (req, res, next) => {\n    console.log('I managed to get here!');\n    res.json({\n      secret: \"resource\",\n      methods: req.user.methods\n    });\n  },\n\n  checkAuth: async (req, res, next) => {\n    console.log('I managed to get here!');\n    res.json({ success: true });\n  }\n}`.trim();\n\nconst routes = `\nconst express = require('express');\nconst router = require('express-promise-router')();\nconst passport = require('passport');\nconst passportConf = require('../passport');\n\nconst { validateBody, schemas } = require('../helpers/routeHelpers');\nconst UsersController = require('../controllers/users');\nconst passportSignIn = passport.authenticate('local', { session: false });\nconst passportJWT = passport.authenticate('jwt', { session: false });\n\nrouter.route('/signup')\n  .post(validateBody(schemas.authSchema), UsersController.signUp);\n\nrouter.route('/signin')\n  .post(validateBody(schemas.authSchema), passportSignIn, UsersController.signIn);\n\nrouter.route('/signout')\n  .get(passportJWT, UsersController.signOut);\n\nrouter.route('/oauth/google')\n  .post(passport.authenticate('googleToken', { session: false }), UsersController.googleOAuth);\n\nrouter.route('/oauth/facebook')\n  .post(passport.authenticate('facebookToken', { session: false }), UsersController.facebookOAuth);\n\nrouter.route('/oauth/link/google')\n  .post(passportJWT, passport.authorize('googleToken', { session: false }), UsersController.linkGoogle)\n\nrouter.route('/oauth/unlink/google')\n  .post(passportJWT, UsersController.unlinkGoogle);\n\nrouter.route('/oauth/link/facebook')\n  .post(passportJWT, passport.authorize('facebookToken', { session: false }), UsersController.linkFacebook)\n\nrouter.route('/oauth/unlink/facebook')\n  .post(passportJWT, UsersController.unlinkFacebook);\n\nrouter.route('/dashboard')\n  .get(passportJWT, UsersController.dashboard);\n\nrouter.route('/status')\n  .get(passportJWT, UsersController.checkAuth);\n\nmodule.exports = router;`.trim();\n\nconst passport = `\nconst passport = require('passport');\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst { ExtractJwt } = require('passport-jwt');\nconst LocalStrategy = require('passport-local').Strategy;\nconst GooglePlusTokenStrategy = require('passport-google-plus-token');\nconst FacebookTokenStrategy = require('passport-facebook-token');\nconst config = require('./configuration');\nconst User = require('./models/user');\n\nconst cookieExtractor = req => {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n}\n\npassport.use(new JwtStrategy({\n  jwtFromRequest: cookieExtractor,\n  secretOrKey: config.JWT_SECRET,\n  passReqToCallback: true\n}, async (req, payload, done) => {\n  try {\n    const user = await User.findById(payload.sub);\n\n    if (!user) {\n      return done(null, false);\n    }\n\n    req.user = user;\n    done(null, user);\n  } catch(error) {\n    done(error, false);\n  }\n}));\n\n// Google OAuth Strategy\npassport.use('googleToken', new GooglePlusTokenStrategy({\n  clientID: config.oauth.google.clientID,\n  clientSecret: config.oauth.google.clientSecret,\n  passReqToCallback: true,\n}, async (req, accessToken, refreshToken, profile, done) => {\n  try {\n    console.log('profile', profile);\n    console.log('accessToken', accessToken);\n    console.log('refreshToken', refreshToken);\n\n    if (req.user) {\n      req.user.methods.push('google')\n      req.user.google = {\n        id: profile.id,\n        email: profile.emails[0].value\n      }\n      await req.user.save()\n      return done(null, req.user);\n    } \n    else {\n      let existingUser = await User.findOne({ \"google.id\": profile.id });\n      if (existingUser) {\n        return done(null, existingUser);\n      }\n\n      existingUser = await User.findOne({ \"local.email\": profile.emails[0].value })\n      if (existingUser) {\n        existingUser.methods.push('google')\n        existingUser.google = {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n        await existingUser.save()\n        return done(null, existingUser);\n      }\n\n      const newUser = new User({\n        methods: ['google'],\n        google: {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n      });\n\n      await newUser.save();\n      done(null, newUser);\n    }\n  } catch(error) {\n    done(error, false, error.message);\n  }\n}));\n\npassport.use('facebookToken', new FacebookTokenStrategy({\n  clientID: config.oauth.facebook.clientID,\n  clientSecret: config.oauth.facebook.clientSecret,\n  passReqToCallback: true\n}, async (req, accessToken, refreshToken, profile, done) => {\n  try {\n    console.log('profile', profile);\n    console.log('accessToken', accessToken);\n    console.log('refreshToken', refreshToken);\n\n    if (req.user) {\n      req.user.methods.push('facebook')\n      req.user.facebook = {\n        id: profile.id,\n        email: profile.emails[0].value\n      }\n      await req.user.save();\n      return done(null, req.user);\n    } \n    else {\n      let existingUser = await User.findOne({ \"facebook.id\": profile.id });\n      if (existingUser) {\n        return done(null, existingUser);\n      }\n\n      existingUser = await User.findOne({ \"local.email\": profile.emails[0].value })\n      if (existingUser) {\n        existingUser.methods.push('facebook')\n        existingUser.facebook = {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n        await existingUser.save()\n        return done(null, existingUser);\n      }\n\n      const newUser = new User({\n        methods: ['facebook'],\n        facebook: {\n          id: profile.id,\n          email: profile.emails[0].value\n        }\n      });\n\n      await newUser.save();\n      done(null, newUser);\n    }\n  } catch(error) {\n    done(error, false, error.message);\n  }\n}));\n\n// LOCAL STRATEGY\npassport.use(new LocalStrategy({\n  usernameField: 'email'\n}, async (email, password, done) => {\n  try {\n    const user = await User.findOne({ \"local.email\": email });\n\n    if (!user) {\n      return done(null, false);\n    }\n\n    const isMatch = await user.isValidPassword(password);\n\n    if (!isMatch) {\n      return done(null, false);\n    }\n\n    done(null, user);\n  } catch(error) {\n    done(error, false);\n  }\n}));`.trim();\n\nconst appServer = `\nconst express = require(\"express\");\nconst morgan = require(\"morgan\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\n\nmongoose.Promise = global.Promise;\nif (process.env.NODE_ENV === \"test\") {\n  mongoose.connect(\"mongodb://localhost/googleFacebookAuth\", {\n    useNewUrlParser: true\n  });\n} else {\n  mongoose.connect(\"mongodb://localhost/googleFacebookAuth\", {\n    useNewUrlParser: true\n  });\n}\n\nconst app = express();\napp.use(cookieParser());\napp.use(\n  cors({\n    origin: \"http://localhost:3000\",\n    credentials: true\n  })\n);\n\nif (!process.env.NODE_ENV === \"test\") {\n  app.use(morgan(\"dev\"));\n}\n\napp.use(express.json());\napp.use(\"/users\", require(\"./routes/users\"));\n\nmodule.exports = app;\n`.trim();\n\nconst actions = `\n//actions/types.js\nexport const AUTH_SIGN_UP = 'AUTH_SIGN_UP';\nexport const AUTH_SIGN_OUT = 'AUTH_SIGN_OUT';\nexport const AUTH_SIGN_IN = 'AUTH_SIGN_IN';\nexport const AUTH_LINK_GOOGLE = 'AUTH_LINK_GOOGLE';\nexport const AUTH_LINK_FACEBOOK = 'AUTH_LINK_FACEBOOK';\nexport const AUTH_UNLINK_GOOGLE = 'AUTH_UNLINK_GOOGLE';\nexport const AUTH_UNLINK_FACEBOOK = 'AUTH_UNLINK_FACEBOOK';\n\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const DASHBOARD_GET_DATA = 'DASHBOARD_GET_DATA';\n\n\n//actions/index.js\nimport axios from 'axios';\nimport {\n  AUTH_SIGN_UP,\n  AUTH_SIGN_OUT,\n  AUTH_SIGN_IN,\n  AUTH_LINK_GOOGLE,\n  AUTH_LINK_FACEBOOK,\n  AUTH_UNLINK_GOOGLE,\n  AUTH_UNLINK_FACEBOOK,\n  AUTH_ERROR,\n  DASHBOARD_GET_DATA } from './types';\n\nexport const oauthGoogle = data => {\n  return async dispatch => {\n    await axios.post('http://localhost:5000/users/oauth/google', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_SIGN_UP\n    });\n  };\n}\n\nexport const linkGoogle = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/link/google', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_LINK_GOOGLE,\n      payload: res.data\n    });\n  };\n}\n\nexport const unlinkGoogle = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/unlink/google');\n\n    dispatch({\n      type: AUTH_UNLINK_GOOGLE,\n      payload: res.data\n    });\n  };\n}\n\nexport const linkFacebook = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/link/facebook', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_LINK_FACEBOOK,\n      payload: res.data\n    });\n  };\n}\n\nexport const unlinkFacebook = data => {\n  return async dispatch => {\n    const res = await axios.post('http://localhost:5000/users/oauth/unlink/facebook');\n\n    dispatch({\n      type: AUTH_UNLINK_FACEBOOK,\n      payload: res.data\n    });\n  };\n}\n\nexport const oauthFacebook = data => {\n  return async dispatch => {\n    await axios.post('http://localhost:5000/users/oauth/facebook', {\n      access_token: data\n    });\n\n    dispatch({\n      type: AUTH_SIGN_UP\n    });\n  };\n}\n\nexport const signUp = data => {\n  return async dispatch => {\n    try {\n      await axios.post('http://localhost:5000/users/signup', data);\n\n      dispatch({\n        type: AUTH_SIGN_UP\n      });\n    } catch(err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: 'Email is already in use'\n      })\n    }\n  };\n}\n\nexport const signIn = data => {\n  return async dispatch => {\n    try {\n      await axios.post('http://localhost:5000/users/signin', data);\n\n      dispatch({\n        type: AUTH_SIGN_IN\n      });\n    } catch(err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: 'Email and password combination isn\\'t valid'\n      })\n    }\n  };\n}\n\nexport const checkAuth = () => {\n  return async dispatch => {\n    try {\n      await axios.get('http://localhost:5000/users/status');\n\n      dispatch({\n        type: AUTH_SIGN_IN\n      });\n\n      console.log('user is auth-ed')\n    } catch(err) {\n      console.log('error', err)\n    }\n  };\n}\n\nexport const getDashboard = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.get('http://localhost:5000/users/dashboard')\n\n      dispatch({\n        type: DASHBOARD_GET_DATA,\n        payload: res.data\n      })\n\n    } catch(err) {\n      console.error('err', err)\n    }\n  }\n}\n\nexport const signOut = () => {\n  return async dispatch => {\n    await axios.get('http://localhost:5000/users/signout');\n\n    dispatch({\n      type: AUTH_SIGN_OUT\n    })\n  };\n}\n`.trim();\n\nconst reducers = `\n//reducers/auth.js\nimport {\n  AUTH_SIGN_UP,\n  AUTH_SIGN_OUT,\n  AUTH_SIGN_IN,\n  AUTH_ERROR } from '../actions/types';\n\nconst DEFAULT_STATE = {\n  isAuthenticated: false,\n  errorMessage: ''\n}\n\nexport default (state = DEFAULT_STATE, action) => {\n  switch(action.type) {\n    case AUTH_SIGN_UP:\n      return { ...state, isAuthenticated: true, errorMessage: '' }\n    case AUTH_SIGN_IN:\n      return { ...state, isAuthenticated: true, errorMessage: '' }\n    case AUTH_SIGN_OUT:\n      return { ...state, isAuthenticated: false, errorMessage: '' }\n    case AUTH_ERROR:\n      return { ...state, errorMessage: action.payload }\n    default:\n      return state\n  }\n}\n\n\n\n//reducers/dashboard.js\nimport {\n  DASHBOARD_GET_DATA,\n  AUTH_LINK_GOOGLE,\n  AUTH_LINK_FACEBOOK,\n  AUTH_UNLINK_GOOGLE,\n  AUTH_UNLINK_FACEBOOK\n} from '../actions/types';\n\nconst DEFAULT_STATE = {\n  secret: '',\n  methods: []\n}\n\nexport default (state = DEFAULT_STATE, action) => {\n  switch(action.type) {\n    case AUTH_LINK_GOOGLE:\n      return { ...state, methods: action.payload.methods }\n    case AUTH_LINK_FACEBOOK:\n      return { ...state, methods: action.payload.methods }\n    case AUTH_UNLINK_GOOGLE:\n      return { ...state, methods: action.payload.methods }\n    case AUTH_UNLINK_FACEBOOK:\n      return { ...state, methods: action.payload.methods }\n    case DASHBOARD_GET_DATA:\n      return { ...state, secret: action.payload.secret, methods: action.payload.methods }\n    default:\n      return state\n  }\n}\n\n\n\n//reducers/index.js\nimport { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport authReducer from './auth';\nimport dashboardReducer from './dashboard';\n\nexport default combineReducers({\n  form: formReducer,\n  auth: authReducer,\n  dash: dashboardReducer\n});`.trim();\n\nconst authGuard = `\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nexport default (OriginalComponent) => {\n  class MixedComponent extends Component {\n\n    checkAuth() {\n      if (!this.props.isAuth && !this.props.jwtToken) {\n        this.props.history.push('/');\n      }\n    }\n\n    componentDidMount() { this.checkAuth(); }\n    componentDidUpdate() { this.checkAuth(); }\n\n    render() {\n      return <OriginalComponent {...this.props} />;\n    }\n  }\n\n  function mapStateToProps(state) {\n    return {\n      isAuth: state.auth.isAuthenticated,\n      jwtToken: state.auth.token\n    }\n  }\n\n  return connect(mapStateToProps)(MixedComponent);\n};`.trim();\n\nconst customInput = `\nimport React, { Component } from 'react';\n\nexport default class CustomInput extends Component {\n  render() {\n    const { input: { value, onChange } } = this.props;\n    return (\n      <div className=\"form-group\">\n        <label htmlFor={this.props.id}>{this.props.label}</label>\n        <input\n          name={this.props.name}\n          id={this.props.id}\n          placeholder={this.props.placeholder}\n          className=\"form-control\"\n          type={this.props.type}\n          value={value}\n          onChange={onChange}\n        />\n      </div>\n    );\n  }\n}`.trim();\n\nconst dashboard = `\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\n\nimport * as actions from '../actions';\n\nclass Dashboard extends Component {\n  async componentDidMount() {\n    this.props.getDashboard()\n  }\n\n  linkFacebook = async (res) => {\n    console.log('Link with Facebook', res)\n    await this.props.linkFacebook(res.accessToken);\n  }\n\n  linkGoogle = async (res) => {\n    console.log('Link with Google', res)\n    await this.props.linkGoogle(res.accessToken);\n  }\n\n  unlinkGoogle = async () => {\n    console.log('Unlink Google')\n    await this.props.unlinkGoogle();\n  }\n\n  unlinkFacebook = async (res) => {\n    console.log('Unlink Facebook')\n    await this.props.unlinkFacebook();\n  }\n\n  render() {\n    return (\n      <div>\n        This is a Dashboard component\n        <br />\n        Our secret: <h3>{this.props.secret}</h3>\n\n        <h2>Link your social media accounts</h2>\n        <FacebookLogin\n          appId=\"171335970085090\"\n          disabled={true}\n          render={renderProps => (\n            <button style={{ marginRight: 15 }} className=\"btn btn-primary\" onClick={renderProps.onClick} \n                  disabled={this.props.dashboard.methods.includes('facebook') ? true : false}>Link with Facebook\n            </button>\n          )}\n          fields=\"name,email,picture\"\n          callback={this.linkFacebook}\n          cssClass=\"btn btn-outline-primary\"\n        />\n        <GoogleLogin\n          clientId=\"499420307488-hj9l9h3amt5into76m9i0ntkaqcg9q4t.apps.googleusercontent.com\"\n          disabled={this.props.dashboard.methods.includes('google') ? true : false}\n          render={renderProps => (\n            <button className=\"btn btn-danger\" onClick={renderProps.onClick} \n                disabled={renderProps.disabled}>Link with Google\n            </button>\n          )}\n          onSuccess={this.linkGoogle}\n          onFailure={this.linkGoogle}\n        />\n        <br />\n       \n        <h2>Unlink your social media accounts</h2>\n        <button\n          style={{ marginRight: 15 }}\n          className=\"btn btn-primary\"\n          onClick={() => this.unlinkFacebook()}\n          disabled={this.props.dashboard.methods.includes('facebook') ? false : true}\n        >\n          Unlink with Facebook\n        </button>\n        <button\n          className=\"btn btn-danger\"\n          onClick={() => this.unlinkGoogle()}\n          disabled={this.props.dashboard.methods.includes('google') ? false : true}\n        >\n          Unlink with Google\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log('state', state)\n  return {\n    secret: state.dash.secret,\n    dashboard: state.dash,\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps, actions)(Dashboard);\n`.trim();\n\nconst header = `\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport * as actions from '../actions';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  signOut() { this.props.signOut() }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\" style={{ marginBottom: '30px' }}>\n        <Link className=\"navbar-brand\" to=\"/\">CodeWorkr API Auth</Link>\n\n        <div className=\"collapse navbar-collapse\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/dashboard\">Dashboard</Link>\n            </li>\n          </ul>\n\n          <ul className=\"nav navbar-nav ml-auto\">\n            {!this.props.isAuth ?\n              [<li className=\"nav-item\" key=\"signup\">\n                <Link className=\"nav-link\" to=\"/signup\">Sign Up</Link>\n              </li>,\n              <li className=\"nav-item\" key=\"signin\">\n                <Link className=\"nav-link\" to=\"/signin\">Sign In</Link>\n              </li>] : null}\n\n            {this.props.isAuth ?\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/signout\" onClick={this.signOut}>Sign Out</Link>\n              </li> : null}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isAuth: state.auth.isAuthenticated\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Header);`.trim();\n\nconst signIn = `\nimport React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\n\nimport * as actions from '../actions';\nimport CustomInput from './CustomInput';\n\nclass SignIn extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.responseGoogle = this.responseGoogle.bind(this);\n    this.responseFacebook = this.responseFacebook.bind(this);\n  }\n\n  async onSubmit(formData) {\n    await this.props.signIn(formData);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseGoogle(res) {\n    await this.props.oauthGoogle(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseFacebook(res) {\n    await this.props.oauthFacebook(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <form onSubmit={handleSubmit(this.onSubmit)}>\n            <fieldset>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                id=\"email\"\n                label=\"Enter your email\"\n                placeholder=\"example@example.com\"\n                component={ CustomInput } />\n            </fieldset>\n            <fieldset>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                label=\"Enter your password\"\n                placeholder=\"yoursuperpassword\"\n                component={ CustomInput } />\n            </fieldset>\n\n            { this.props.errorMessage ?\n            <div className=\"alert alert-danger\">\n              { this.props.errorMessage }\n            </div> : null }\n\n            <button type=\"submit\" className=\"btn btn-primary\">Sign In</button>\n          </form>\n        </div>\n        <div className=\"col\">\n          <div className=\"text-center\">\n            <div className=\"alert alert-primary\">\n              Or sign in using third-party services\n            </div>\n            <FacebookLogin\n              appId=\"number\"\n              render={renderProps => (\n                <button style={{ marginRight: 15 }} className=\"btn btn-primary\" onClick={renderProps.onClick}>Fb</button>\n              )}\n              fields=\"name,email,picture\"\n              callback={this.responseFacebook}\n              cssClass=\"btn btn-outline-primary\"\n            />\n            <GoogleLogin\n              clientId=\"number\"\n              render={renderProps => (\n              <button className=\"btn btn-danger\" onClick={renderProps.onClick} disabled={renderProps.disabled}>Go</button>\n              )}\n              onSuccess={this.responseGoogle}\n              onFailure={this.responseGoogle}\n              className=\"btn btn-outline-danger\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    errorMessage: state.auth.errorMessage\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, actions),\n  reduxForm({ form: 'signin' })\n)(SignIn)\n`.trim();\n\nconst signUp = `\nimport React, { Component } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\n\nimport * as actions from '../actions';\nimport CustomInput from './CustomInput';\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.responseGoogle = this.responseGoogle.bind(this);\n    this.responseFacebook = this.responseFacebook.bind(this);\n  }\n\n  async onSubmit(formData) {\n    await this.props.signUp(formData);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseGoogle(res) {\n    await this.props.oauthGoogle(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  async responseFacebook(res) {\n    await this.props.oauthFacebook(res.accessToken);\n    if (!this.props.errorMessage) {\n      this.props.history.push('/dashboard');\n    }\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <div className=\"row\">\n        <div className=\"col\">\n          <form onSubmit={handleSubmit(this.onSubmit)}>\n            <fieldset>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                id=\"email\"\n                label=\"Enter your email\"\n                placeholder=\"example@example.com\"\n                component={ CustomInput } />\n            </fieldset>\n            <fieldset>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                label=\"Enter your password\"\n                placeholder=\"yoursuperpassword\"\n                component={ CustomInput } />\n            </fieldset>\n\n            { this.props.errorMessage ?\n            <div className=\"alert alert-danger\">\n              { this.props.errorMessage }\n            </div> : null }\n\n            <button type=\"submit\" className=\"btn btn-primary\">Sign Up</button>\n          </form>\n        </div>\n        <div className=\"col\">\n          <div className=\"text-center\">\n            <div className=\"alert alert-primary\">\n              Or sign up using third-party services\n            </div>\n            <FacebookLogin\n              appId=\"number\"\n              render={renderProps => (\n                <button style={{ marginRight: 15 }} className=\"btn btn-primary\" onClick={renderProps.onClick}>Fb</button>\n              )}\n              fields=\"name,email,picture\"\n              callback={this.responseFacebook}\n              cssClass=\"btn btn-outline-primary\"\n            />\n            <GoogleLogin\n              clientId=\"number\"\n              render={renderProps => (\n                <button className=\"btn btn-danger\" onClick={renderProps.onClick} disabled={renderProps.disabled}>Go</button>\n              )}\n              onSuccess={this.responseGoogle}\n              onFailure={this.responseGoogle}\n              className=\"btn btn-outline-danger\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    errorMessage: state.auth.errorMessage\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, actions),\n  reduxForm({ form: 'signup' })\n)(SignUp)\n`.trim();\n\nconst ClientApp = `\n//components/Home.js\nimport React from 'react';\n\nexport default () => {\n  return <p>Welcome to our home page!</p>\n};\n\n\n//components/App.js\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Header from './Header';\nimport * as actions from '../actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.checkAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container\">\n        { this.props.children }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, actions)(App);\n`.trim();\n\nconst MainIndex = `\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport axios from 'axios';\n\nimport App from './components/App';\nimport Home from './components/Home';\nimport SignUp from './components/SignUp';\nimport SignIn from './components/SignIn';\nimport Dashboard from './components/Dashboard';\nimport reducers from './reducers';\n\nimport authGuard from './components/HOCs/authGuard';\n\naxios.defaults.withCredentials = true;\n\nReactDOM.render(\n  <Provider store={createStore(reducers, {}, applyMiddleware(reduxThunk))}>\n    <BrowserRouter>\n      <App>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/signup\" component={SignUp} />\n        <Route exact path=\"/signin\" component={SignIn} />\n        <Route exact path=\"/dashboard\" component={authGuard(Dashboard)} />\n      </App>\n    </BrowserRouter>\n  </Provider>,\n  document.querySelector('#root'));\n`.trim();\n\n\n\nclass MernSocial extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Server</h3>\n              <b>configuration/index.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={configuration}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>helpers/routeHelpers.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={helpers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/user.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/users.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={controllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/users.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={routes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>passport.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={passport}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>app.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={appServer}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Client</h3>\n              <b>actions/types.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>reducers/</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/HOC/authGuard.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={authGuard}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/CustomInput.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={customInput}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/Dashboard.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dashboard}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/Header.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={header}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/SignIn.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={signIn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/SignUp.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={signUp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>components/App.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ClientApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>index.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={MainIndex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MernSocial));\n"],"sourceRoot":""}