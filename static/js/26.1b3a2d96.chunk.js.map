{"version":3,"sources":["components/ReactJs/prismCode.js","components/ReactJs/sidebar.js","assets/pure.png","components/ReactJs/reactJs_hooks/pureComp.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","pureComps","pureComps2","PureComponents3","PureComponents4","PureComponents5","controlled","Uncontrolled","Update","PureComp","setTimeout","highlightAll","container","item","xs","src","Pure","alt","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/26.1b3a2d96.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introReact' className={classes.line}>Intro-Lazy-Children</Link></MenuItem>\n        <MenuItem><Link to='/reactInter' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/codingInter' className={classes.line}>CodesPro</Link></MenuItem>\n        <MenuItem><Link to='/mainCompo' className={classes.line}>Event-hoc-form<br />curd-slider</Link></MenuItem>\n        <MenuItem><Link to='/pureComp' className={classes.line}>PureComp-conComp</Link></MenuItem>\n        <MenuItem><Link to='/useStates' className={classes.line}>useMultiState</Link></MenuItem>\n        <MenuItem><Link to='/contextHooks' className={classes.line}>Context Hooks</Link></MenuItem>\n        <MenuItem><Link to='/customHooks' className={classes.line}>CustomHooks-memo</Link></MenuItem>\n        <MenuItem><Link to='/useReducersSta' className={classes.line}>UseReducers</Link></MenuItem>\n        <MenuItem><Link to='/contextMethods' className={classes.line}>Curd Hooks</Link></MenuItem>\n        <MenuItem><Link to='/jsonPlaceholder' className={classes.line}>JsonPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/async_await' className={classes.line}>Async-await-sideMenu<br />Mouse hover</Link></MenuItem>\n        <MenuItem><Link to='/ticGame' className={classes.line}>Share-maxMinDate<br />moveBtn-slideshow</Link></MenuItem>\n        <MenuItem><Link to='/linkGet' className={classes.line}>LinkGet</Link></MenuItem>\n        <MenuItem><Link to='/numberFormats' className={classes.line}>Random NumFor-biToDe<br /> Validations Step DateTimw</Link></MenuItem>\n        <MenuItem><Link to='/models' className={classes.line}>Models-chidData-csv<br />Icon-router</Link></MenuItem>\n        <MenuItem><Link to='/like' className={classes.line}>Like-checkbox-radio<br />select-scroll</Link></MenuItem>\n        <MenuItem><Link to='/textEditors' className={classes.line}>TextEditors-paginations<br />translator-sortCheck</Link></MenuItem>\n        <MenuItem><Link to='/sortItems' className={classes.line}>IncOnClick-pushBtn-fizzBuzz<br />show-addDocs-ratings</Link></MenuItem>\n        <MenuItem><Link to='/serverSideRend' className={classes.line}>Jwt-multiSel</Link></MenuItem>\n        <MenuItem><Link to='/dropdownSelect' className={classes.line}>SelectFtr-checkFtr-updtCrd</Link></MenuItem>\n        <MenuItem><Link to='/kanban' className={classes.line}>Kanban</Link></MenuItem>\n        <MenuItem><Link to='/hackeRank' className={classes.line}>HackeRank</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/pure.ed44cfe0.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../prismCode';\nimport Pure from '../../../assets/pure.png';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst pureComps = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nconst NotFound = () => {\n  let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n  return (\n    <h1>\n      Quote: <strong>{randomQuote}</strong>\n    </h1>\n  );\n};\n\nexport default class Controll extends Component {\n  state = { username: \"foo\" };\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000); // Simulate async ajax call\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\n\nconst pureComps2 = `\nconst quotes = [\"quote1\", \"quote2\", \"quote3\", \"quote4\", \"quote5\"];\n\nclass NotFound extends React.PureComponent {\n  render() {\n    let randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n    return (\n      <h1>\n        Quote: <strong>{randomQuote}</strong>\n      </h1>\n    );\n  }\n}\n\nexport default class Controll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"foo\" };\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ username: \"bar\" }), 2000);\n  }\n\n  render() {\n    return (\n      <div>\n        Welcome: {this.state.username}\n        <NotFound />\n      </div>\n    );\n  }\n}\n`.trim();\n\nconst PureComponents = `\n//App.js\nimport Task from '../comp';\n\nclass App extends PureComponent {\nstate = {\n     taskList: [\n        { title: 'excercise'},\n        { title: 'cooking'},\n        { title: 'Reacting'},\n     ]\n  };\n\n  componentDidMount() {\n  setInterval(() => {\n     this.setState({taskList: this.state.taskList});\n  }, 1000);\n}\n\nrender() {\n  return (\n      <div>\n         {this.state.taskList.map((task, i) => {\n            return (<Task\n               key={i}\n               title={task.title}\n            />);\n         })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//text.js\nclass Task extends React.Component {\n  render() {\n     console.log('task added');\n     return (\n          <div>\n            {this.props.title}\n          </div>);\n  }\n}\n\nexport default Task;\n`.trim();\n\nconst PureComponents3 = `\nclass PureComponent extends React.PureComponent {\n  renderCounter = 0\n\n  render() {\n    this.renderCounter++\n    return <h2>{this.props.name} rendered: {this.renderCounter}</h2>\n  }\n}\n\nclass ImpureComponent extends React.Component {\n  renderCounter = 0\n\n  render() {\n    this.renderCounter++\n    return <h2>{this.props.name} rendered: {this.renderCounter}</h2>\n  }\n}\n\nexport default class App extends React.Component {\n  state = { \n    renderCounter: 1,\n  }\n\n  onButtonPress = () => {\n    this.setState({ renderCounter: this.state.renderCounter + 1 })\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>App rendered: {this.state.renderCounter}</h2>\n        <ImpureComponent name=\"Impure Child Component\" />\n        <PureComponent name=\"Pure Child Component\" />\n        <button id=\"button\" onClick={this.onButtonPress}><h2>Trigger</h2></button>\n      </div>\n    )\n  }\n}`.trim();\n\nconst PureComponents4 = `\nlet pureCounter = 0\nlet impureCounter = 0\n\nconst PureComponent = React.memo(({ name }) => {\n  pureCounter++\n  \n  return <h2>{name} rendered: {pureCounter}</h2>\n})\n\nconst ImpureComponent = ({ name }) => {\n  impureCounter++\n\n    return <h2>{name} rendered: {impureCounter}</h2>\n}\n\nexport default class Controll extends React.Component {\n  state = { \n    renderCounter: 1,\n  }\n\n  onButtonPress = () => {\n    this.setState({ renderCounter: this.state.renderCounter + 1 })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Pure Functional Component</h1>\n        <h2>App rendered: {this.state.renderCounter}</h2>\n        <ImpureComponent name=\"Impure Child Component\" />\n        <PureComponent name=\"Pure Child Component\" />\n        <button id=\"button\" onClick={this.onButtonPress}><h2>Trigger Render</h2></button>\n      </div>\n    )\n  }\n}`.trim();\n\nconst PureComponents5 = `\nclass ComponentShouldComponentUpdate extends React.Component {\n  renderCounter = 0\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.name !== this.props.name\n  }\n\n  render() {\n    this.renderCounter++\n    return <h2>{this.props.name} rendered: {this.renderCounter}</h2>\n  }\n}\n\nclass Component extends React.Component {\n  renderCounter = 0\n\n  render() {\n    this.renderCounter++\n    return <h2>{this.props.name} rendered: {this.renderCounter}</h2>\n  }\n}\n\nexport default class Controll extends React.Component {\n  state = { \n    renderCounter: 1,\n  }\n\n  onButtonPress = () => {\n    this.setState({ renderCounter: this.state.renderCounter + 1 })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Should Component Update</h1>\n        <h2>App rendered: {this.state.renderCounter}</h2>\n        <Component name=\"Component Should Update\" />\n        <ComponentShouldComponentUpdate name=\"Component Should Not Update\"   someProp={this.state.renderCounter} />\n        <button id=\"button\" onClick={this.onButtonPress}><h2>Trigger Render</h2></button>\n      </div>\n    )\n  }\n}`.trim();\n\nconst controlled = `\nclass App extends Component{\n  state = {\n    name: '',\n    email: ''\n  }\n  \n  handleChange = (e) => {\n     this.setState({[e.target.name]: e.target.value})\n  };\n  \n  \n  handleSubmit = (e) => {\n     e.preventDefault();\n    \n     this.setState({[e.target.name]:e.target.value})\n  }\n  \n  render(){\n     return(\n        <>\n           <form onSubmit={this.handleSubmit}>\n              <input name=\"name\" value={this.state.name} onChange={this.handleChange} />\n              <input name=\"email\" value={this.state.email} onChange={this.handleChange} />\n              <button \n                disabled = {this.state.name.length > 0 ? false : true}\n                onClick={this.handleSubmit}>Submit</button>\n           </form>\n        </>\n     );\n  }\n}`.trim();\n\nconst Uncontrolled = `\nfunction App() {\n  const inputRef = useRef(null);\n  \n  const handleSubmitButton = () => {\n    alert(inputRef.current.value);\n  };\n  return (\n    <div className=\"App\">\n      <input type=\"text\" ref={inputRef} />\n      <input type=\"submit\" value=\"submit\" onClick={handleSubmitButton} />\n    </div>\n  );\n}`.trim();\n\nconst Update = `\nclass App extends Component{\n  forceUpdateHandler = () => {\n    this.forceUpdate();\n  };\n  \n  render(){\n    return(\n      <div>\n        <button onClick= {this.forceUpdateHandler} >FORCE UPDATE</button>\n        <h4>Random Number : { Math.random() }</h4>\n      </div>\n    );\n  }\n}`.trim();\n\n\nclass PureComp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>Component</b>\n              <br />\n              <img src={Pure} alt=\"Pure\" className=\"responsive\" style={redesign} />\n              <br />\n              <p>\n                we show a random quote from a list of quotes. The quote component will be a child of another stateful component.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={pureComps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                If you run it you will see that as soon as the component is rendered it displays a random quote, but after username state changes, it displays another random quote! A functional stateless component will re render every time the state ofthe parent component changes. Due to the limitations of a functional component you cannot implement life cycle hooks like shouldComponentUpdateto make explicit checks for renders.\n              </i>\n              <br />\n              <br />\n              <h3>Pure Component</h3>\n              <b>Pure component solves this issue. Pure Component implementsshouldComponentUpdate, out of the box.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pureComps2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                Will notice that even though the state of the parent changes, the quote displayed, doesn’t change. Pure component also gives a more stable UI because it will only re render when a prop on which it depends will change.It is recommended by React team that you use PureComponent instead of manually implementing shouldComponentUpdate, because PureComponent performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update.\n              </i>\n              <br />\n              <h3>How would you prevent a component from rendering</h3>\n              Three Ways\n              <br />\n              1.Pure Components shallowly compares the old state & props with the new state & props.\n              <div style={titles}>\n                <PrismCode\n                  code={PureComponents3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>2.React.memo</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={PureComponents4}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>3.Should Component Update</b>\n              <br />\n              <br />\n              Most likely Pure Components will be sufficient enough. However in cases of props or state structures with deeply nested objects, values won’t be compared.\n              using the shouldComponentUpdate life-cycle method which is invoked on state or prop changes before render is called.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={PureComponents5}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Force Update</h3>\n              Calling forceUpdate() will cause render() to be called on the component and skip shouldComponentUpdate().<br />\n              It will skip shouldComponentUpdate(), so you're not getting the optimization benefit.<br />\n              Also, using forceUpdate() \"bypasses\" the proper lifecycle, making your code less straight-forward and possibly harder to understand and maintain.\n              <div style={titles}>\n                <PrismCode\n                  code={Update}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>10.Which feature can we use to cause a component to render only when its ID changes? </b>\n              <p>shouldComponentUpdate</p>\n              <br />\n\n              <b>Controlled component</b>\n              <br />\n              We have 2 ways to handle the input value: Controlled & Uncontrolled\n              <p>In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.</p>\n              <ul>\n                <li>In a controlled component, the form data is handled by the state within the component.</li>\n                <li>The controlled component is a way that you can handle the form input value using the state and to change the input value there is only one way to change it is using setState or useState</li>\n                <li>Change this state using one of the events like onChange and when the user starts writing any character setState or useState will be called and update the state of this input then it will add the new value inside the input.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={controlled}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Uncontrolled Components</b>\n              <br />\n              <p>The uncontrolled component is like traditional HTML form inputs that you will not be able to handle the value by yourself but the DOM will take care of handling the value of the input and save it then you can get this value using React Ref</p>\n\n              <div style={titles}>\n                <PrismCode\n                  code={Uncontrolled}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Use the controlled component when you create</b>\n              <ul>\n                <li>Form validation so you always need to know the value of the input when typing to check if it’s a valid character or not!</li>\n                <li>Disable the submit button unless all fields have valid data</li>\n                <li>If you have a specific format like the credit card input</li>\n              </ul>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PureComp));\n"],"sourceRoot":""}