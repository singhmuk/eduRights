{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/iteratorsPy.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","addition","product","permutations","combinations","accumulate","groupby","repeat","iteration","arraysTypes","arrays","arrayRotetions","reverseRotetions","monotonic","IteratorsPy","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/240.c873fd06.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst addition = `\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n\n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\n\nfor x in myiter:\n  print(x)\n`.trim()\n\nconst product = `\nfrom itertools import product\n\nprod = product([1, 2], [3, 4])\nprint(list(prod))                                                       # convert the iterator to a list\n\nprod = product([1, 2], [3], repeat=2)\nprint(list(prod))                             \n`.trim();\n\nconst permutations = `\nfrom itertools import permutations\n\nperm = permutations([1, 2, 3])\nprint(list(perm))\n\nperm = permutations([1, 2, 3], 2)                                         # optional: the length of the permutation tuples\nprint(list(perm))`.trim();\n\nconst combinations = `\nfrom itertools import combinations, combinations_with_replacement\n\n\ncomb = combinations([1, 2, 3, 4], 2)              # second argument is mandatory and specifies length of the output tuples.\nprint(list(comb))\n\ncomb = combinations_with_replacement([1, 2, 3, 4], 2)\nprint(list(comb))`.trim();\n\nconst accumulate = `\nfrom itertools import accumulate\n\nacc = accumulate([1,2,3,4])                                       # return accumulated sums\nprint(list(acc))\n\n\n# other possible functions are possible\nimport operator\nacc = accumulate([1,2,3,4], func=operator.mul)\nprint(list(acc))\n\nacc = accumulate([1,5,2,6,3,4], func=max)\nprint(list(acc))`.trim();\n\nconst groupby = `\nfrom itertools import groupby\n\ndef smaller_than_3(x):                                                              # use a function as key\n    return x < 3\n\ngroup_obj = groupby([1, 2, 3, 4], key=smaller_than_3)\nfor key, group in group_obj:\n    print(key, list(group))\n    \n    \n# or use a lamda expression, e.g. words with an 'i':\ngroup_obj = groupby([\"hi\", \"nice\", \"hello\", \"cool\"], key=lambda x: \"i\" in x)\nfor key, group in group_obj:\n    print(key, list(group))\n    \npersons = [{'name': 'Tim', 'age': 25}, {'name': 'Dan', 'age': 25}, \n           {'name': 'Lisa', 'age': 27}, {'name': 'Claire', 'age': 28}]\n\nfor key, group in groupby(persons, key=lambda x: x['age']):\n    print(key, list(group))`.trim();\n\nconst repeat = `\nfrom itertools import count, cycle, repeat\n\nfor i in count(10):                                                 # count(x): count from x: x, x+1, x+2, x+3...\n    print(i)\n    if  i >= 13:\n        break\n\n\nsum = 0\nfor i in cycle([1, 2, 3]):                                         # cycle infinitely through an iterable\n    print(i)\n    sum += i\n    if sum >= 12:\n        break\n\n\nfor i in repeat(\"A\", 3):                                           # repeat x infinitely or n times\n    print(i)`.trim();\n\nconst iteration = `\nd = dict()\nd['xyz'] = 123\nd['abc'] = 345\n\nfor i in d:\n    print(\"% s % d\" % (i, d[i]))\n    \n    \n    \n#2 \nfor letter in 'geeksforgeeks':\n  if letter == 'e' or letter == 's':                              #Returns the control to the beginning of the loop.\n    continue\n  print('Current Letter :', letter)\n    \n    \n    \n#3 \nfor letter in 'geeksforgeeks':\n  if letter == 'e' or letter == 's':\n    break                                                         #Brings control out of the loop.\n\nprint('Current Letter :', letter)\n    \n    \n#4 pass\nfunction and classes.\nfor letter in 'geeksforgeeks':\n  pass\nprint('Last Letter :', letter)\n\n\n#5 \ndef addition(n):                                                  #Pass one or more iterable to the map() function.\n    return n + n \n\nnumbers = (1, 2, 3, 4) \nresult = map(addition, numbers) \nprint(list(result))\n`.trim();\n\nconst arraysTypes = `\nfrom array import  *\n\nvals = array('i', [1,2,3,4,5,-6,7,8,9,10])                                  // Creating an Array\nfloatArr = array('d', [2.5, 3.2, 3.3])                                      // creating an array with float type\n\nprint(vals.typecode)\nvals.append(100)\nvals.insert(1, 4)\nvals.remove(1)\nvals.pop(2)\nvals.index(2)\nvals[2] = 6                                                                # Updating an Elements in an Array\nprint(len(vals))\n`.trim();\n\nconst arrays = `\nimport array as arr                                           \n\na = arr.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])                                         \nfor i in range(0, 3):\n    print(a[i], end=\" \")\n\n    \n//2. Sum of the array\ndef _sum(arr):\n    return(sum(arr))\n\nans = _sum([12, 3, 4, 15])\nprint (ans)\n\n\n//3. Slpit Array\ndef splitArr(arr, n, k):\n    for i in range(0, k):\n        x = arr[0]\n        for j in range(0, n-1):\n            arr[j] = arr[j + 1]\n\n        arr[n-1] = x\n\n\narr = [12, 10, 5, 6, 52, 36]\nn = len(arr)\nposition = 2\n\nsplitArr(arr, n, position)\n\nfor i in range(0, n):\n    print(arr[i], end = ' ')\n`.trim();\n\nconst arrayRotetions = `\ndef leftRotate(arr, d, n):\n    for i in range(d):\n        leftRotatebyOne(arr, n)\n\ndef leftRotatebyOne(arr, n):\n    temp = arr[0]\n    for i in range(n-1):\n        arr[i] = arr[i+1]\n    arr[n-1] = temp\n\n\ndef printArray(arr,size):\n    for i in range(size):\n        print (\"%d\"% arr[i],end=\" \")\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nleftRotate(arr, 2, 7)\nprintArray(arr, 7) \n `.trim();\n\nconst reverseRotetions = `\ndef rverseArray(arr, start, end):\n    while (start < end):\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end = end-1\n\ndef leftRotate(arr, d):\n    n = len(arr)\n    rverseArray(arr, 0, d-1)\n    rverseArray(arr, d, n-1)\n    rverseArray(arr, 0, n-1)\n\ndef printArray(arr):\n    for i in range(0, len(arr)):\n        print (arr[i])\n\narr = [1, 2, 3, 4, 5, 6, 7]\nleftRotate(arr, 2)                                                                           # Rotate array by 2\nprintArray(arr)`.trim();\n\nconst monotonic = `\ndef isMonotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or  all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\nA = [6, 5, 4, 4]\nprint(isMonotonic(A))\n`.trim();\n\n\nclass IteratorsPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Stop after 20 iterations</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addition}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>For</h3>\n              <ul>\n                <li>To prevent the iteration to go on forever, use the StopIteration statement.</li>\n                <li>Use pass statement to write empty loops.</li>\n                <li>Pass is also used for empty control statements</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={iteration}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>product()</h3>\n              <ul>\n                <li>It computes the cartesian product of input iterables.</li>\n                <li>To allow the product of an iterable with itself, specify the number of repetitions</li>\n                <li>It is equivalent to nested for-loops.</li>\n                <ul>\n                  <li><b>Ex. product(A, B) returns the same as ((x,y) for x in A for y in B).</b></li>\n                </ul>\n\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={product}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>permutations()</h3>\n              This tool returns successive length permutations of elements in an iterable, with all possible orderings, and no repeated elements.\n              <div style={titles}>\n                <PrismCode\n                  code={permutations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>combinations() and combinations_with_replacement()</h3>\n              r-length tuples, in sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order. combinations() does not allow repeated elements, but combinations_with_replacement() does.\n              <div style={titles}>\n                <PrismCode\n                  code={combinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>accumulate()</h3>\n              Make an iterator that returns accumulated sums, or accumulated results of other binary functions.\n              <div style={titles}>\n                <PrismCode\n                  code={accumulate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>groupby()</h3>\n              Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each\n              element. If not specified, key defaults to an identity function and returns unchanged element.\n              <div style={titles}>\n                <PrismCode\n                  code={groupby}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Infinite iterators: count(), cycle(), repeat()</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={repeat}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Array</h3>\n              <b>Array don't have fixed size.</b>\n              <br />\n              <br />\n\n              <i><b>append()</b>\tAdds an element at the end of the list<br />\n                <b>clear()</b>\tRemoves all the elements from the list<br />\n                <b>copy()</b>\tReturns a copy of the list<br />\n                <b>count()</b>\tReturns the number of elements with the specified value<br />\n                <b>extend()</b>\tAdd the elements of a list (or any iterable), to the end of the current list<br />\n                <b>index()</b>\tReturns the index of the first element with the specified value<br />\n                <b>insert()</b>\tAdds an element at the specified position<br />\n                <b>pop()</b>\tRemoves the element at the specified position<br />\n                <b>remove()</b>\tRemoves the first item with the specified value<br />\n                <b>reverse()</b>\tReverses the order of the list<br />\n                <b>sort()</b>\tSorts the list<br />\n                <br />\n              </i>\n              <div style={titles}>\n                <PrismCode\n                  code={arraysTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={arrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Array Rotation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayRotetions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Reverse Array Rotation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverseRotetions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Monotonic</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={monotonic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(IteratorsPy));\n"],"sourceRoot":""}