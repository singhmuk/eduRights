{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","components/ml/deepMl/bagging.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","matplotlib","Pyplot","Plotting","labels","grids","subplots","scatter","bars","histogram","pie","Bagging","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/182.c94bef52.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst matplotlib = `\nimport matplotlib\n\nprint(matplotlib.__version__)`.trim();\n\nconst Pyplot = `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.array([1, 2, 6, 8])                            #Multiple Points\ny = np.array([3, 8, 1, 10])\n\nplt.plot(x, y)\nplt.plot(x, y, 'o')                                   #Draw two points, one at position (0, 0) and (6, 250).\nplt.plot(y, marker = 'o')                             #Mark each point with a circle.\nplt.plot(y, marker = 'o', ms = 20)                    #ms to set the size of the markers.\nplt.plot(y, marker = 'o', mec = 'r')                  #mec to set the color of the edge of the.\nplt.plot(y,  ms = 20, mfc = 'r')                      #mfc to set the color inside the edge of the markers.\n\nplt.show()\n`.trim();\n\nconst Plotting = `\nplt.plot(y, linestyle = 'dotted')                     #'dashed', \nplt.plot(y, ls = ':')\nplt.plot(y, linewidth = '20.5')\n\nplt.show()\n`.trim();\n\nconst labels = `\nplt.xlabel(\"Average Pulse\")\nplt.ylabel(\"Calorie Burnage\")\nplt.title(\"Sports Watch Data\")                                      #to set a title for the plot.\n\nplt.show()\n\n\n#Set Font Properties for\nfont1 = {'family':'serif','color':'blue','size':20}\nplt.xlabel(\"Average Pulse\", fontdict = font1)\n\nplt.show()\n`.trim();\n\nconst grids = `\nplt.grid()\nplt.grid(axis = 'x')\nplt.grid(color = 'green', linestyle = '--', linewidth = 0.5)\n\nplt.show()\n`.trim();\n\nconst subplots = `\nplt.subplot(1, 2, 1)\nplt.suptitle(\"MY SHOP\")\nplt.plot(x,y)\n\nplt.show()\n`.trim();\n\nconst scatter = `\nplt.scatter(x, y)\nplt.scatter(x, y, color = '#88c999')                         #set color for each scatter plot with the color or c argument.\nplt.colorbar()                                               #include the colormap.\nplt.scatter(x, y, s=10)                                      #set size.\nplt.scatter(x, y, alpha=0.5)                                 #adjust the transparency of the dots.\n\nplt.show()\n`.trim();\n\nconst bars = `\nplt.bar(x,y)\nplt.barh(x, y)                                                    #bars to be displayed horizontally.\nplt.bar(x, y, color = \"red\")\nplt.bar(x, y, width = 0.1)\nplt.barh(x, y, height = 0.1)\n\nplt.show()\n\n\n#\nx = [\"APPLES\", \"BANANAS\"]\ny = [400, 350]\nplt.bar(x, y)\n`.trim();\n\nconst histogram = `\nx = np.random.normal(170, 10, 250)\nplt.hist(x)\n\nplt.show()`.trim();\n\nconst pie = `\nmylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]                                 #labels to the pie chart.\n\nplt.pie(y, labels = mylabels)\nplt.pie(y, labels = mylabels, startangle = 90)\nplt.pie(y, labels = mylabels, explode = myexplode)                                    #explode\nplt.pie(y, labels = mylabels, shadow = True)                                          #shadow\nplt.legend()\n\nplt.show()\n`.trim();\n\nclass Bagging extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Matplotlib (for creating graph)</h3>\n              <ul>\n                <li>Matplotlib for producing plots and other 2D data visualizations.</li>\n                <li>Matplotlib is a low level graph plotting library in python that serves as a data visualization\n                  utility. It is a cross-platform library for making 2D plots from data in arrays.</li>\n                <li>Matplotlib is mostly written in python, a few segments are written in C, Objective-C and\n                  Javascript for Platform compatibility.</li>\n                <li>Matplotlib is written in Python and makes use of NumPy.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={matplotlib}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Pyplot</h3>\n              Most of the Matplotlib utilities lies under the pyplot submodule, and are under the plt alias.\n              <br />\n\n              <b>Types of Plots:</b>\n              <ul>\n                <ul>\n                  <li><b>pyplot():</b></li>\n                  <li><b>draw():</b></li>\n                  <li><b>show() :</b></li>\n                  <li><b>title():</b></li>\n                  <li><b>xscale():</b></li>\n                  <li><b>xticks():</b></li>\n                  <li><b>ylabel():</b></li>\n                  <li><b>ylim():</b></li>\n                  <li><b>acorr():</b>Plot the autocorrelation of x.</li>\n                  <li><b>angle_spectrum():</b>Plot the angle spectrum.</li>\n                  <li><b>annotate():</b>Annotate the point xy with text text.</li>\n                  <li><b>arrow():</b>Add an arrow to the Axes.</li>\n                  <li><b>autoscale():</b>Autoscale the axis view to the data (toggle).</li>\n                  <li><b>axes():</b>Add an axes to the current figure and make it the current axes.</li>\n                  <li><b>axis():</b>Convenience method to get or set some axis properties.</li>\n                  <li><b>bar\tMake():</b>a bar plot.</li>\n                  <li><b>bar_label():</b>Label a bar plot.</li>\n                  <li><b>barbs\tPlot():</b>a 2D field of barbs.</li>\n                  <li><b>barh():</b>Make a horizontal bar plot.</li>\n                  <li><b>box():</b>Turn the axes box on or off on the current axes.</li>\n                  <li><b>boxplot():</b>Make a box and whisker plot.</li>\n                  <li><b>broken_barh():</b>Plot a horizontal sequence of rectangles.</li>\n                  <li><b>cla():</b>Clear the current axes.</li>\n                  <li><b>delaxes():</b>Remove an Axes (defaulting to the current axes) from its figure.</li>\n                  <li><b>draw():</b>Redraw the current figure.</li>\n                  <li><b>draw_if_interactive() :</b>Redraw the current figure if in interactive mode.</li>\n                  <li><b>errorbar():</b>Plot y versus x as lines and/or markers with attached errorbars.</li>\n                  <li><b>cohere():</b>Plot the coherence between x and y.</li>\n                </ul>\n                <br />\n\n                <li><b>bar: </b>Make a bar plot.</li>\n                <li><b>barh: </b>Make a horizontal bar plot.</li>\n                <li><b>boxplot: </b>Make a box and whisker plot.</li>\n                <li><b>hist: </b>Plot a histogram.</li>\n                <li><b>hist2d: </b>Make a 2D histogram plot.</li>\n                <li><b>pie: </b>Plot a pie chart.</li>\n                <li><b>plot: </b>Plot lines and/or markers to the Axes.</li>\n                <ul>\n                  <li>plot() function is used to draw points (markers) in a diagram. By default, it draws a line from\n                    point to point.</li>\n                  <li>Parameter 1 is an array containing the points on the x-axis.</li>\n                  <li>Parameter 2 is an array containing the points on the y-axis.</li>\n                  <li>If we do not specify the points in the x-axis, they will get the default values 0, 1, 2, 3,...\n                    (depending on the length of the y-points.</li>\n                </ul>\n                <li><b>polar: </b>Make a polar plot..</li>\n                <li><b>scatter: </b>Make a scatter plot of x vs y.</li>\n                <li><b>stackplot: </b>Draws a stacked area plot.</li>\n                <li><b>stem: </b>Create a stem plot.</li>\n                <li><b>step: </b>Make a step plot.</li>\n                <li><b>quiver: </b>Plot a 2-D field of arrows.</li>\n              </ul>\n              <br />\n\n              <b>Image Functions:</b>\n              <ul>\n                <li><b>imread: </b>Read an image from a file into an array.</li>\n                <li><b>imsave: </b>Save an array as in image file.</li>\n                <li><b>imshow: </b>Display an image on the axes.</li>\n              </ul>\n              <br />\n\n              <b>Axis Functions:</b>\n              <ul>\n                <li><b>axes: </b>Add axes to the figure.</li>\n                <li><b>text: </b>Add text to the axes.</li>\n                <li><b>title: </b>Set a title of the current axes.</li>\n                <li><b>xlabel: </b>Set the x axis label of the current axis.</li>\n                <li><b>xlim: </b>Get or set the x limits of the current axes.</li>\n                <li><b>xscale: </b></li>\n                <li><b>xticks: </b>Get or set the x-limits of the current tick locations and labels.</li>\n              </ul>\n              <br />\n\n              <b>Figure Functions:</b>\n              <ul>\n                <li><b>figtext: </b>Add text to figure.</li>\n                <li><b>figure: </b>Creates a new figure.</li>\n                <li><b>show: </b>Display a figure.</li>\n                <li><b>savefig: </b>Save the current figure.</li>\n                <li><b>close: </b>Close a figure window.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={Pyplot}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Line</h3>\n              We use the keyword argument linestyle, or ls, to change the style of the plotted line.\n              <br />\n\n              <ul>\n                <li>linestyle can be written as ls.</li>\n                <li>dotted can be written as :.</li>\n                <li>dashed can be written as --.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={Plotting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Labels and Title</h3>\n              Use the xlabel() and ylabel() functions to set a label for the x- and y-axis.\n              <br />\n              <br />\n              use the loc parameter in title() to position the title.\n              <br />\n              Legal values are: 'left', 'right', and 'center'. Default value is 'center'.\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={labels}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Adding Grid Lines</h3>\n              <ul>\n                <li>Use the grid() function to add grid lines to the plot.</li>\n                <li>Use the axis parameter in the grid() to specify which grid lines to display.</li>\n                <li>Also set the line properties of the grid, like: grid(color = 'color', linestyle = 'linestyle',\n                  linewidth = number).</li>\n                <li></li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={grids}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Subplots</h3>\n              <ul>\n                <li>subplots() can draw multiple plots in one figure.</li>\n                <li>It takes three arguments that describes the layout of the figure.</li>\n                <li>The layout is organized in rows and columns, which are represented by the first and second argument,\n                  third argument represents the index of the current plot.\n                </li>\n                <li>Add a title to the entire figure with the suptitle() function.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={subplots}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Scatter</h3>\n              <ul>\n                <li>Use the scatter() to draw a scatter plot.</li>\n                <li>The scatter() function plots one dot for each observation. It needs two arrays of the same length,\n                  one for the values of the x-axis, and other for y-axis.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={scatter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Bars</h3>\n              <ul>\n                <li>Use the bar() function to draw bar graphs.</li>\n                <li>The bar() function takes arguments that describes the layout of the bars.</li>\n                <li>The categories and their values represented by the first and second argument as arrays.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={bars}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Histograms</h3>\n              <ul>\n                <li>A histogram is a graph showing frequency distributions. It is a graph showing the number of\n                  observations within each given interval.</li>\n                <li>Use the hist() function to create histograms.</li>\n                <li>The hist() function will use an array of numbers to create a histogram, the array is sent into\n                  the function as an argument.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={histogram}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Matplotlib Pie Charts</h3>\n              <ul>\n                <li>Use the pie() function to draw pie charts.</li>\n                <li>The default start angle is at the x-axis, but you can change the start angle by specifying a startangle parameter.</li>\n                <li>With explode allow one of the wedges to stand out</li>\n                <li>To add a list of explanation for each wedge, use the legend() function.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={pie}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Bagging));\n"],"sourceRoot":""}