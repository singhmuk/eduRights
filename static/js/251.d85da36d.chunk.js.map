{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/stringPy.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","format","iterating","formates","fstrings","concatenation","splits","simpleFunction","lambda","filter","variations","sorting","mapFun","evaluates","reduces","StringPy","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/251.d85da36d.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst format = `\ntxt = \"My name is John, and I am {}\"\n    \nmy_string = \"\"\"Hello                                              \nWorld\"\"\"\n\nprint(type(my_string))\nprint(my_string[1])\nprint(len(my_string))\nprint(my_string.strip())                            \nprint(my_string.lower())\nprint(my_string.upper())\nprint(my_string.replace(\"H\", \"J\"))\nprint(my_string.split(\",\"))\nprint(len(my_string))  \nprint(\"hello\".startswith(\"he\"))                                      # startswith and endswith\nprint(\"hello\".endswith(\"llo\"))\nprint(\"Hello\".find(\"o\"))                                             # find first index of a given substring, -1 otherwise\nprint(\"Hello\".count(\"e\"))\n\n\nmy_list = ['How', 'are', 'you', 'doing']                              \nstr = ' '.join(my_list)                                              # join elements of a list into a string\nprint(str)\n\nb = my_string[0]                                                     # get character by referring to index\nb = my_string[1:3]                                                   # Substrings with slicing\nb = my_string[::2]                                                   # start to end with every second item\nb = my_string[::-1] \n`.trim();\n\nconst iterating = `\nmy_string = 'Hello'\nfor i in my_string:\n    print(i)`.trim();\n\nconst formates = `\na = \"Hello {0} and {1}\".format(\"Bob\", \"Tom\")                            # use braces as placeholders\na = \"Hello {} and {}\".format(\"Bob\", \"Tom\")                              # positions are optional for the default order\na = \"The integer value is {}\".format(2)\n\nprint(a)\n\n\na = \"The float value is {0:.3f}\".format(2.1234)                         # some special format rules for numbers\na = \"The float value is {0:e}\".format(2.1234)\na = \"The binary value is {0:b}\".format(2)\n\nprint(a)\n\n\nprint(\"Hello %s and %s\" % (\"Bob\", \"Tom\"))                               # must be a tuple for multiple arguments\nval =  3.14159265359\nprint(\"The decimal value is %d\" % val)                                  # old style formatting by using % operator\n`.trim();\n\nconst fstrings = `\nname = \"Eric\"\nage = 25\na = f\"Hello, {name}. You are {age}.\"\nprint(a)\n\npi = 3.14159\na = f\"Pi is {pi:.3f}\"\nprint(a)\n\na = f\"The value is {2*60}\"                                   # f-Strings are evaluated at runtime, which allows expressions\nprint(a)`.trim();\n\nconst concatenation = `\nfrom timeit import default_timer as timer\nmy_list = [\"a\"] * 1000000\n\nstart = timer()\na = \"\".join(my_list)\nend = timer()\nprint(\"concatenate string with join(): %.5f\" % (end - start))\n`.trim();\n\nconst splits = `\nimport re\n\n#split\nstr = \"Split string into list\"\nnewStr = str.split()\nprint(newStr) \n\n\n#2 sub\nnewStr = re.sub(\"s\", \"9\", str)\nprint(newStr)\n\n\n#3 subn\nstr = re.subn('ov', '~*' , 'The rain in Spain', flags = re.IGNORECASE)\nprint(str)`.trim();\n\nconst simpleFunction = `\ndef sum(a,b):\n    c=a+b\n    return c\nobj=sum(2,3)\nprint(obj)\n\n\n#2\nf=lambda a,b:a+b\nobj=f(2,3)\nprint(obj)`.trim();\n\nconst lambda = `\nf=lambda n: 1 if n==0 else n+f(n-1)\nprint(f(5))\n\n#2\nlist(filter(lambda x:x>6,range(9))) [7, 8]\n\nlist(map(lambda x:x**2,range(5))) [0, 1, 4, 9, 16, 25]\n\nfrom functools import reduce \nreduce(lambda x,y:x-y,[1,2,3,4,5]) -13`.trim();\n\nconst filter = `\nf = lambda x: x+10                                          \nval1 = f(5)\nval2 = f(100)\nprint(val1, val2)\n\n\nf = lambda x,y: x*y                          \nval3 = f(2,10)\nval4 = f(7,5)\nprint(val3, val4)`.trim();\n\nconst variations = `\ndef myfunc(n):\n    return lambda x: x * n\n\ndoubler = myfunc(2)\nprint(doubler(6))\n`.trim();\n\nconst sorting = `\npoints2D = [(1, 9), (4, 1), (5, -3), (10, 2)]\nsorted_by_y = sorted(points2D, key= lambda x: x[1])\nprint(sorted_by_y)\n\nmylist = [- 1, -4, -2, -3, 1, 2, 3, 4]\nsorted_by_abs = sorted(mylist, key= lambda x: abs(x))\nprint(sorted_by_abs)`.trim();\n\nconst mapFun = `\na  = [1, 2, 3, 4, 5, 6]\nb = list(map(lambda x: x * 2 , a))\n\n\nc = [x*2 for x in a]                                                # Use map if you have an already defined function\nprint(b)\nprint(c)`.trim();\n\nconst evaluates = `\na = [1, 2, 3, 4, 5, 6, 7, 8]\nb = list(filter(lambda x: (x%2 == 0) , a))\n\nc = [x for x in a if x%2 == 0]\nprint(b)\nprint(c)`.trim();\n\nconst reduces = `\nfrom functools import reduce\na = [1, 2, 3, 4]\nproduct_a = reduce(lambda x, y: x*y, a)\nprint(product_a)\nsum_a = reduce(lambda x, y: x+y, a)\nprint(sum_a)`.trim();\n\nclass StringPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Strings</h3>\n              <ul>\n                <li>Python strings are immutable.</li>\n                <li>Use triple quotes for multiline strings.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>count(): </b>Returns the number of times a specified value occurs in a string.</li>\n                <li><b>endswith(): </b>Returns true if the string ends with the specified value.</li>\n                <li><b>find(): </b>Searches the string for a specified value and returns the position.</li>\n                <li><b>format(): </b>Formats specified values in a string.</li>\n                <li><b>format_map(): </b>Formats specified values in a string</li>\n                <li><b>index(): </b>Searches the string for a specified value and returns the position.</li>\n                <li><b>isalnum(): </b>Returns True if all characters in the string are alphanumeric.</li>\n                <li><b>isalpha(): </b>Returns True if all characters in the string are in the alphabet.</li>\n                <li><b>isdecimal(): </b>Returns True if all characters in the string are decimals.</li>\n                <li><b>isdigit(): </b>Returns True if all characters in the string are digits.</li>\n                <li><b>isidentifier(): </b>Returns True if the string is an identifier.</li>\n                <li><b>islower(): </b>Returns True if all characters in the string are lower case.</li>\n                <li><b>isupper(): </b></li>\n                <li><b>lower(): </b>Converts a string into lower case.</li>\n                <li><b>isnumeric(): </b>Returns True if all characters in the string are numeric.</li>\n                <li><b>isprintable(): </b>Returns True if all characters in the string are printable.</li>\n                <li><b>isspace(): </b>Returns True if all characters in the string are whitespaces.</li>\n                <li><b>istitle(): </b>Returns True if the string follows the rules of a title.</li>\n                <li><b>join(): </b>Joins the elements of an iterable to the end of the string.</li>\n                <li><b>ljust(): </b>Returns a left justified version of the string.</li>\n                <li><b>lstrip(): </b>Returns a left trim version of the string.</li>\n                <li><b>maketrans(): </b>Returns a translation table to be used in translations.</li>\n                <li><b>partition(): </b>Returns a tuple where the string is parted into three parts.</li>\n                <li><b>rpartition(): </b>Returns a tuple where the string is parted into three parts.</li>\n                <li><b>replace(): </b>Returns a string where a specified value is replaced with a specified value.</li>\n                <li><b>rfind(): </b>Searches the string for a specified value and returns the last position of where it was found.</li>\n                <li><b>rindex(): </b>Searches the string for a specified value and returns the last position of where it was found.</li>\n                <li><b>rjust(): </b>Returns a right justified version of the string.</li>\n                <li><b>rstrip(): </b>Returns a right trim version of the string.</li>\n                <li><b>rsplit(): </b>Splits the string at the specified separator, and returns a list.</li>\n                <li><b>split(): </b>Splits the string at the specified separator, and returns a list</li>\n                <li><b>splitlines(): </b>Splits the string at line breaks and returns a list.</li>\n                <li><b>startswith(): </b>Returns true if the string starts with the specified value.</li>\n                <li><b>strip(): </b>Returns a trimmed version of the string.</li>\n                <li><b>swapcase(): </b>Swaps cases, lower case becomes upper case.</li>\n                <li><b>title(): </b>Converts the first character of each word to upper case.</li>\n                <li><b>translate(): </b>Returns a translated string.</li>\n                <li><b>zfill(): </b>Fills the string with a specified number of 0 values at the beginning.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={format}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Iterating</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={iterating}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={formates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. f-Strings</h3>\n              Use the variables directly inside the braces.\n              <div style={titles}>\n                <PrismCode\n                  code={fstrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>More on immutability and concatenation</h3>\n              <ul>\n                <li>since a string is immutable, adding strings with + always\n                  creates a new string, and therefore is expensive for multiple operations.</li>\n                <li>join method is much faster.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={concatenation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>4. What are split(), sub(), and subn() methods in Python?</h3>\n              These methods belong to Python RegEx,  ‘re’ module and are used to modify strings.\n              <ul>\n                <li><b>split():</b>Used to split a given string into a list.</li>\n                <li><b>sub(): </b>Used to find a substring where a regex pattern matches,\n                  and then it replaces the matched substring with a different string.</li>\n                <li><b>subn(): </b>similar to the sub()\n                  method, but it returns the new string, along with the number of replacements.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={splits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Lambda</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={simpleFunction}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Lambda with Map. Filter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={lambda}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Lambda functions</h3>\n              <ul>\n                <li>A lambda function is defined without a name.</li>\n                <li>A lambda function can take any number of arguments, but have only one expression.</li>\n                <li>Anonymous functions are defined using the lambda keyword.</li>\n                <li>It's most common use is as an argument to higher-order functions.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={filter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Lamdba inside another function</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={variations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Custom sorting using a lambda function as key parameter</h3>\n              The key function transforms each element before sorting.\n              <div style={titles}>\n                <PrismCode\n                  code={sorting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Use lambda for map function</h3>\n              map(func, seq), transforms each element with the function.\n              <div style={titles}>\n                <PrismCode\n                  code={mapFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Use lambda for filter function</h3>\n              filter(func, seq), returns all elements for which func evaluates to True.\n              <div style={titles}>\n                <PrismCode\n                  code={evaluates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Reduce</h3>\n              reduce(func, seq), repeatedly applies the func to the elements and returns a single value.\n              func takes 2 arguments.\n              <div style={titles}>\n                <PrismCode\n                  code={reduces}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(StringPy));\n"],"sourceRoot":""}