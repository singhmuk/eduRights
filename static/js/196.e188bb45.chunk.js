(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[196],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return m}));var a=t(45),l=t(28),s=t(136),r=t(137),i=t(139),o=t(0),c=t.n(o),d=t(138),u=t.n(d),m=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(s.a)(this,Object(r.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&u.a.highlightElement(t.ref.current)},t.ref=c.a.createRef(),t}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(c.a.Component))},141:function(e,n,t){},155:function(e,n,t){"use strict";t.d(n,"a",(function(){return d}));var a=t(0),l=t.n(a),s=t(26),r=t(297),i=t(295),o=t(114),c=Object(o.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function d(){var e=c();return l.a.createElement("div",{className:e.root},l.a.createElement(i.a,null,l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/infoMD",className:e.line},"IntroMD")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/intro",className:e.line},"Queries")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/mongodbMethods",className:e.line},"mongodbMethods")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/mongoCurd",className:e.line},"MongoCurd-Ref")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/mongoQueries",className:e.line},"Mongo Queries")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/searchErrorHandling",className:e.line},"searchErrorHandling")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/bulkRight",className:e.line},"BulkWright")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/mysql",className:e.line},"Mysql")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/mysqlCurd",className:e.line},"MysqlCurd")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/joinOp",className:e.line},"JoinOp")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/sortOp",className:e.line},"Sort")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/curdOp",className:e.line},"CurdOp")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/gridFs",className:e.line},"gridFs")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/postgressql",className:e.line},"PostgreSql"))),l.a.createElement("div",null))}},390:function(e,n,t){"use strict";t.r(n);var a=t(45),l=t(28),s=t(136),r=t(137),i=t(139),o=t(0),c=t.n(o),d=t(138),u=t.n(d),m=t(120),g=t(57),b=t(296),p=t(5),h=(t(141),t(155)),E=t(140),f={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},y='\n// Add operation\ndb.users.insertOne({\n    name: "sue",\n    age: 26,\n    status: "pending"\n  })\n  \n  \n  // Read operation\n  Read operations retrieve documents from a collection.\n  db.collection.find()\n  \n  db.users.find(\n    {age : { $gt: 18 }},\n    {name: 1, address:1}\n  ).limit(5)\n  \n  \n  // Update Operations\n  Update operations modify existing documents in a collection.\n  db.collection.updateOne() \n  db.collection.updateMany() \n  db.collection.replaceOne() \n  \n  db.users.updateMany(\n    {age : { $lt: 18 }},\n    {$set:  {status: "reject"}}\n  )\n  \n  //Delete Operations\n  Delete operations remove documents from a collection. \n  db.collection.deleteOne() \n  db.collection.deleteMany()\n  \n  db.users.deleteMany(\n      {status: "reject"}\n  )'.trim(),j='\n  db.inventory.insertMany([\n    { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } },\n    { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } },\n    { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }\n ])'.trim(),O='\n // Find all students\ndb.students.find( {} )\n\n// Find the first 3 students\ndb.stuents.find( {} ).limit(3)\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {name: 1} )\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {gpa: -1, name: 1} )\n\n// Find all biology majors\ndb.students.find( {major: "Biology"} )\n\n// Find all student\'s with a phone number 333-3333\ndb.students.find( {contact: {phone: "333-3333", email: "student@school.edu"} } )\n\n// Find all biology majors named Jack\ndb.students.find( {name: "Jack", major: "Biology"} )\n\n// Final all students who are chemistry majors or named Jack\ndb.students.find( { $or: [ {name: "Jack"}, {major: "Chemistry"} ] } )\n\n// Final all students with a gpa above 3.5\ndb.students.find( {gpa: {$gt: 3.5} } )\n\n// Find all students with a gpa less than or equal to 3.2\ndb.students.find( {gpa: {$lte: 3.2} } ).sort({gpa: -1})         // $eq, $ne, $lt, $lte, $gt, $gte\n\n// Find all students with names in the array\ndb.students.find( {name: {$in: ["Kate", "Claire"]} } )   // $in, $nin\n\n// Find all students who have awards\ndb.students.find( {awards: {$exists: true} } )           // false\n\n// Find all db entries where the name is a string\ndb.students.find({name: {$type: 2} })\n\n// Find all students who\'s first grade is a 90\ndb.students.find( {"grades.0": 90 } )\n\n// Find all students who have a grade greater than 80\ndb.students.find( {grades: {$elemMatch: { $gte: 80} } } )\n\n// Find all students who have 4 grades recorded\ndb.students.find( {grades: {$size: 4 } } )'.trim(),v='\n// same filters as inserting\ndb.stuents.updateOne(<filter>, <update>, <options>)\n\n// Do this twice so we can change it back with updateMany\ndb.students.updateOne(\n     {major: "Biology"},\n     {  $set: {major: "Bio"}}\n  )\n\ndb.students.updateMany(\n     {major: "Bio"},\n     { $set: {major: "Biology"} }\n  )\n\n// replaceMany()\ndb.students.replaceOne(\n     {major: "Bio"},\n     {name: "new name", major: "new major", gpa: 4.0}\n  )\n\n// Delete all documents\ndb.students.deleteMany({})\n\ndb.students.deleteOne({major: "Biology"})\n\ndb.students.deleteMany({gpa: {$gte: 3.5}})'.trim(),M=function(e){function n(){return Object(a.a)(this,n),Object(s.a)(this,Object(r.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(m.a,{container:!0},c.a.createElement(m.a,{item:!0,xs:2},c.a.createElement(g.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(h.a,null)))),c.a.createElement(m.a,{item:!0,xs:10},c.a.createElement(g.a,{className:e.paper},c.a.createElement(b.a,null,c.a.createElement("b",null,"Curd Operations"),c.a.createElement("br",null),c.a.createElement("br",null),"Create or insert operations add new documents to a collection. If the collection does not currently exist, insert operations will create the collection.",c.a.createElement("br",null),"MongoDB provides the following methods to insert documents into a collection:",c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("i",null,c.a.createElement("li",null,"db.collection.insertOne() "),c.a.createElement("li",null,"db.collection.insertMany()")),c.a.createElement("br",null),"In MongoDB, insert operations target a single collection. All write operations in MongoDB are atomic on the level of a single document",c.a.createElement("div",{style:f},c.a.createElement(E.a,{code:y,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Insert Multiple Documents"),"db.collection.insertMany()",c.a.createElement("div",{style:f},c.a.createElement(E.a,{code:j,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Finding Documents"),c.a.createElement("div",{style:f},c.a.createElement(E.a,{code:O,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Updating & Deleting Documents"),c.a.createElement("div",{style:f},c.a.createElement(E.a,{code:v,language:"js",plugins:["line-numbers"]}))))))}}]),n}(o.Component);n.default=Object(p.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(M)}}]);
//# sourceMappingURL=196.e188bb45.chunk.js.map