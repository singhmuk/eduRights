{"version":3,"sources":["components/ReactJs/prismCode.js","components/algorithams/sidebar.js","assets/stcks.png","components/algorithams/deepAlgorithams/numbersAlgo.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","forNum","factorial","prime","magicNumber","possible","common_divisor","reverse","isPowerOfTwo","addDigits","isUgly","getSum","numSquares","brokenCalc","addStrings","myPow","letterCombinations","remString","removePart","DSLogic4","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/37.597d2968.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAlgo' className={classes.line}>Deadlock</Link></MenuItem>\n        <MenuItem><Link to='/Stack' className={classes.line}>Stack</Link></MenuItem>\n        <MenuItem><Link to='/Queue' className={classes.line}>Queue</Link></MenuItem>\n        <MenuItem><Link to='/linkedList' className={classes.line}>LinkedList</Link></MenuItem>\n        <MenuItem><Link to='/heap' className={classes.line}>Heap</Link></MenuItem>\n        <MenuItem><Link to='/trees' className={classes.line}>Tree</Link></MenuItem>\n        <MenuItem><Link to='/graph' className={classes.line}>Graph</Link></MenuItem>\n        <MenuItem><Link to='/sort' className={classes.line}>QuickSort</Link></MenuItem>\n        <MenuItem><Link to='/searchAlgo' className={classes.line}>Search</Link></MenuItem>\n        <MenuItem><Link to='/topTech' className={classes.line}>TopTech</Link></MenuItem>\n        <MenuItem><Link to='/stringAlgo' className={classes.line}>String</Link></MenuItem>\n        <MenuItem><Link to='/arrayAlgo' className={classes.line}>Array</Link></MenuItem>\n        <MenuItem><Link to='/nestingArrAlgo' className={classes.line}>Nesting Array</Link></MenuItem>\n        <MenuItem><Link to='/numbersAlgo' className={classes.line}>Numbers</Link></MenuItem>\n        <MenuItem><Link to='/gameAlgo' className={classes.line}>Game</Link></MenuItem>\n        <MenuItem><Link to='/arrayStrAlgo' className={classes.line}>ArrayStr</Link></MenuItem>\n        <MenuItem><Link to='/arrayNumAlgo' className={classes.line}>ArrayNum</Link></MenuItem>\n        <MenuItem><Link to='/dslogic8' className={classes.line}>Logic8</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/stcks.7efa3b78.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst forNum=`\nconst PrintNumbers = (start, end)=> {\n  console.log(start);\n  if (start < end) {\n      PrintNumbers((start + 1), end);\n  }\n}\n\nPrintNumbers(1, 10);\n`.trim();\n\nconst factorial = `\nfunction factorial(n){\n  if(n === 1) return 1;\n  return n * factorial(n-1)\n }\n \nconsole.log(factorial(4));\n `.trim()\n\nconst prime = `\nfunction primes(){\n  const num=100;\n  const result=[];\n  let i,j;\n\n  for(i=0; i<num; i++){\n      let count=0;\n      for(j=2; j<i; j++){\n          if(i%j==0) count +=1;\n      }\n   \n      if(count==0){\n          result.push(i);\n      }\n  }\n  console.log(result);\n}\n\nprimes()\n\n\n//\nfunction countPrimes(n){\n  const map = []\n\n  for (let i = 2; i < n; i++) {\n    map[i] = true\n  }\n  \n  for (let i = 2; i * i < n; i++) {\n    if (map[i]) {\n      for (let j = i * i; j < n; j += i) {\n        map[j] = false\n      }\n    }\n  }\n  return map.filter(num => num === true).length\n}\n\nconsole.log(countPrimes(10))\n`.trim()\n\nconst magicNumber = `\n function magicNum(){\n   const random = Math.random(0,1)\n   return random;\n }\n \n function main(){\n   const result = Math.random(0, magicNum);\n   console.log(result);\n }\n \n main();\n `.trim();\n\nconst possible = `\nfunction isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nconsole.log(isInt(0));`.trim();\n\nconst common_divisor = `\nfunction numbers(x, y) {\n    if ((typeof x !== 'number') || (typeof y !== 'number'))\n      return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n        while(y) {\n          var i = y;\n          y = x % y;\n          x = i;\n        }\n  return x;\n  }\n \n  console.log(numbers(12, 4));\n  console.log(numbers(9, 3));`.trim()\n\nconst reverse = `\nfunction reverse(num){\n  let result='';\n  const target = num.toString();\n  \n  for(let i=target.length; i>=0; i--){\n      result += target.charAt(i);\n  }\n  \n  result = Number(result)\n  console.log(result);\n}\n\nreverse(123)\n`.trim();\n\nconst isPowerOfTwo = `\nfunction isPowerOfTwo(x){\n  if (x <= 0) return false;\n  return (x & (x - 1)) === 0\n}\n\nconsole.log(isPowerOfTwo(16))\n`.trim();\n\nconst addDigits = `\nfunction addDigits(){\n  const num = 2568;\n  let numArr=0;\n  let sum=0;\n\n    numArr = num.toString().split('').map(Number)\n    sum=numArr.reduce((a,b)=>a+b);\n  \n  console.log(sum);\n};\n\naddDigits()\n`.trim();\n\nconst isUgly = `\nfunction isUgly(){\n  const num=15;\n  const memo = [];\n\n  function aux(n){\n    if (memo[n] !== undefined) return memo[n];\n    if (n===1 || n===2 || n===3 || n===5 || n===4) return true;\n    if (n<5) return false;\n\n    memo[n] = aux(n/ 2) || aux(n/ 3) || aux(n/ 5);\n    return memo[n]\n  }\n  console.log(aux(num));\n}\n\nisUgly();\n`.trim();\n\nconst getSum = `\nfunction getSum(a, b) {\n  let carry = 0;\n  \n  while (b !== 0) {\n    carry = a & b\n    a ^= b\n    b = carry << 1\n  }\n  return a\n}\n\nconsole.log(getSum(5, 1))\n`.trim();\n\nconst numSquares = `\nfunction squareroot() {\n  var nums=64;\n  for (let i=nums; i>=1; i--) {\n      if(i*i === nums){\n          nums =i;\n          break;\n     }\n }\n console.log(nums);\n}\n\nsquareroot();\n`.trim();\n\nconst brokenCalc = `\nfunction brokenCalc(){\n  let X=5, Y=8;\n  let result = 0;\n\n  while(Y>X){\n    if(Y%2 === 0) {\n      Y /=2\n    } \n    else {\n      Y +=1\n    }\n    result +=1\n  }\n  console.log(result + X - Y);\n}\n\nbrokenCalc()\n`.trim();\n\nconst addStrings = `\nfunction multiply() {\n  let num=\"2\";\n  let num2=\"3\";\n  let product =0;\n\n  num=Number(num)\n  num2=Number(num2)\n  \n  product = num*num2;\n  console.log(product)\n}\n\nmultiply();\n\n\n//\nfunction multiply() {\n  const num=\"2\";\n  const num2=\"3\";\n  const product = Array(num.length + num2.length).fill(0);\n\n  for (let i = num.length; i--;) {\n      let carry = 0;\n      for (let j = num2.length; j--;) {\n          product[1+i+j] += carry + num[i]*num2[j];\n          carry = Math.floor(product[1+i+j] / 10);\n          product[1+i+j] = product[1+i+j] % 10;\n      }\n      product[i] += carry;\n  }\n  console.log(product.join(\"\").replace(/^0*(\\d)/, \"$1\"));\n}\n\nmultiply();\n`.trim();\n\nconst myPow = `\nfunction myPow(x, n){\n  if (n === 0) return 1;\n\n  const temp = myPow(x, Math.floor(Math.abs(n /2)))\n  const result = n%2 ===0 ?temp *temp :x *temp *temp;\n  return n<0 ? 1/ result :result;\n}\n\nconsole.log(myPow(2.00000, 10))\n`.trim();\n\nconst letterCombinations = `\nfunction letterCombinations(digits = ''){\n  const map = {\n    2: ['a', 'b', 'c'],\n    3: ['d', 'e', 'f'],\n    4: ['g', 'h', 'i'],\n    5: ['j', 'k', 'l'],\n    6: ['m', 'n', 'o'],\n    7: ['p', 'q', 'r', 's'],\n    8: ['t', 'u', 'v'],\n    9: ['w', 'x', 'y', 'z'],\n  }\n\n  if (!digits.length) return [];\n\n  let result = [''];\n  let index = 0;\n\n  while (index < digits.length) {\n    const next = map[digits[index]];\n    const nextResult = [];\n\n    for (let i = 0; i < result.length; i++) {\n      for (let j = 0; j < next.length; j++) {\n        nextResult.push(result[i] + next[j])\n      }\n    }\n    result = nextResult;\n    index++;\n  }\n  return result;\n}\n\nconsole.log(letterCombinations(\"23\"))\n`.trim();\n\nconst remString = `\nconst greeting = 'Hello Marcus, welcome in 2020';\nconst withoutNumbers = greeting.replace(/[0-9]/g, '')\n console.log(withoutNumbers)\n\n\n//\nfunction removeFive(){\n  let number = 915765;\n  const target=5;\n\n  let numberStr = number.toString();\n\n  let numberArr = number.toString().split('').map(Number);\n  let index = numberArr.indexOf(target); \n \n  const res = numberStr.replace(numberStr[index], '');\n  console.log(res);\n}\n\nremoveFive();\n`.trim();\n\n\nconst removePart = `\nfunction remove(){\n  let str=1437000;\n  str=str.toString();\n  str = str.slice(0, -3);\n  console.log(str)\n}\n\nremove();\n\n\n//Remove a particular digit from numbers;\nfunction addNum(){\n  let number = 789051234;\n  const target=5;\n  let indexNum = [];\n  var result=[];\n\n  let arr = number.toString().split(\"\");\n  for(let i=0; i<arr.length; i++){\n    if(arr[i]==target){\n      indexNum.push(i)\n    }\n  }\n\n  splitArr = arr.splice(0, indexNum)\n  splitArr2 = arr.splice(1, arr.length)\n\n  result = splitArr + ','+ splitArr2;\n  // result = parseInt(splitArr.join(splitArr2))                                       //sum\n\n  console.log(result)\n}\n\naddNum();\n`.trim();\n\n\nclass DSLogic4 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Print num without loop.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={forNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n            <h3>2. Factorial</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={factorial}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Prime</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prime}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Add Digits.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={addDigits}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Remove number from number.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={remString}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Remove last 3 characters of string or number in javascript.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removePart}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>7. Given a function magicNumber() that returns a random integer 1 or 0, write a new function that will generate a random number that uses this magicNumber() function.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={magicNumber}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>8. Discuss possible ways to write a function isInteger(x) that determines if x is an integer.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={possible}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Common Divisor</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={common_divisor}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Reverse Integer.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reverse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n\n              <h3>11. Multiply Strings</h3>\n              <b>Input: </b>num1 = \"2\", num2 = \"3\" <br/>\n              <b>Output: </b>\"6\"\n              <div style={titles}>\n                <PrismCode\n                  code={addStrings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/> \n\n              <h3>12. Perfect Squares.</h3>\n              Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n              <div style={titles}>\n                <PrismCode\n                  code={numSquares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Power of Two.</h3>\n              Given an integer, write a function to determine if it is a power of two.\n              <div style={titles}>\n                <PrismCode\n                  code={isPowerOfTwo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>14. Pow(x, n).</h3>\n              <b>Input: </b>x = 2.00000, n = 10<br/>\n              <b>Output: </b>1024.00000\n              <div style={titles}>\n                <PrismCode\n                  code={myPow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Broken Calculator.</h3>\n              On a broken calculator that has a number showing on its display, we can perform two operations:\n              <br/>\n              <ul>\n                <li><b>Double: </b>Multiply the number on the display by 2, or;</li>\n                <li><b>Decrement: </b>Subtract 1 from the number on the display.</li>\n              </ul>\n              Initially, the calculator is displaying the number X.\n              <br/>\n              Return the minimum number of operations needed to display the number Y.\n              <div style={titles}>\n                <PrismCode\n                  code={brokenCalc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              \n              <h3>16. Letter Combinations of a Phone Number.</h3>\n              Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\n              <br/><br/>\n            A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.<br/><br/>\n            <b>Example: </b>\n\n            <b>Input: </b>\"23\"<br/>\n            <b>Output: </b>[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n              <div style={titles}>\n                <PrismCode\n                  code={letterCombinations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Ugly Number.</h3>\n              Write a program to check whether a given number is an ugly number.\n              <br/>\n              Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\n              <div style={titles}>\n                <PrismCode\n                  code={isUgly}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. Sum of Two Integers.</h3>\n              Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\n              <div style={titles}>\n                <PrismCode\n                  code={getSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n             </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic4));\n"],"sourceRoot":""}