{"version":3,"sources":["components/ReactJs/prismCode.js","components/nodeJs/sidebar.js","components/nodeJs/nodeDeep/codes.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","UDP_server","assert","http","https","HTTPWithoutLibrary","nets","URL","sendEmail","crypto","decrypo","encrde","encrypt","dns","net","os","path","NodeJsCodes","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/212.8e43354a.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introNodejs' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/ejsNode' className={classes.line}>Basics</Link></MenuItem>\n        <MenuItem><Link to='/buffers' className={classes.line}>Buffer</Link></MenuItem>\n        <MenuItem><Link to='/childs' className={classes.line}>Child Process-fork()-exec()</Link></MenuItem>\n        <MenuItem><Link to='/tut_1' className={classes.line}>Callback</Link></MenuItem>\n        <MenuItem><Link to='/filSystems' className={classes.line}>File System</Link></MenuItem>\n        <MenuItem><Link to='/evtNode' className={classes.line}>EvtEmter-Capture data</Link></MenuItem>\n        <MenuItem><Link to='/codes' className={classes.line}>Codes</Link></MenuItem>\n        <MenuItem><Link to='/url_shortener' className={classes.line}>Url_Shortener</Link></MenuItem>\n        <MenuItem><Link to='/stripe_payment' className={classes.line}>stripe_payment</Link></MenuItem>\n        <MenuItem><Link to='/sendEmail' className={classes.line}>sendEmail</Link></MenuItem>\n        <MenuItem><Link to='/search_pagination' className={classes.line}>search_pagination</Link></MenuItem>\n        <MenuItem><Link to='/push_notifications' className={classes.line}>push_notifications</Link></MenuItem>\n        <MenuItem><Link to='/nodetext' className={classes.line}>nodetext</Link></MenuItem>\n        <MenuItem><Link to='/file_upload' className={classes.line}>file_upload</Link></MenuItem>\n        <MenuItem><Link to='/e_acco_veri' className={classes.line}>email_acco_veri</Link></MenuItem>\n        <MenuItem><Link to='/2fa_speakearst' className={classes.line}>2fa_speakearst</Link></MenuItem>\n        <MenuItem><Link to='/authentications' className={classes.line}>SignUp</Link></MenuItem>\n        <MenuItem><Link to='/serverSide' className={classes.line}>Server Side</Link></MenuItem>\n        <MenuItem><Link to='/tut_2' className={classes.line}>Geocode-Upload</Link></MenuItem>\n        <MenuItem><Link to='/tut_6' className={classes.line}>Chat</Link></MenuItem>\n        <MenuItem><Link to='/udemy' className={classes.line}>Udemy</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst UDP_server = `\nvar dgram = require('dgram');\nvar client = dgram.createSocket(\"udp4\");\nvar server = dgram.createSocket(\"udp4\");\nvar message = process.argv[2] || \"message\";\nmessage = new Buffer(message);\nserver.on(\"message\", function(msg) {\n    process.stdout.write(\"Got message: \" + msg + \"\\n\");\n    process.exit();\n}).bind(41234);\n\nclient.send(message, 0, message.length, 41234, \"localhost\");\n`.trim();\n\nconst assert = `var assert = require('assert');\n    assert(5 > 7);\n`.trim()\n\nconst http = `var http = require('http');\nhttp.createServer(function (req, res) {\n res.writeHead(200, { 'Content-Type': 'text/html' });\n   //res.write('write name in url to see o/p');\n     res.write(req.url);\n     res.end();\n}).listen(4000);\n`.trim()\n\nconst https = `var https = require('https');\nhttps.createServer(function (req, res) {\n     res.writeHead(200, {'Content-Type': 'text/plain'});\n     res.write('Hello World!');\n     res.end();\n}).listen(8080);\n`.trim()\n\nconst HTTPWithoutLibrary = `const https = require('https')\nconst url = 'https://api.darksky.net/forecast/9d1465c6f3bb7a6c71944bdd8548d026\n/40,-75'\nconst request = https.request(url, (response) => {\n let data = ''\n   response.on('data', (chunk) => {\n   data = data + chunk.toString()\n })\n \n response.on('end', () => {\n   const body = JSON.parse(data) \n   console.log(body) \n  })\n})\n\nrequest.on('error', (error) => {\n   console.log('An error', error)\n})\nrequest.end()\n`.trim()\n\nconst nets = `var net = require('net');\n`.trim()\n\nconst URL = `var url = require('url');\nvar adr = 'http://localhost:8080/default.htm?year=2017&month=february';\nvar q = url.parse(adr, true);\n  console.log(q.host);\n  console.log(q.pathname);\n  console.log(q.search);\n  \nvar qdata = q.query;\n  console.log(qdata.month);\n`.trim()\n\nconst sendEmail = `var nodemailer = require('nodemailer');\nvar transporter = nodemailer.createTransport({\n   service: 'gmail',\n     auth: {\n     user: 'youremail@gmail.com',\n     pass: 'yourpassword'\n     }\n});\n\nvar mailOptions = {\n     from: 'youremail@gmail.com',\n     to: 'myfriend@yahoo.com',\n     subject: 'Sending Email using Node.js',\n     text: 'That was easy!'\n    };\n    \ntransporter.sendMail(mailOptions, function(error, info){\n if (error) {\n   console.log(error);\n   } \n   else {\n   console.log('Email sent: ' + info.response);\n }\n});\n`.trim()\n\nconst crypto = `\nconst crypto = require(\"crypto\");\n\n//.createHash('sha1')md5,sha1\n\nconst hash = crypto.createHash(\"sha256\").update(\"password\").digest(\"hex\");\nconsole.log(hash);`.trim();\n\nconst decrypo = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst decipher = crypto.createDecipher(algorithm, key);\n\nlet decrypted = \"\";\ndecipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = decipher.read())) {\n    encrypted += chunk.toString(\"utf8\");\n  }\n});\n\ndecipher.on(\"end\", () => console.log(decrypted));\n\nconst encrypted = \"\";\ndecipher.write(encrypted, \"hex\");\ndecipher.end();`.trim();\n\nconst encrde = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-256-cbc\";\nconst key = crypto.randomBytes(32);\nconst iv = crypto.randomBytes(16);\n\nfunction encrypt(text) {\n  let cipher = crypto.createCipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let encrypted = cipher.update(text);\n  \n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return { iv: iv.toString(\"hex\"), encryptedData: encrypted.toString(\"hex\") };\n}\n\nfunction decrypt(text) {\n  let iv = Buffer.from(text.iv, \"hex\");\n  let encryptedText = Buffer.from(text.encryptedData, \"hex\");\n  let decipher = crypto.createDecipheriv(\"aes-256-cbc\", Buffer.from(key), iv);\n  let decrypted = decipher.update(encryptedText);\n  \n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n}\nvar hw = encrypt(\"Some serious stuff\");\nconsole.log(hw);\nconsole.log(decrypt(hw));`.trim();\n\nconst encrypt = `\nconst crypto = require(\"crypto\");\n\nconst algorithm = \"aes-192-cbc\";\nconst password = \"password used to generate key\";\nconst key = crypto.scryptSync(password, \"salt\", 24);\nconst cipher = crypto.createCipher(algorithm, key);\n\nlet encrypted = \"\";\ncipher.on(\"readable\", () => {\n  let chunk;\n  while (null !== (chunk = cipher.read())) {\n    encrypted += chunk.toString(\"hex\");\n  }\n});\n\ncipher.on(\"end\", () => console.log(encrypted));\n\ncipher.write(\"some clear text data\");\n\ncipher.end();`.trim();\n\nconst dns = `\nconst dns = require(\"dns\");\n\ndns.lookup(\"edurights.herokuapp.com\", (err, value) => {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  console.log(value);\n});`.trim();\n\nconst net = `\nconst net = require(\"net\");\n\nconst server = net.createServer();\n\nserver.listen({\n  host: \"localhost\",\n  port: 5000,\n});\n\nserver.on(\"connection\", (client) => {\n  console.log(\"Client connected\");\n});\n\n\n//\n//run in another cli\n\nconst net = require(\"net\");\nconst client = net.createConnection({\n  port: 5000,\n});\n`.trim();\n\nconst os = `\nconst os = require(\"os\");\n\nconsole.log(os.arch());\n\nconsole.log(os.cpus());\n\nconsole.log(os.freemem());\n\nconsole.log(os.getPriority(13512));\n\nconsole.log(os.homedir());\n\nconsole.log(os.hostname());\n\nconsole.log(os.networkInterfaces());\n\nconsole.log(os.platform());\n\nconsole.log(os.totalmem());\n\nconsole.log(os.userInfo());`.trim();\n\nconst path = `\nconst path = require(\"path\");\n\nconst pathObj = path.parse(__filename);\nconst pathDit = path.dirname(\"/path/path.js\");\nconst pathBasename = path.basename(\"/path/path.js\");\nconst pathExtname = path.extname(\"/path/path.js\");\nconst pathNormalize = path.normalize(\"/path/path.js\");\nconst pathJoin = path.join(\"path\", \"os\", \"...\", \"output.txt\");\n\nconsole.log(pathJoin);\n`.trim();\n\n\nclass NodeJsCodes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. UDP Server</h3>\n              Let's create a simple program that allows the user to send data between two  UDP servers:\n              <br />\n              <br />\n              node udp.js \"my message\" <br />\n              Which will result in the following output:<br />\n              Got message: my message\n              <div style={titles}>\n                <PrismCode\n                  code={UDP_server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Crypto</h3>\n              crypto module to perform cryptographic operations on data. <br />\n              can do cryptographic operations on strings, buffer, and streams.\n              <div style={titles}>\n                <PrismCode\n                  code={crypto}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Decrypo</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decrypo}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Encrypt</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={encrypt}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Encrypt-Decrypt</b>\n              <div style={titles}>\n                <PrismCode\n                  code={encrde}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. DNS</h3>\n              DNS module use to find out information about domain names and IP addresses.<br />\n              reverse function to find any reverse DNS records that are configured for IP addresses.\n              <div style={titles}>\n                <PrismCode\n                  code={dns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Net</h3>\n              how to make a server / client pair of programs using the low level Net module and also how to create a simple web\n              server using the NodeJS HTTP module.\n              <div style={titles}>\n                <PrismCode\n                  code={net}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. OS</h3>\n              The os module provides API for getting information about hardware related like CPU, memory, directories, IP address\n              and many more.\n              <br />\n              <ul>\n                <li><b>os.arch(): </b>Return the architecture of the processor.</li>\n                <li><b>os.cpus(): </b>Returns an array of the object which contains information of logical CPUs.</li>\n                <li><b>os.freemem(): </b>Returns free main memory bytes in integer.</li>\n                <li><b>os.getPriority(pid): </b>Returns the scheduling priority of the process.</li>\n                <li><b>os.homedir(): </b>Method current user’s home directory as a string.</li>\n                <li><b>os.hostname(): </b>Returns the hostname of the operating system.</li>\n                <li><b>os.networkInterfaces():: </b>Method returns objects containing information about network interfacing devices.</li>\n                <li><b>os.platform(): </b>Return information about platform.</li>\n                <li><b>os.totalmem(): </b>Returns total system memory in bytes as a string.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={os}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Path</h3>\n              The path module provides a way to work with files and directory path.\n              <br />\n              <ul>\n                <li><b>path.dirname(): </b>This method allows you to get the directory name of a given path. It does not return the last part of the given path.</li>\n                <li><b>path.basename(): </b>Method returns the last part of a given path.</li>\n                <li><b>path.extname(): </b>Method returns the extension of the path from the last part of the path.</li>\n                <ul>\n                  <li>If there is no . (period) in the last portion of the path, then an empty string is returned.</li>\n                </ul>\n                <br />\n                <li><b>path.normalize(): </b>Method normalize the given path, by resolving ‘..’, ‘.’ etc.</li>\n                <ul>\n                  <li>If multiple slashes are found they are replaced by a single slash.</li>\n                </ul>\n                <li><b>path.join(): </b>Joins all the given path segments together. All the arguments must be string.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={path}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Node.js HTTP Module</b>\n              <br />\n              <p>A set of functions you want to include in your application.</p>\n              <br />\n              <ul>\n                <li>Node.js has a set of built-in modules which you can use without any further installation.</li>\n                <br />\n\n                <li>\n                  assert - Provides a set of assertion tests The assert module provides a way of testing expressions. If\n                  the expression evaluates to 0, or false, an assertion failure is being caused, and the program is\n                  terminated.\n                </li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={assert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <b>o/p: </b>AssertionError: false == true\n              <br />\n              <br />\n              <b>Method -</b>\n              <br />\n              <ul>\n                <li>assert() - Checks if a value is true. Same as assert.ok()</li>\n                <li>deepEqual() - Checks if two values are equal</li>\n                <li>deepStrictEqual() - Checks if two values are equal, using the strict equal operator (===)</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>http - To make Node.js act as an HTTP server</b>\n              <br />\n              The HTTP module provides a way of making Node.js transfer data over HTTP\n              <div style={titles}>\n                <PrismCode\n                  code={http}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>https - To make Node.js act as an HTTPS server.</b>\n              <br />\n              The HTTPS module provides a way of making Node.js transfer data over HTTP TLS/SSL protocol,\n              which is the secure HTTP protocol.\n              <div style={titles}>\n                <PrismCode\n                  code={https}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li>createServer() -Creates an HTTPS server</li>\n                <li>get() - Sets the method to GET, and returns an object containing the users request</li>\n                <li>globalAgent - Returns the HTTPS Agent</li>\n                <li>request - Makes a request to a secure web server</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>HTTP Requests Without a Library</b>\n              <div style={titles}>\n                <PrismCode\n                  code={HTTPWithoutLibrary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>net - To create servers and clients</b>\n              <div style={titles}>\n                <PrismCode\n                  code={nets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <ul>\n                <li>connect() - Creates a new connection to the server, and returns a new Socket</li>\n                <li>createConnection() - Creates a new connection to the server, and returns a new Socket</li>\n                <li>createServer() -Creates a new server</li>\n                <li>isIP - Checks if the specified value is an IP address</li>\n                <li>isIPv4 - Checks if the specified value is an IPv4 address</li>\n                <li>isIPv6 - Checks if the specified value is an IPv6 address</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>HTTP Requests Without a Library</b>\n              <div style={titles}>\n                <PrismCode\n                  code={HTTPWithoutLibrary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Node.js URL Module</b>\n              <br />\n              The URL module splits up a web address into readable parts.\n              Parse an address with the url.parse() method, and it will return a URL object with each part of the\n              address as properties:\n              <div style={titles}>\n                <PrismCode\n                  code={URL}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              o/p - localhost:8080\n              /default\n              <br />\n              ?year=2017&month=february\n              <br />\n              february\n              <br />\n              <br />\n\n              <b>Node.js Send an Email</b>\n              <br />\n              The Nodemailer Module\n              The Nodemailer module makes it easy to send emails from your computer.\n              <br />\n              <i>Send an Email</i>\n              <br />\n              Use the username and password from your selected email provider to send an email. This tutorial wi\n              ll show you how to use\n              your Gmail account to send an email:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={sendEmail}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(NodeJsCodes));\n"],"sourceRoot":""}