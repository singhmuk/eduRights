{"version":3,"sources":["components/ReactJs/prismCode.js","components/angularjs/sidebar.js","assets/AI/nn.png","components/angularjs/deepAngularjs/gradientNeural.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","childsFile","keras","weights","prediction","descent","implementse","GradientNeural","setTimeout","highlightAll","container","item","xs","style","src","Gradients","alt","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/47.2d192c24.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAngular' className={classes.line}>AI</Link></MenuItem>\n        <MenuItem><Link to='/tensorflow' className={classes.line}>Tensorflow</Link></MenuItem>\n        <MenuItem><Link to='/tensors' className={classes.line}>Tensorboards</Link></MenuItem>\n        <MenuItem><Link to='/angCompiler' className={classes.line}>Compiler</Link></MenuItem>\n        <MenuItem><Link to='/neural' className={classes.line}>NeuralKeras</Link></MenuItem>\n        <MenuItem><Link to='/activationFunctions' className={classes.line}>activationFuncs</Link></MenuItem>\n        <MenuItem><Link to='/loss' className={classes.line}>Loss</Link></MenuItem>\n        <MenuItem><Link to='/gradientNeural' className={classes.line}>GradientNeural</Link></MenuItem>\n        <MenuItem><Link to='/stochastic' className={classes.line}>Stochastic</Link></MenuItem>\n        <MenuItem><Link to='/benchmarking' className={classes.line}>Benchmarking</Link></MenuItem>\n        <MenuItem><Link to='/customer' className={classes.line}>Customer</Link></MenuItem>\n        <MenuItem><Link to='/regularizationDeep' className={classes.line}>Regularization Deep</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced' className={classes.line}>Imbalanced</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced2' className={classes.line}>Imbalanced2</Link></MenuItem>\n        <MenuItem><Link to='/convolutionals' className={classes.line}>Convolutionals</Link></MenuItem>\n        <MenuItem><Link to='/data_augmentation' className={classes.line}>data Augmentation</Link></MenuItem>\n        <MenuItem><Link to='/transfer' className={classes.line}>Transfer</Link></MenuItem>\n        <MenuItem><Link to='/word_embedding' className={classes.line}>Embedding</Link></MenuItem>\n        <MenuItem><Link to='/datatypests' className={classes.line}>Datatypes</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_2' className={classes.line}>TS Function</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_4' className={classes.line}>Type Assertion</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/nn.73ebaea6.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Gradients from '../../../assets/AI/nn.png'\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\ndf = pd.read_csv(\"insurance_data.csv\")\n\nX_train, X_test, y_train, y_test = train_test_split(df[['age','affordibility']],df.bought_insurance,test_size=0.2, \n    random_state=25)\n\n\n#Preprocessing: Scale the data so both age and affordibility are in same scaling range.\nX_train_scaled = X_train.copy()\nX_train_scaled['age'] = X_train_scaled['age'] / 100\n\nX_test_scaled = X_test.copy()\nX_test_scaled['age'] = X_test_scaled['age'] / 100\n`.trim();\n\nconst keras = `\nmodel = keras.Sequential([\n  keras.layers.Dense(1, input_shape=(2,), activation='sigmoid', kernel_initializer='ones', bias_initializer='zeros')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train_scaled, y_train, epochs=5000)\n\nmodel.evaluate(X_test_scaled,y_test)                                            #Evaluate the model on test set.\nmodel.predict(X_test_scaled)\n\ny_test\n`.trim();\n\nconst weights = `\nimport math\n\ncoef, intercept = model.get_weights()\n\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\nsigmoid(18)\n\nX_test\n`.trim();\n\nconst prediction = `\ndef prediction_function(age, affordibility):\n    weighted_sum = coef[0]*age + coef[1]*affordibility + intercept\n    return sigmoid(weighted_sum)\n\nprediction_function(.47, 1)\nprediction_function(.18, 1)\n`.trim();\n\nconst descent = `\ndef sigmoid_numpy(X):\n   return 1/(1+np.exp(-X))\n\nsigmoid_numpy(np.array([12,0,1]))\n\ndef log_loss(y_true, y_predicted):\n    epsilon = 1e-15\n    y_predicted_new = [max(i,epsilon) for i in y_predicted]\n    y_predicted_new = [min(i,1-epsilon) for i in y_predicted_new]\n    y_predicted_new = np.array(y_predicted_new)\n    return -np.mean(y_true*np.log(y_predicted_new)+(1-y_true)*np.log(1-y_predicted_new))\n`.trim();\n\nconst implementse = `\ndef gradient_descent(age, affordability, y_true, epochs, loss_thresold):\n    w1 = w2 = 1\n    bias = 0\n    rate = 0.5\n    n = len(age)\n    for i in range(epochs):\n        weighted_sum = w1 * age + w2 * affordability + bias\n        y_predicted = sigmoid_numpy(weighted_sum)\n        loss = log_loss(y_true, y_predicted)\n\n        w1d = (1/n)*np.dot(np.transpose(age),(y_predicted-y_true)) \n        w2d = (1/n)*np.dot(np.transpose(affordability),(y_predicted-y_true)) \n\n        bias_d = np.mean(y_predicted-y_true)\n        w1 = w1 - rate * w1d\n        w2 = w2 - rate * w2d\n        bias = bias - rate * bias_d\n\n        print (f'Epoch:{i}, w1:{w1}, w2:{w2}, bias:{bias}, loss:{loss}')\n\n        if loss<=loss_thresold:\n            break\n\n    return w1, w2, bias\n    \ngradient_descent(X_train_scaled['age'],X_train_scaled['affordibility'],y_train,1000, 0.4631)\n\ncoef, intercept\n`.trim();\n\n\nclass GradientNeural extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Implement Gradient Descent For Neural Network (or Logistic Regression)</h3>\n              An optimization algorithm used to train machine learning models by minimizing errors between predicted and actual results.\n              <br />\n              <br />\n\n              <b>Predicting if a person would buy life insurnace based on his age using logistic regression</b>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Model Building: First build a model in keras/tensorflow and see what weights and bias values it\n                comes up with. We will than try to reproduce same weights and bias in our plain python implementation\n                of gradient descent. Below is the architecture of our simple neural network</b>\n              <br />\n              <br />\n              <img src={Gradients} alt=\"Theata\" className=\"responsive2\" style={redesign} />\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={keras}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Now get the value of weights and bias from the model</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={weights}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Instead of model.predict, write our own prediction function that uses w1,w2 and bias.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={prediction}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Now we start implementing gradient descent in plain python. Again the goal is to come up with same w1, w2 and bias that keras model calculated. We want to show how keras/tensorflow would have computed these values internally using gradient descent</b>\n              <br />\n              <br />\n              <i>First write couple of helper routines such as sigmoid and log_loss.</i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={descent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>All right now comes the time to implement our final gradient descent function</b>\n              <div style={titles}>\n                <PrismCode\n                  code={implementse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>This shows that in the end we were able to come up with same value of w1,w2 and bias using a plain python implementation of gradient descent function.</i>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(GradientNeural));\n"],"sourceRoot":""}