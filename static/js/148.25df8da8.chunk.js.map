{"version":3,"sources":["components/ReactJs/prismCode.js","components/express/sidebar.js","components/express/deepExpress/middleware.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","middleware","middleware_2","middleware_3","Mustache","encoding","encoding_2","authentication","logger","userid","params","horribleRegexp","EVIL_IP","publicPath","uploads","staticFiles","scaffold","cookies","Middleware","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/148.25df8da8.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introExpress' className={classes.line}>IntroExpress</Link></MenuItem>\n        <MenuItem><Link to='/resDocs' className={classes.line}>Responds</Link></MenuItem>\n        <MenuItem><Link to='/routerDocs' className={classes.line}>Router</Link></MenuItem>\n\n        {/* ---------- */}\n        <MenuItem><Link to='/middleware' className={classes.line}>Middleware</Link></MenuItem>\n        <b>Loopback</b>\n        <MenuItem><Link to='/loopbackcli' className={classes.line}>Loopbackcli</Link></MenuItem>\n        <MenuItem><Link to='/jqueries' className={classes.line}>jqueries</Link></MenuItem>\n        <MenuItem><Link to='/backbonejs' className={classes.line}>Backbone</Link></MenuItem>\n        <MenuItem><Link to='/underscorejs' className={classes.line}>Underscore</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst middleware = `var app = express();\n// middleware\n  var stack = middleware();\n  \nThen you can add layers to the middleware stack by calling .use\n  app.use(express.static(..));\n  \n// middleware\n  stack.use(function(data, next) {\n   next();\n  });\n`.trim()\n\nconst middleware_2 = `var middleware = require(\"../src/middleware.js\");\nvar stack = middleware((data, next) => {\n   data.foo = data.data*2;\n   next();\n  }, \n  \n  function(data, next) {\n     setTimeout(() => {\n     data.async = true;\n     next();\n     }, 100)\n    }, \n    \n  function(data) {\n     console.log(data);\n    });\n    \n  stack.handle({\n   \"data\": 42\n  })`.trim()\n\nconst middleware_3 = `var stack = middleware((req, res, next) => {\n  users.getAll((err, users) => {\n    if (err) next(err);\n    req.users = users;\n    next();\n    });\n }, \n \n function(req, res, next) {\n    posts.getAll((err, posts) => {\n      if (err) next(err);\n        req.posts = posts;\n        next();\n    })\n }, \n \n function(req, res, next) {\n        req.posts.forEach((post) => {\n        post.user = req.users[post.userId];\n      });\n        res.render(\"blog/posts\", {\n        \"posts\": req.posts\n        });\n   });\n   \n   var app = express.createServer();\n   app.get(\"/posts\", function(req, res) {\n   stack.handle(req, res);\n });\n \n \n // express\n var app = express.createServer();\n app.get(\"/posts\", [\n    function(req, res, next) {\n      users.getAll(function(err, users) {\n        if (err) next(err);\n        req.users = users;\n        next();\n  });\n}, \n\nfunction(req, res, next) {\n  posts.getAll((err, posts) => {\n      if (err) next(err);\n      req.posts = posts;\n      next();\n    })\n  }, \n  \n  function(req, res, next) {\n      req.posts.forEach((post) => {\n      post.user = req.users[post.userId];\n    });\n      res.render(\"blog/posts\", {\n      \"posts\": req.posts\n    });\n  }\n ], \n \n function(req, res) {\n     stack.handle(req, res);\n });`.trim()\n\nconst Mustache = `var Mustache = require(\"mustache\");\nvar result = Mustache.render(\"Hi, {{first}} {{last}}!\", {\n   first: \"Nicolas\",\n   last: \"Cage\" });\n  console.log(result);\n`.trim()\n\nconst encoding = `var fs = require(\"fs\");\nvar options = { encoding: \"utf-8\" };\n fs.readFile(\"myfile.txt\", options, function(err, data) {\n   if (err) {\n     console.error(\"Error reading file!\");\n     return;\n   }\n     console.log(data.match(/x/gi).length + \" letter X's\");\n });\n \nvar fs = require(\"fs\");\nvra options = { encoding: \"utf-8\" };\nfs.readFile(\"myfile.txt\", options, function(err, data) { // ...});\nconsole.log(\"Hello world!\");`.trim()\n\nconst encoding_2 = `var express = require(\"express\");\nvar http = require(\"http\");\nvar app = express();\n\napp.use((request, response, next) => {\n   console.log(\"In comes a \" + request.method + \" to \" + request.url);\n   next();});\n   \n   app.use((request, response) => {\n     response.writeHead(200, { \"Content-Type\": \"text/plain\" });\n     response.end(\"Hello, world!\");\n   });\n   \nhttp.createServer(app).listen(3000);`.trim()\n\nconst authentication = `app.use((request, response, next) => {\n  console.log(\"In comes a \" + request.method + \" to \" + request.url);\n  next();});\n  \n app.use((request, response, next) => {\n    var minute = (new Date()).getMinutes();\n        if ((minute % 2) === 0) {\n        next();\n      } \n        else {\n        response.statusCode = 403;\n        response.end(\"Not authorized.\");\n    }});\n    \n    app.use((request, response) => {\n    response.end('Secret info: the password is \"swordfish\"!');\n  });`.trim()\n\nconst logger = `\nvar express = require(\"express\");\nvar logger = require(\"morgan\");\nvar http = require(\"http\");\nvar app = express();\napp.use(logger(\"short\"));\n\napp.use((request, response) => {\n    response.writeHead(200, { \"Content-Type\": \"text/plain\" });\n    response.end(\"Hello, world!\");\n  });\n  \nhttp.createServer(app).listen(3000);\n\n\nEXPRESS S STATIC MIDDLEWARE\nvar express = require(\"express\");\nvar path = require(\"path\");\nvar http = require(\"http\");\nvar app = express();\nvar publicPath = path.resolve(__dirname, \"public\");\n\napp.use(express.static(publicPath));\n\napp.use((request, response) => {\n     response.writeHead(200, { \"Content-Type\": \"text/plain\" });\n     response.end(\"Looks like you didn't find a static file.\");\n  });\n  \nhttp.createServer(app).listen(3000);`.trim()\n\nconst userid = `value, you’ll look inside the params property of the request.\n  app.get(\"/users/:userid\", function(req, res) {\n  var userId = parseInt(req.params.userid, 10);\n   // ...\n   });`.trim()\n\nconst params = `app.get(/^\\/users\\/(\\d+)$/, function(req, res) {\n  var userId = parseInt(req.params[0], 10);\n  // ...\n  });\n `.trim()\n\nconst horribleRegexp = `var horribleRegexp = /^([0-9a-f]{8}-[0-9a-f]{4}-➥ 4[0-9a-f]{3}-[89ab][0-9af]{3}-[0-9a-f]{12})$/i;\n    app.get(horribleRegexp, function(req, res) {\n     var uuid = req.params[0];\n     // ...\n});\n`.trim()\n\nconst EVIL_IP = `var express = require(\"express\");\nvar app = express();\nvar EVIL_IP = \"123.45.67.89\";\n\napp.use((request, response, next) => {\n     if (request.ip === EVIL_IP) {\n     response.status(401).send(\"Not allowed!\");\n   } \n   else {\n     next();\n }});\n \n // ... the rest of your app ...\n`.trim()\n\nconst publicPath = `var publicPath = path.resolve(__dirname, \"public\");\nvar userUploadsPath = path.resolve(__dirname, \"user_uploads\");\napp.use(express.static(publicPath));\napp.use(express.static(userUploadsPath));\n`.trim()\n\nconst uploads = `app.use(\"/public\", express.static(publicPath));\napp.use(\"/uploads\", express.static(userUploadsPath));`.trim()\n\nconst staticFiles = `var express = require(\"express\");\nvar path = require(\"path\");\nvar http = require(\"http\");\nvar app = express();\n\n//Sets up the public path, using Node’s path module\nvar publicPath = path.resolve(__dirname, \"public\");\n\n//Sends static files from the publicPath directory\napp.use(express.static(publicPath));\n\napp.use((request, response) => {\n     response.writeHead(200, { \"Content-Type\": \"text/plain\" });\n     response.end(\"Looks like you didn't find a static file.\");\n   });\n   \nhttp.createServer(app).listen(4000);\n`.trim()\n\nconst scaffold = `var express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n   res.send('Welcome to JavaTpoint!');\n});\n\napp.listen(8000, function () {\n   console.log('Example app listening on port 8000!');\n}); `.trim()\n\nconst cookies = `\nvar express = require('express');\nvar cookieParser = require('cookie-parser');\nvar app = express();\n\napp.use(cookieParser());\napp.get('/cookieset', (req, res) => {\n   res.cookie('cookie_name', 'cookie_value');\n   res.cookie('company', 'javatpoint');\n   res.cookie('name', 'sonoo');\n   res.status(200).send('Cookie is set');\n});\n\napp.get('/cookieget', (req, res) => {\n   res.status(200).send(req.cookies);\n});\n\napp.get('/', (req, res) => {\n   res.status(200).send('Welcome to JavaTpoint!');\n});\n\n var server = app.listen(8000, () => {\n var host = server.address().address;\n var port = server.address().port;\n console.log('Example app listening at http://%s:%s', host, port);\n});`.trim()\n\n\nclass Middleware extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>How Middleware works? Where Middleware fits in API?</h3>\n              <p>Middleware allows you to define a stack of actions that you should flow through. Express servers themselves\n                are a stack of middlewares.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={middleware}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>A layer in the middleware stack is a function, which takes n parameters (req & res) and a next\n                function.\n                Middleware expects the layer to do some computation, augment the parameters and then call next.\n                A stack doesn't do anything unless you handle it. Express will handle the stack every time an\n                incoming HTTP request is caught on the server. With middleware you handle the stack manually.\n                // express, you need to do nothing middleware\n                stack.handle(someData);</i>\n              <br />\n              <br />\n              <h3>more complex example :</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={middleware_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>In express terms you just define a stack of operations you want express to handle for every incoming\n                HTTP request.\n                In terms of express (rather than connect) you have global middleware and route specific\n                middleware. This means you can attach a middleware stack to every incoming HTTP requests or only\n                attach it to HTTP requests that interact with a certain route.\n              </i>\n              <br />\n              <br />\n              <h3>Advanced examples of express & middleware </h3>\n              <div style={titles}>\n                <PrismCode\n                  code={middleware_3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>What Express is used for</h3>\n              Express could be used to build any web application. It can process incoming requests and respond to\n              them\n              @ Middleware which is a way to break your app into smaller bits of behavior.Generally,\n              middleware is called one by one, in a sequence.\n              @Routing similarly breaks your app up into smaller functions that are executed when the\n              user visits a particular resource.\n              @Routers can further break up large applications into smaller, composable sub applications.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Mustache}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>The two most common external resources you’ll deal with in Express are</h3>\n               1.Anything involving the filesystem—Like reading and writing files from your harddrive<br />\n               2.Anything involving a network—Like receiving requests, sending responses, or sending\n              your own requests over the internet.\n              <div style={titles}>\n                <PrismCode\n                  code={encoding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>middleware</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={encoding_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>middleware can also change the request or response objects\n                Adding fake authentication middleware</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={authentication}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <h3>Third-party middleware libraries\n                MORGAN LOGGING MIDDLEWARE</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={logger}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Routing</h3>\n              Routing is a mapping of an HTTP verb (like GET or POST) and a URI (like/users/123).\n              Routing is a way to map requests to specific handlers depending on their URL and HTTP verb.\n              Simple and pattern-matching routing Using middleware with routing Serving static files with\n              express.static, Express’s built-in static file middleware Using Express with Node’s built-in HTTPS\n              module.\n              One of Express’s big features, allowing you to map different requests to different request handler.\n              The features of routing The simplest way to grab a parameter is by putting it in your route with\n              a colon infront of it. To grab the\n              <div style={titles}>\n                <PrismCode\n                  code={userid}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <p>Using regular expressions to match routes. This gives you more control over the routes you specify.\n                You can also use regular expressions to match parameters.\n                Let’s imagine that you want to match things like /users/123 or /users/456 but not/users/olivia. You\n                can code this into a regular expression and grab the number toboot.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={params}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>This is one way to enforce the “the user ID must be an integer” constraint. it’s passed in as\n                a string, so you have to convert it to a number.</i>\n              <h3>@UUID-matching routes with a regexp</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={horribleRegexp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Extending request and response</i>\n              Express augments the request and response objects that you’re passed in every request\n              handler.\n              One nicety Express offers is the redirect method.\n              <h3> Using redirect:</h3>\n              response.redirect(\"/hello/world\");\n              response.redirect(\"http://expressjs.com\");\n              <h3>sendFile</h3>\n              response.sendFile(\"/path/to/cool_song.mp3\");\n              <h3>Let’s use some of these things to build middleware that blocks an evil IP address.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={EVIL_IP}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Mounting static file middleware</h3>\n              var photoPath = path.resolve(__dirname, \"offensive-photos-folder\");\n              app.use(\"/offensive\", express.static(photoPath));\n              <h3>ROUTING WITH MULTIPLE STATIC FILE DIRECTORIES</h3>\n              I frequently find myself with static files in multiple directories. For example, I sometimes have static\n              files in a folder called public and another in a folder called user_uploads.How can you do this\n              with Express?\n              Express solves this problem with the built-in middleware feature, and becaus eexpress.static is\n              middleware, you can just apply it multiple times.\n              <div style={titles}>\n                <PrismCode\n                  code={publicPath}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>.Now, let’s imagine four scenarios and see how this code deals with them</h3>\n              1.The user requests a resource that isn’t in the public folder or the user_uploads folder. Both static\n              middleware functions will continue on to the next routes and middleware.<br />\n              2.The user requests a resource that’s in the public folder. The first middleware will send the file and\n              no following routes or middleware functions will be called.<br />\n              3.The user requests a resource that’s in the user_uploads folder but not the public folder.The\n              first\n              middleware will continue on (it’s not in public), so the second middle-ware will pick it up. After that,\n              no other\n              middleware or route will be called.<br />\n              4.The user requests a resource that’s in both the public folder and the user_uploads folder.Because\n              the\n              public-serving middleware is first, users will get the file in public and users will never be able to\n              reach\n              the matching file in the user_uploads folder.\n              <h3>Serving static files from multiple directories without conflict</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={uploads}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>static Files</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={staticFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <h3>Scaffold</h3>\n              npm install express-scaffold\n              After this step, execute the following command to install express generator:\n              npm install -g express-generator\n              Now, you can use express to scaffold a web-app.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={scaffold}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Open Node.js command prompt, go to myapp and run npm init command\n                Fill the entries and press enter.\n                It will create a package.json file in myapp folder and the data is shown in JSON format.</i>\n              <br />\n              <br />\n\n              <b>Cookies</b>\n              <div style={titles}>\n                <PrismCode\n                  code={cookies}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Middleware));\n"],"sourceRoot":""}