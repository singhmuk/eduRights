{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/exceptionsPy.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","exceptions","statement","cleanup","handlers","nzec","names","copy","shallow","deepcopy","assignments","objectspecific","nested","copydeepcopy","deepcustom","ExceptionsPy","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/234.b23ff588.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst exceptions = `\ntry:                                                           \n    a = 5 / 0\nexcept:\n    print('some error occured.')\n    \n\n#2\ntry:                                                           \n    a = 5 / 0\nexcept Exception as e:\n    print(e)\n    \n\n#3\ntry:\n    a = 5 / 0\nexcept ZeroDivisionError:\n    print('Only a ZeroDivisionError is handled here')\n    \n\n#4\ntry:                                  \n    a = 5 / 1 \n    b = a + '10'\nexcept ZeroDivisionError as e:\n    print('A ZeroDivisionError occured:', e)\nexcept TypeError as e:\n    print('A TypeError occured:', e)\n`.trim();\n\nconst statement = `\ntry:\n    a = 5 / 1\nexcept ZeroDivisionError as e:\n    print('A ZeroDivisionError occured:', e)\nelse:\n    print('Everything is ok')`.trim();\n\nconst cleanup = `\ntry:\n    a = 5 / 1 \n    b = a + '10'\nexcept ZeroDivisionError as e:\n    print('A ZeroDivisionError occured:', e)\nexcept TypeError as e:\n    print('A TypeError occured:', e)\nelse:\n    print('Everything is ok')\nfinally:\n    print('Cleaning up some stuff...')`.trim();\n\nconst handlers = `\nclass ValueTooHighError(Exception):\n    pass\n\nclass ValueTooLowError(Exception):                                                  # Add some more information for handlers\n    def __init__(self, message, value):\n        self.message = message\n        self.value = value\n\ndef test_value(a):\n    if a > 1000:\n        raise ValueTooHighError('Value is too high.')\n    if a < 5:\n        raise ValueTooLowError('Value is too low.', a)                # Note that the constructor takes 2 arguments here\n    return a\n\ntry:\n    test_value(1)\nexcept ValueTooHighError as e:\n    print(e)\nexcept ValueTooLowError as e:\n    print(e.message, 'The value is:', e.value)`.trim();\n\nconst nzec = `\nn = int(input())\nk = int(input())\nprint(n,\" \",k)\n\nn, k = raw_input().split(\" \")                                                       \nn = int(n)\nk = int(k)\nprint(n,\" \",k)`.trim();\n\nconst names = `\nprint(__name__)\n\n#2\n#cals.py\nprint(\"Hi\", __name__)\n\n#main.py\nimport cals;\nprint(__name__)\n\n\n#3\nclass A:\n    def __init__(self, a):\n        self.a2=a\n        print(\"In init\",self.a2)\n\nA(3)\n\n\n#4 Get address of the memory\nclass A:\n    pass\n\nobj=A()\nprint(id(obj))\n    `.trim();\n\nconst copy = `\nlist1=[1,2,3,4]\nlist2=list1\nlist2[1]=1000\nprint(list1)                                                                      #both have same memory location\nprint(list2)`.trim();\n\nconst shallow = `\n# shallow copy\nlist1=[1,2,3,4]\nlist2=list1.copy()\nlist2[1]=1000\nprint(list1)                                                                     #both have diffrent memory locations\nprint(list2)\n\n\n# shallow copy nested list\nlist1=[[1,2,3,4],[3,4,5,6]]\nlist2=list1.copy()\nlist2[1][0]=1000\nprint(list1)                                                                    #becase items object is copied\nprint(list2)\n    \n    \n# shallow copy nested list\nlist1=[[1,2,3,4],[3,4,5,6]]\nlist2=list1.copy()\nlist2[1][0]=1000\nlist1.append([4,5,6,7])\nprint(list1)\nprint(list2)                                                                    #becase items is not copied\n`.trim();\n\nconst deepcopy = `\nimport copy\nlist1=[1,2,3,4]\nlist2=copy.deepcopy(list1)\nlist2[1]=100\n\nprint(list1)\nprint(list2)`.trim();\n\nconst assignments = `\nlist_a = [1, 2, 3, 4, 5]\nlist_b = list_a\n\nlist_a[0] = -10\nprint(list_a)\nprint(list_b)`.trim();\n\nconst objectspecific = `\nimport copy\nlist_a = [1, 2, 3, 4, 5]\nlist_b = copy.copy(list_a)\n\nlist_b[0] = -10                                                         # not affects the other list\nprint(list_a)\nprint(list_b)`.trim();\n\nconst nested = `\nimport copy\nlist_a = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\nlist_b = copy.copy(list_a)\n\nlist_a[0][0]= -10                                                       # affects the other!\nprint(list_a)\nprint(list_b)`.trim();\n\nconst copydeepcopy = `\nimport copy\nlist_a = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\nlist_b = copy.deepcopy(list_a)\n\nlist_a[0][0]= -10                                                         # not affects the other\nprint(list_a)\nprint(list_b)`.trim();\n\nconst deepcustom = `\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n                \np1 = Person('Alex', 27)                                               # Only copies the reference\np2 = p1\np2.age = 28\nprint(p1.age)\nprint(p2.age)`.trim();\n\nclass ExceptionsPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Common built-in Exceptions</h3>\n              <ul>\n                <li><b>ImportError:</b> If a module cannot be imported</li>\n                <li><b>NameError:</b> Try to use a variable that was not defined.</li>\n                <li><b>FileNotFoundError:</b> Try to open a file that does not exist or specify the wrong path.</li>\n                <li><b>ValueError:</b> When an operation/ function receives an argument that has the right type but an inappropriate value, e.g. try to remove a value from a list that does not exist</li>\n                <li><b>TypeError:</b> Raised when an operation/ function is applied to an object of inappropriate type.</li>\n                <li><b>IndexError:</b> Try to access an invalid index of a sequence, e.g a list or a tuple.</li>\n                <li><b>KeyError:</b> ITry to access a non existing key of a dictionary.</li>\n              </ul>\n              <br />\n\n              <h3>Handling Exceptions</h3>\n              <ul>\n                <li>We can use a try and except block to catch and handle exceptions. If catch an exceptions program won't terminate,\n                  and can continue.</li>\n                <li>Can run multiple statements in a try block, and catch different possible exceptions.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={exceptions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>else clause</h3>\n              Can use an else statement that is run if no exception occured.\n              <div style={titles}>\n                <PrismCode\n                  code={statement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>finally clause</h3>\n              Can use a finally statement that always runs, no matter if there was an exception or not.\n              <br />\n              <br />\n              <b>Example used to make some cleanup operations.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={cleanup}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Define own Exceptions</h3>\n              Can define our own exception class that should be derived from the built-in Exception class.\n              <br />\n              Most exceptions are defined with names that end in 'Error'. Exception classes can be defined like any other class.\n              <div style={titles}>\n                <PrismCode\n                  code={handlers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>NZEC (non zero exit code)</h3>\n              <ul>\n                <li>NZECas the name suggests occurs when your code is failed to return 0.</li>\n                <li>Most of the online coding platforms while testing gives input separated by space and in those cases int(input()) is not able to read the input properly and shows error like NZEC.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={nzec}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Special Syntex</h3>\n              <ul>\n                <li><b>special variable :</b>__name__</li>\n                <li><b>special method :</b>__init__</li>\n                <br />\n                <b>Every time create an object it is allocated to new space.</b>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={names}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Copy</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={copy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Shallow Copy</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shallow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Deep Copy</h3>\n              deep copy, Create diffrent memory locations.\n              <br />\n              <b>in 1D, shallow copy===deep copy</b>\n              <div style={titles}>\n                <PrismCode\n                  code={deepcopy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Shallow vs deep copying</h3>\n              Assignment statements do not create real copies. It only creates a new variable with the same reference.\n              So For 'real' copies we can use the copy module. However, for compound/nested objects (e.g. nested lists or dicts) and custom objects there is an important difference between shallow and deep copying:\n              <br />\n              <br />\n              <ul>\n                <li><b>shallow copies:</b> Only one level deep. It creates a new collection object and populates it with references to the nested objects. This means modyfing a nested object in the copy deeper than one level affects the original.</li>\n                <li><b>deep copies:</b> A full independent clone. It creates a new collection object and then recursively populates it with copies of the nested objects found in the original.</li>\n              </ul>\n              <br />\n\n              <h3>Assignment operation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={assignments}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Shallow copy</h3>\n              One level deep. Modifying on level 1 does not affect the other list. Use <b>copy.copy()</b>, or object-specific copy functions/ copy constructors.\n              <div style={titles}>\n                <PrismCode\n                  code={objectspecific}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <ul>\n                <li>But with nested objects, modifying on level 2 or deeper does affect the other.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={nested}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Deep copies</h3>\n              Full independent clones. Use <b>copy.deepcopy()</b>.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={copydeepcopy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Custom objects</h3>\n              Use copy module to get shallow or deep copies of custom objects.\n              <div style={titles}>\n                <PrismCode\n                  code={deepcustom}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ExceptionsPy));\n"],"sourceRoot":""}