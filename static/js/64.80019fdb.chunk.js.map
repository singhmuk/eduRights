{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","assets/ML/oneHotEncodung.png","components/ml/deepMl/training.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","cluster","reason","regrationModal","pickle","sklearn","stack","clusters","dummyVar","sklearns","encoding","Traning","setTimeout","highlightAll","container","item","xs","style","src","Equations","alt","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/64.80019fdb.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/oneHotEncodung.f2dd5e01.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Equations from '../../../assets/ML/oneHotEncodung.png'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\n\nconst cluster = `\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndf = pd.read_csv(\"carprices.csv\")\n\nnewPlt = plt.scatter(df['Mileage'],df['Sell Price($)'])                              \nnewPlt = plt.scatter(df['Age(yrs)'],df['Sell Price($)'])\n\nX = df[['Mileage','Age(yrs)']]\nY = df['Sell Price($)']  \n\ndf.shape\ndf.head()\ndf.isna().sum() \ndf.describe()\nnewPlt\n`.trim();\n\nconst reason = `\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3) \nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=10)             #random_state argument\n \nX_train\nX_test\n`.trim();\n\nconst regrationModal = `\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)\n\nmodel.coef_\nmodel.intercept_\n\nmodel.predict(X_test)\nmodel.predict([[69000,6]])\nmodel.score(X_test, Y_test)\n`.trim();\n\nconst pickle = `\nimport pickle\n\nwith open('model_pickle','wb') as file:\n    pickle.dump(model,file)\n    \nwith open('model_pickle','rb') as file:                                                  # Load save modal.\n    mp = pickle.load(file)\n`.trim();\n\nconst sklearn = `\nfrom sklearn.externals import joblib                                                     \n\njoblib.dump(model, 'model_joblib')\n\nmj = joblib.load('model_joblib')                                                         # Load save modal.\n`.trim();\n\nconst stack = `\nimport csv\nimport numpy as np\nimport pandas as pd\n\n# Download data from https://archive.ics.uci.edu/ml/datasets/spambase\nFILE_NAME = \"spambase.data\"\n\nwith open(FILE_NAME, \"r\") as f:                                           # 1) load with csv file\n    data = list(csv.reader(f, delimiter=\",\"))\n    \ndata = np.array(data, dtype=np.float32)\ndata.shape\ndata.dtype\n\n\n# skiprows=1\ndata = np.loadtxt(FILE_NAME, delimiter=\",\", dtype=np.float32)             # 2) load with np.loadtxt()\n\n\n# skip_header=0, missing_values=\"---\", filling_values=0.0                 # 3) load with np.genfromtxt()\ndata = np.genfromtxt(FILE_NAME, delimiter=\",\", dtype=np.float32)\n\n\nn_samples, n_features = data.shape                                        # split into X and y\nn_features -= 1\n\nX = data[:, 0:n_features]\ny = data[:, n_features]\n\nX[0, 0:5]\n`.trim();\n\nconst clusters = `\nimport pandas as pd\n\ndf = pd.read_csv(\"homeprices.csv\")\n\ndummies = pd.get_dummies(df.town)                                                 # Using Pandas to create dummy varriables.\nmerged = pd.concat([df,dummies],axis='columns')\n\nfinal = merged.drop(['town'], axis='columns')\nfinal\n`.trim();\n\nconst dummyVar = `\nfinal = final.drop(['west windsor'], axis='columns')\n\nX = final.drop('price', axis='columns')\ny = final.price\n\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X,y)\nmodel.predict(X)                                                                   # 2600 sqr ft home in new jersey\n`.trim();\n\nconst sklearns = `\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\ndfle = df\nle = LabelEncoder()\ndfle.town = le.fit_transform(dfle.town)\n\nX = dfle[['town','area']].values\nY = dfle.price.values\n\n#Use OHE to create dummy variables for each of the town.\nct = ColumnTransformer([('town', OneHotEncoder(), [0])], remainder = 'passthrough')\n\nX = ct.fit_transform(X)\nX = X[:,1:]\n\nmodel.fit(X,y)\n\nmodel.predict([[0,1,3400]])\nmodel.predict([[1,0,2800]])\n`.trim();\n\nconst encoding = `\nimport numpy as np\nfrom sklearn import preprocessing\n\ninput_labels = ['red','black','red','green','black','yellow','white']           #input labels.\n\nencoder = preprocessing.LabelEncoder()                                          #create the label encoder and train it\nencoder.fit(input_labels)\n\n\n#Check the performance by encoding the random ordered list\n\ntest_labels = ['green','red','black']\nencoded_values = encoder.transform(test_labels)\nprint(\"Labels =\", test_labels)\nprint(\"Encoded values =\", list(encoded_values))\n\nencoded_values = [3,0,4,1]\ndecoded_list = encoder.inverse_transform(encoded_values)\nprint(\"Encoded values =\", encoded_values)\nprint(\"Decoded labels =\", list(decoded_list))\n`.trim()\n\n\nclass Traning extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Training And Testing Available Data</h3>\n              We have a dataset containing prices of used BMW cars. We are going to analyze this dataset\n              and build a prediction function that can predict a price by taking mileage and age of the car\n              as input. We will use sklearn <b>train_test_split</b> method to split training and testing dataset.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={cluster}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>we are going to split available data in two sets.</b>\n              <ol>\n                <li><b>Training: </b>We will train our model on this dataset.</li>\n                <li><b>Testing: </b>We will use this subset to make actual predictions using trained model.</li>\n              </ol>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={reason}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Run linear regression model</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={regrationModal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Save Model</h3>\n              There are two ways we can save a model in scikit learn.\n              <ul>\n                <li><b>1.Pickle string: </b>Algorithm for serializing and de-serializing a Python object structure. </li>\n                <ul>\n                  <li><b>pickle.dump: </b>Use to serialize an object hierarchy.</li>\n                  <li><b>pickle.load : </b>Use to deserialize a data stream.</li>\n                </ul>\n                <br />\n                <li><b>2.Pickled model as a file using joblib: </b>It is more efficient on objects that carry large numpy arrays. These functions\n                  also accept file-like object instead of filenames.</li>\n                <ul>\n                  <li><b>joblib.dump: </b>To serialize an object hierarchy </li>\n                  <li><b>joblib.load: </b>To deserialize a data stream</li>\n                </ul>\n              </ul>\n              <br />\n              <br />\n\n              <b>Save Trained Modal using Python Pickle</b>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pickle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Save Trained Modal using joblib</b>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={sklearn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Diffrent way to load data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. What is One Hot Encoding?</h3>\n              <ul>\n                <li>OHE is a process of converting categorical data variables so they can be provided to ML algorithms\n                  to improve predictions.</li>\n                <br />\n\n                <li>Categorical data refers to variables that are made up of label values, for example, a “color” variable could have\n                  the values “red“, “blue, and “green”. Think of values like different categories that sometimes have a natural\n                  ordering to them.</li>\n                <br />\n\n                <li>Some ML algorithms can work directly with categorical data depending on implementation, such as a decision tree, but\n                  most require any i/p or o/p variables to be a numeric in value. This means that any categorical\n                  data must be mapped to integers.</li>\n                <br />\n\n                <li>OHE is one method of converting data to prepare it for an algorithm and get a better prediction. With\n                  one-hot, we convert each categorical value into a new categorical column and assign a binary value of 1 or 0 to\n                  those columns. Each integer value is represented as a binary vector. All the values are zero, and the index is\n                  marked with a 1.</li>\n              </ul>\n              <br />\n\n              <img src={Equations} alt=\"Equations\" className=\"responsive\" style={redesign} />\n\n              <br />\n              <b>Why use OHE?</b>\n              <ul>\n                <li>OHE is useful for data that has no relationship to each other.</li>\n                <li>ML algorithms read a higher number as better/ more important than a lower number.</li>\n                <li>OHE makes our training data more useful and expressive, and it can be rescaled\n                  easily. By using numeric values, we more easily determine a probability for our values.</li>\n              </ul>\n              <br />\n              <b>How to convert categorical data to numerical data</b>\n              <br />\n              Manually converting our data to numerical values includes two basic steps:\n              <ul>\n                <li><b>Integer encoding:</b>We need to assign each category value with an integer, value. If we had\n                  the values red, yellow, and blue, we could assign them 1, 2, and 3 respectively.</li>\n                <li>One hot encoding</li>\n              </ul>\n              <br />\n\n              <h3>6. Categorical Variables and One Hot Encoding</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={clusters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Dummy Varriable Trap</h3>\n              When you can derive one variable from other variables, they are known to be multi-colinear.\n              <br />\n              Here if you know values of california and georgia then you can easily infer value of new jersey state, i.e.\n              california=0 and georgia=0. There for these state variables are called to be multi-colinear. In this\n              situation linear regression won't work as expected. Hence you need to drop one column.\n              <br />\n              <br />\n              <b>N: </b>sklearn library takes care of dummy variable trap hence even if you don't drop one of the\n              state columns it is going to work.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dummyVar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Using sklearn OneHotEncoder</h3>\n              First step is to use label encoder to convert town names into numbers.\n              <div style={titles}>\n                <PrismCode\n                  code={sklearns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. What is Label Encoding?</h3>\n              Most of the sklearn functions expect that the data with number labels rather than word labels. Hence, we need to\n              convert such labels into number labels. This process is called label encoding. We can perform label encoding of data\n              with the help of <b>LabelEncoder()</b> function of scikit-learn Python library.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={encoding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Traning));\n"],"sourceRoot":""}