{"version":3,"sources":["components/ReactJs/prismCode.js","components/algorithams/sidebar.js","assets/stcks.png","components/algorithams/deepAlgorithams/arrayAlgo.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","strArray","Sort","duplicates","compare_array","findMedianSortedArrays","plusOne","arrayCounter","countElements","find132pattern","numIdenticalPairs","removeElement","shuffle","searchRange","combinationSum","missing_number","findMissingRanges","permute","containsDuplicate","summaryRanges","productExceptSelf","countSmaller","DSLogic2","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/31.62e13899.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAlgo' className={classes.line}>Deadlock</Link></MenuItem>\n        <MenuItem><Link to='/Stack' className={classes.line}>Stack</Link></MenuItem>\n        <MenuItem><Link to='/Queue' className={classes.line}>Queue</Link></MenuItem>\n        <MenuItem><Link to='/linkedList' className={classes.line}>LinkedList</Link></MenuItem>\n        <MenuItem><Link to='/heap' className={classes.line}>Heap</Link></MenuItem>\n        <MenuItem><Link to='/trees' className={classes.line}>Tree</Link></MenuItem>\n        <MenuItem><Link to='/graph' className={classes.line}>Graph</Link></MenuItem>\n        <MenuItem><Link to='/sort' className={classes.line}>QuickSort</Link></MenuItem>\n        <MenuItem><Link to='/searchAlgo' className={classes.line}>Search</Link></MenuItem>\n        <MenuItem><Link to='/topTech' className={classes.line}>TopTech</Link></MenuItem>\n        <MenuItem><Link to='/stringAlgo' className={classes.line}>String</Link></MenuItem>\n        <MenuItem><Link to='/arrayAlgo' className={classes.line}>Array</Link></MenuItem>\n        <MenuItem><Link to='/nestingArrAlgo' className={classes.line}>Nesting Array</Link></MenuItem>\n        <MenuItem><Link to='/numbersAlgo' className={classes.line}>Numbers</Link></MenuItem>\n        <MenuItem><Link to='/gameAlgo' className={classes.line}>Game</Link></MenuItem>\n        <MenuItem><Link to='/arrayStrAlgo' className={classes.line}>ArrayStr</Link></MenuItem>\n        <MenuItem><Link to='/arrayNumAlgo' className={classes.line}>ArrayNum</Link></MenuItem>\n        <MenuItem><Link to='/dslogic8' className={classes.line}>Logic8</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/stcks.7efa3b78.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst strArray = `\n    var strArray = \"StackOverflow\".split(\"\");\n    console.log(strArray.join(\"\"));\n`.trim();\n\nconst Sort = `\nlet i, j, arr=[0,9,8,7,6];\nvar max=0;\n\nfor(i=0; i<arr.length; i++){\n  for(j=i; j<arr.length; j++){\n    if(arr[i]>arr[j]){\n      var temp=arr[i];\n      arr[i]=arr[j];\n      arr[j]=temp;\n    }\n  }\n}\n\nconsole.log(arr);\n\n\n//Greatest Product Of 3\nmax = arr[arr.length-1] * arr[arr.length-2] * arr[arr.length-3]\nconsole.log(max);\n`.trim()\n\nconst duplicates = `\nfunction removeDup(){\n  const arr = [1,2,3,4,3,0,9,0,1];\n  const result=[];\n  \n  for(let i=0; i<arr.length;i++){\n      let count=0;\n     // for(let j=0;j<result.length;j++){\n        for(let j=0;j<arr.length;j++){                                     //Remove Duplicates\n       // if(arr[i]==result[j]) count +=1;                                 //Unique Character\n          if(arr[i]==arr[j]) count +=1;\n      }\n      if(count==1){                                                      //RD\n   // if(count==0){                                                      //UC\n          result.push(arr[i]);\n      }  \n  }\n  \n  console.log(result)\n}\n\nremoveDup();\n`.trim()\n\nconst compare_array = `\nfunction compare(){\n  const arr=[1,2,3,4,5,6];\n  const arr2=[5,6,7,8,9,0];\n  const result=[];\n  \n  for(let i=0; i<arr.length; i++){\n    if(arr2.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\ncompare();\n\n\n//Unique name\nfunction getUnique(){\n  var names = [\"John\", \"Peter\", \"Clark\", \"Harry\", \"John\", \"Alice\"];\n  var newName = [];\n  \n  for(i=0; i < names.length; i++){\n      if(newName.indexOf(names[i]) === -1) {\n          newName.push(names[i]);\n      }\n  }\n  console.log(newName);\n}\n\ngetUnique();\n`.trim();\n\nconst findMedianSortedArrays = `\nconst median = () => {\n  const arr = [1,12,15,26,38];\n  const arr2 = [4,3,1];\n  let arrMedian=[];\n\n  const result = [...arr, ...arr2].sort((a, b) => a - b);\n  const half = result.length / 2 | 0;\n  \n  if (result.length % 2){\n      arrMedian=result[half];\n  }\n  else{\n      arrMedian=((result[half] + result[half-1])/2);\n  }\n  return console.log(arrMedian);\n}\n\nmedian()\n`.trim();\n\nconst plusOne = `\nfunction plusOne(){\n  const arr=[1,2,3];\n  let result=[], result2=[];\n\n  for(let i=0; i<arr.length; i++){\n    result.push(arr[i]);\n    result2 = arr[arr.length-1]+1\n  }\n\n  result.pop();\n  result.push(result2);\n  console.log(result)\n}\n\nplusOne();\n`.trim();\n\nconst arrayCounter = `\nfunction arrCounter(arr){\n  var counter = 0;\n  var maxCount = 0;\n\n    function inner(n){\n      if(!Array.isArray(n)){\n        maxCount = Math.max(maxCount, counter);\n     counter = 0;\n     return\n   }\n   \n   n.forEach(num => {\n   counter ++;\n   inner(num);\n   })\n }\n \n inner(arr);\n console.log(maxCount)\n return maxCount;\n}\n\narrCounter([[3]])\narrCounter([[[[[[[9]]]]]]])\narrCounter([])\n`.trim()\n\nconst countElements = `\nfunction arrCounts(){\n  const arr = [1,2,3,4,5];\n  var result = 0;\n\n  while(arr[result]!==undefined){\n    result++;\n  }\n  console.log(result);\n}\n\narrCounts();  \n`.trim();\n\nconst find132pattern = `\nfunction pattern123() {\n  const arr=[1,2,3,4];\n  const number = 132;\n  const result=[];\n\n  const target = number.toString();\n  [target]\n\n  for(let i=0; i<arr.length; i++){\n    if(target.indexOf(arr[i]) !== -1){\n      result.push(arr[i]);\n    }\n  }\n  console.log(result)\n}\n\npattern123();\n`.trim();\n\nconst numIdenticalPairs = `\nfunction numIdenticalPairs(nums) {\n  let count = 0\n  \n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+1); j<nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(numIdenticalPairs([1,2,3,1,1,3]))\n`.trim();\n\nconst removeElement = `\nfunction removeEle(){\n  const arr=[1,2,3,5,4];\n  let ele=3;\n  let removeEle=[];\n  \n  while(ele>0){ \n      removeEle +=arr.pop(ele)\n      ele--;\n  }\n\n  console.log(removeEle)\n  console.log(\"Remain elements\", arr)\n}\n\nremoveEle();\n`.trim();\n\nconst shuffle = `\nfunction shuffle() {\n  const arr = [7,8,9,10];\n  const n=3;\n\n  for (let i=arr.length-1; i>0; i--) {\n    let j = Math.floor(Math.random() *(i+n));\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  console.log(arr);\n}\n\nshuffle()\n`.trim();\n\nconst searchRange = `\nfunction positionEle(){\n  const arr = [5,7,7,8,8,10], target = 8;\n  let result=[];\n  let i;\n\n  for(i=0; i<arr.length; i++){\n    if(arr[i]==target){\n      result.push(arr.indexOf(target));\n    }\n  }\n  console.log(result);\n}\n\npositionEle();\n`.trim();\n\nconst combinationSum = `\nfunction combinationSum(){\n  const arr=[1,2,3,6,4,5];\n  const target = 7;\n  let result=[];\n\n  for(let i=0; i<arr.length; i++){\n    for(let j=i; j<arr.length; j++){\n      if(arr[i]+arr[j]==target){\n        result.push(arr[i],arr[j])\n      }\n    }\n  }  \n  console.log(result);\n}\n\ncombinationSum();\n`.trim();\n\nconst missing_number = `\nfunction missNum() {\n  let i, arr=[0,1,2,4,5], exactsum=0, result=0;\n  exactsum = arr.reduce((a, b) => a + b);\n\n  for (i=0; i<=arr.length; i++) {\n    result += i\n  }\n  \n  result -= exactsum;\n  console.log('Missing Number', result)\n}\n\nmissNum();\n `.trim()\n\nconst findMissingRanges = `\nconst arr = [1,2,4,8];\nconst missing = [];\nvar count = 1;\n\nfor (let i=0; i<arr.length; i++) {\n  if (arr[i] !== count) {\n    missing.push(count);\n    i--;\n  }\n  count++;\n}\n\nconsole.log(missing);\n\n\n//2\nfunction findMissingRanges(nums, lower, upper) {\n  const result = [];\n  const count = (lo, hi) => hi - lo - 1;\n\n  function set(lo, hi){\n    if (count(lo, hi) === 1) {\n      result.push('$'{lo + 1}')\n    } \n    else if (count(lo, hi) > 1) {\n      result.push('$'{lo + 1}->'$'{hi - 1}')\n    }\n  }\n  \n  for (let i = 0; i <= nums.length; i++) {\n    set(\n      i === 0 ? lower - 1 : nums[i - 1],\n      i === nums.length ? upper + 1 : nums[i],\n    )\n  }\n  return result\n}\n\nconsole.log(findMissingRanges([1,2,3,-2,4]))\n`.trim();\n\nconst permute = `\nfunction permute(nums = []){\n  const result = [];\n\n  function aux(list = [], current = []){\n    if (list.length === 0) {\n      result.push(current)\n    }\n\n    list.forEach((number, index) => {\n      aux(list.filter((v, index2) => index2 !== index), [...current, number])\n    })\n  }\n  \n  aux(nums)\n  return result\n}\n\nconsole.log(permute([1,2,3]))\n`.trim();\n\nconst containsDuplicate = `\nfunction containsDuplicate(nums){\n  const map = {}\n  \n  for (num of nums) {\n    if (map[num]) {\n      return true\n    }\n    map[num] = 1\n  }\n  return false\n}\n\nconsole.log(containsDuplicate([1,2,3,1]))\n`.trim();\n\nconst summaryRanges = `\nfunction summaryRanges(nums) {\n  let start = null\n  const result = []\n\n  for (let i=0; i<nums.length; i++) {\n    if (start === null) {\n      start = nums[i]\n    }\n    if (nums[i] === nums[i + 1] - 1) continue;\n\n    if (nums[i] === start) {\n      result.push(nums[i].toString())\n      start = null\n    } \n    else {\n      result.push('$'{start}->'$'{nums[i]}')\n      start = null\n    }\n  }\n  \n  return result\n}\n\nconsole.log(summaryRanges([1,2,3,4,6,7,9]))\n`.trim();\n\nconst productExceptSelf = `\nfunction arrProducts(){\n  const arr = [1,2,3,4];\n  const result = [];\n  let product, i, j;\n\n  for(i=0; i<arr.length; i++){\n    product = 1;\n    for(j=0; j<arr.length; j++){\n       if(i !==j) product *= arr[j];\n    }\n    result.push(product);\n  }\n  console.log(result);\n}\n\narrProducts();\n`.trim();\n\nconst countSmaller = `\nfunction countSmaller(nums) {\n  const result = nums.map(() => 0);\n\n  for (let i=0; i<nums.length; i++) {\n    for (let j=(i+ 1); j<nums.length; j++) {\n      if (nums[j]<nums[i]) {\n        result[i] += 1\n      }\n    }\n  }\n  \n  return result\n}\n\nconsole.log(countSmaller([5,2,6,1]))\n`.trim();\n\n\nclass DSLogic2 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n            <h3>1. Convert a string to an array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={strArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Sort</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Sort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Remove Duplicates</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={duplicates}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Contains Duplicate.</h3>\n              Given an array of integers, find if the array contains any duplicates.\n              <br/>\n              Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\n              <div style={titles}>\n                <PrismCode\n                  code={containsDuplicate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Compare Array</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={compare_array}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Counting Elements.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={countElements}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>7. 132 Pattern.</h3>\n              <b>Input: </b>nums = [1,2,3,4]<br/>\n              <b>Output: </b>false<br/>\n              <b>Explanation: </b>There is no 132 pattern in the sequence.\n              <div style={titles}>\n                <PrismCode\n                  code={find132pattern}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>8. Combination Sum</h3>\n              <b>Input: </b>candidates = [2,3,6,7], target = 7,<br/>\n              <b>A solution set is: </b>\n              [\n                [7],<br/>\n                [2,2,3]<br/>\n              ]\n              <div style={titles}>\n                <PrismCode\n                  code={combinationSum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>9. Remove Element</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={removeElement}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>10. Shuffle the Array.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={shuffle}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>11. Median of Two Sorted Arrays.</h3>\n              Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n              <br/>\n              <b>Follow up: </b>The overall run time complexity should be O(log (m+n)).\n              <br/>\n\n              <b>Example 1:</b>\n              <br/>\n              <b>Input: </b>nums1 = [1,3], nums2 = [2]<br/>\n              <b>Output: </b>2.00000<br/>\n              <b>Explanation: </b>merged array = [1,2,3] and median is 2.<br/><br/>\n              <b>Example 2: </b><br/>\n\n              <b>Input: </b>nums1 = [1,2], nums2 = [3,4]<br/>\n              <b>Output: </b>2.50000<br/>\n              <b>Explanation: </b>merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n              <div style={titles}>\n                <PrismCode\n                  code={findMedianSortedArrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>12. Plus One.</h3>\n              <b>Input: </b>digits = [1,2,3]<br/>\n              <b>Output: </b>[1,2,4]\n              <div style={titles}>\n                <PrismCode\n                  code={plusOne}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>13. Missing Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={missing_number}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Missing Ranges.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={findMissingRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>15. Find First and Last Position of Element in Sorted Array</h3>\n              Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n              <br/>\n              Your algorithm's runtime complexity must be in the order of O(log n).<br/>\n\n              If the target is not found in the array, return [-1, -1].<br/>\n\n              <b>Example 1:</b>\n              <b>Input: </b>nums = [5,7,7,8,8,10], target = 8<br/>\n              <b>Output: </b>[3,4]<br/><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={searchRange}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>16. Permutations.</h3>\n              Given a collection of distinct integers, return all possible permutations.\n              <div style={titles}>\n                <PrismCode\n                  code={permute}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>17. Number of Good Pairs.</h3>\n              <b>Input: </b>nums = [1,2,3,1,1,3] <br/>\n              <b>Output: </b>4 <br/>\n              <b>Explanation: </b>There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n              <div style={titles}>\n                <PrismCode\n                  code={numIdenticalPairs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>18. Product of Array Except Self.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={productExceptSelf}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>19. Count of Smaller Numbers After Self.</h3>\n              You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n              <br/>\n              <b>Input: </b>nums = [5,2,6,1]<br/>\n              <b>Output: </b>[2,1,1,0]<br/>\n              <b>Explanation: </b>\n              <ul>\n                <li>To the right of 5 there are 2 smaller elements (2 and 1).</li>\n                <li>To the right of 2 there is only 1 smaller element (1).</li>\n                <li>To the right of 6 there is 1 smaller element (1).</li>\n                <li>To the right of 1 there is 0 smaller element.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={countSmaller}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>20. Array Counter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayCounter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>21. Summary Ranges.</h3>\n              Given a sorted integer array without duplicates, return the summary of its ranges.\n              <div style={titles}>\n                <PrismCode\n                  code={summaryRanges}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic2));\n"],"sourceRoot":""}