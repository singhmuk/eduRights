(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[193],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return p}));var a=t(45),l=t(28),r=t(136),i=t(137),s=t(139),c=t(0),o=t.n(c),m=t(138),u=t.n(m),p=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(r.a)(this,Object(i.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&u.a.highlightElement(t.ref.current)},t.ref=o.a.createRef(),t}return Object(s.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return o.a.createElement("pre",{className:"code-prism"},o.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(o.a.Component))},141:function(e,n,t){},146:function(e,n,t){"use strict";t.d(n,"a",(function(){return m}));var a=t(0),l=t.n(a),r=t(26),i=t(297),s=t(295),c=t(114),o=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function m(){var e=o();return l.a.createElement("div",{className:e.root},l.a.createElement(s.a,null,l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/infoMl",className:e.line},"InfoMl")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/gredient_decents",className:e.line},"Gredient Decents")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/training",className:e.line},"Traning")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/regularizations",className:e.line},"Regularizations")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/featuresEng",className:e.line},"FeaturesEng")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/adaboost",className:e.line},"Adaboots")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/greedSearch",className:e.line},"Greed Search")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/perceptron",className:e.line},"Perceptron")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/pcaPy",className:e.line},"PCA")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/leanearRegression",className:e.line},"Leanear Regression")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/logisticReg",className:e.line},"Logistic Regression")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/lda",className:e.line},"Lda")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/knn",className:e.line},"Knn")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/k_meanClustring",className:e.line},"K_Mean")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/naiveBar",className:e.line},"Naive Bayes")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/randomForest",className:e.line},"Random Forest")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/decisiontree",className:e.line},"Decision Tree")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/svmPy",className:e.line},"SVM")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/numpyPy",className:e.line},"Numpy")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/pandas",className:e.line},"Pandas")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/bagging",className:e.line},"Matplotlib")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/logisticRegrations",className:e.line},"Scikit Learn")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/regrations",className:e.line},"SciPy")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/libraries",className:e.line},"OpenCV")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/capture",className:e.line},"Capture")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/joinImages",className:e.line},"JoinImages")),l.a.createElement("br",null),"Deep Learning",l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/superwise",className:e.line},"Superwise"))),l.a.createElement("div",null))}},522:function(e,n,t){"use strict";t.r(n);var a=t(45),l=t(28),r=t(136),i=t(137),s=t(139),c=t(0),o=t.n(c),m=t(138),u=t.n(m),p=t(120),d=t(57),E=t(296),h=t(5),f=(t(141),t(146)),b=t(140),g={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},y="\nfrom scipy import constants\n\nx = constants.liter                                                                     #0.001\nx = constants.pi\nx = dir(constants)\n\nx = constants.minute                                                                    #60.0\nx = constants.hour                                                                      #3600.0\nx = constants.day                                                                       #86400.0\nx = constants.week                                                                      #604800.0\nx = constants.year                                                                      #31536000.0\nx = constants.Julian_year                                                               #31557600.0\n\nx = constants.inch                                                                      #0.0254\nx = constants.foot                                                                      #0.30479999999999996\n\nx = constants.yard                                                                      #0.9143999999999999\nx = constants.atm   \nx = constants.atmosphere                                                                #101325.0\n\nx = constants.acre                                                                      #4046.8564223999992\nx = constants.litre                                                                     #0.001\nx = constants.gallon                                                                    #0.0037854117839999997\n\nx = constants.kmh                                                                       #0.2777777777777778          \nx = constants.                                                                          #0.44703999999999994\nx = constants.speed_of_sound                                                            #340.5\n\nx = constants.zero_Celsius                                                              #273.15  \nx = constants.degree_Fahrenheit                                                         #0.5555555555555556\n\nx = constants.electron_volt                                                             #1.602176634e-19\nx = constants.calorie                                                                   #4.184\n\nx = constants.hp                                                                        #745.6998715822701   \nx = constants.horsepower                                                                #745.6998715822701\n\nx = constants.dyn                                                                       #1e-05\nx = constants.kilogram_force                                                            #9.80665\n".trim(),w="\nfrom scipy.optimize import root\nfrom math import cos\n\ndef eqn(x):\n  return x + cos(x)\n\nmyroot = root(eqn, 0)\n\nprint(myroot.x)\n\n\n#2\nfrom scipy.optimize import minimize\n\ndef eqn(x):\n  return x**2 + x + 2\n\nmymin = minimize(eqn, 0, method='BFGS')\n\nprint(mymin)\n".trim(),v="\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\narr = np.array([0, 0, 0, 0, 0, 1, 1, 0, 2])\narr2 = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])\n\nprint(csr_matrix(arr))\nprint(csr_matrix(arr2).count_nonzero())                                             #Counting non-zeros.\nmat.eliminate_zeros()                                                               #Removing zero-entries from the matrix.\n\nmat = csr_matrix(arr2)                                                              #Eliminating duplicate entries.\nmat.sum_duplicates()\n\nnewarr = csr_matrix(arr).tocsc()                                                    #Converting from csr to csc.\n".trim(),x="\nimport numpy as np\nfrom scipy.sparse.csgraph import connected_components\nfrom scipy.sparse.csgraph import dijkstra\nfrom scipy.sparse import csr_matrix\n\narr = np.array([\n  [0, 1, 2],\n  [1, 0, 0],\n  [2, 0, 0]\n])\n\nnewarr = csr_matrix(arr)\n\nprint(connected_components(newarr))\nprint(dijkstra(newarr, return_predecessors=True, indices=0))\n\n".trim(),_="\nimport numpy as np\nfrom scipy.sparse.csgraph import depth_first_order\nfrom scipy.sparse import csr_matrix\n\narr = np.array([\n  [0, 1, 0, 1],\n  [1, 1, 1, 1],\n  [2, 1, 1, 0],\n  [0, 1, 0, 1]\n])\n\nnewarr = csr_matrix(arr)\n\nprint(depth_first_order(newarr, 1))\n\n\n#\nfrom scipy.sparse.csgraph import breadth_first_order\n\narr = np.array([\n  [0, 1, 0, 1],\n  [1, 1, 1, 1],\n  [2, 1, 1, 0],\n  [0, 1, 0, 1]\n])\n\nnewarr = csr_matrix(arr)\n\nprint(breadth_first_order(newarr, 1))\n".trim(),k="\nimport numpy as np\nfrom scipy.spatial import Delaunay\nfrom scipy.spatial import KDTree\nimport matplotlib.pyplot as plt\n\npoints = np.array([\n  [2, 4],\n  [3, 4],\n  [3, 0],\n  [2, 2],\n  [4, 1]\n])\n\nsimplices = Delaunay(points).simplices\nplt.triplot(points[:, 0], points[:, 1], simplices)\nplt.scatter(points[:, 0], points[:, 1], color='r')\n\nkdtree = KDTree(points)\nres = kdtree.query((1, 1))\n\nplt.show()\nprint(res)\n".trim(),S="\n#Find the euclidean distance between given points.\nfrom scipy.spatial.distance import euclidean\n\np1 = (1, 0)\np2 = (10, 2)\n\nres = euclidean(p1, p2)\nprint(res)\n\n\n#cityblock\nfrom scipy.spatial.distance import cityblock\n\np1 = (1, 0)\np2 = (10, 2)\n\nres = cityblock(p1, p2)\nprint(res)\n\n\n#Cosine Distance\nfrom scipy.spatial.distance import cosine\n\np1 = (1, 0)\np2 = (10, 2)\n\nres = cosine(p1, p2)\nprint(res)\n\n\n#Hamming Distance\nfrom scipy.spatial.distance import hamming\n\np1 = (True, False, True)\np2 = (False, True, True)\n\nres = hamming(p1, p2)\nprint(res)\n".trim(),T="\nfrom scipy import io\nimport numpy as np\n\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,])\n\nio.savemat('arr.mat', {\"vec\": arr})                               #vec to display only the array from the matlab data.\n\nmydata = io.loadmat('arr.mat')\n\nprint(mydata)\n\n".trim(),N="\nfrom scipy.interpolate import interp1d\nimport numpy as np\n\nxs = np.arange(10)\nys = 2*xs + 1\n\ninterp_func = interp1d(xs, ys)\n\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\n\nprint(newarr)\n\n\n#2\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\n\ninterp_func = UnivariateSpline(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\n\nprint(newarr)\n\n\n#3\nxs = np.arange(10)\nys = xs**2 + np.sin(xs) + 1\n\ninterp_func = Rbf(xs, ys)\nnewarr = interp_func(np.arange(2.1, 3, 0.1))\n\nprint(newarr)\n".trim(),D="\nimport numpy as np\nfrom scipy.stats import ttest_ind\n\nv1 = np.random.normal(size=100)\nv2 = np.random.normal(size=100)\n\nres = ttest_ind(v1, v2)\nres = ttest_ind(v1, v2).pvalue                                      #return only the p-value.\nprint(res)\n".trim(),j="\nimport numpy as np\nfrom scipy.stats import describe\n\nv = np.random.normal(size=100)\nres = describe(v)\n\nprint(res)\n\n\n#2\nimport numpy as np\nfrom scipy.stats import skew, kurtosis\n\nv = np.random.normal(size=100)\n\nprint(skew(v))\nprint(kurtosis(v))\n".trim(),z=function(e){function n(){return Object(a.a)(this,n),Object(r.a)(this,Object(i.a)(n).apply(this,arguments))}return Object(s.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return o.a.createElement(p.a,{container:!0},o.a.createElement(p.a,{item:!0,xs:2},o.a.createElement(d.a,{className:e.paper},o.a.createElement("h4",null,o.a.createElement(f.a,null)))),o.a.createElement(p.a,{item:!0,xs:10},o.a.createElement(d.a,{className:e.paper},o.a.createElement(E.a,null,o.a.createElement("h3",null,"Scientific Python"),o.a.createElement("ul",null,o.a.createElement("li",null,"SciPy is a scientific computation library that uses NumPy underneath."),o.a.createElement("li",null,"It provides more utility functions for optimization, stats and signal processing."),o.a.createElement("li",null,"SciPy has optimized and added functions that are frequently used in NumPy and Data Science."),o.a.createElement("li",null,"As SciPy is more focused on scientific implementations, it provides many built-in scientific constants. These constants can be helpful when you are working with Data Science."),o.a.createElement("li",null,"A list of all units under the constants module can be seen using the dir() function.")),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:y,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("b",null,"Collection of packages addressing a number of different standard problem domains in scientific computing. "),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"scipy.integrate: "),"Numerical integration routines and differential equation solvers."),o.a.createElement("li",null,o.a.createElement("b",null,"scipy.linalg: "),"Linear algebra routines and matrix decompositions extending beyond those pro\u2010vided in numpy.linalg."),o.a.createElement("li",null,o.a.createElement("b",null,"scipy.optimize: "),"Function optimizers (minimizers) and root finding algorithms."),o.a.createElement("li",null,o.a.createElement("b",null,"scipy.signal: "),"Signal processing tools."),o.a.createElement("li",null,o.a.createElement("b",null,"scipy.sparse: "),"Sparse matrices and sparse linear system solvers."),o.a.createElement("li",null,o.a.createElement("b",null,"scipy.special: "),"Wrapper around SPECFUN, a Fortran library implementing many common mathematical functions, such as the gamma function.")),o.a.createElement("h3",null,"SciPy Optimizers"),"Either find the minimum value of a function, or the root of an equation.",o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("b",null,"x + cos(x)")," for this use SciPy's optimze.root function.",o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"Minimizing a Function: "),"A function, in this context, represents a curve, curves have high points(maxima) and low points(minima)."),o.a.createElement("ul",null,o.a.createElement("li",null,"The highest point in the whole curve is called global maxima, whereas the rest of them are called local maxima."),o.a.createElement("li",null,"The lowest point in whole curve is called global minima, whereas the rest of them are called local minima."))),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:w,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"SciPy Sparse Data"),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"Sparse Data: "),"Sparse data is data that has mostly unused elements (elements don't carry any information)."),o.a.createElement("li",null,o.a.createElement("b",null,"Dense Array: "),"Most of the values are not zero."),o.a.createElement("li",null,"When we are dealing with partial derivatives in linear algebra we will come across sparse data."),o.a.createElement("br",null),o.a.createElement("b",null,"There are primarily two types of sparse matrices that we use:"),o.a.createElement("li",null,o.a.createElement("b",null,"CSC: "),"Compressed Sparse Column. For efficient arithmetic, fast column slicing."),o.a.createElement("li",null,o.a.createElement("b",null,"CSR: "),"Compressed Sparse Row. For fast row slicing, faster matrix vector products")),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:v,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"SciPy Graphs"),o.a.createElement("ul",null,o.a.createElement("li",null,"Use the dijkstra method to find the shortest path in a graph from one element to another."),o.a.createElement("br",null),o.a.createElement("b",null,"It takes following arguments:"),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"return_predecessors: "),"boolean (True to return whole path of traversal otherwise False)."),o.a.createElement("li",null,o.a.createElement("b",null,"indices: "),"index of the element to return all paths from that element only."),o.a.createElement("li",null,o.a.createElement("b",null,"limit: "),"max weight of path."))),o.a.createElement("br",null),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:x,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Depth First Order"),"The depth_first_order() method returns a depth first traversal from a node.",o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("b",null,"This function takes 2 arguments:"),o.a.createElement("ul",null,o.a.createElement("li",null,"The graph."),o.a.createElement("li",null,"The starting element to traverse graph from.")),o.a.createElement("br",null),o.a.createElement("b",null,"Breadth First Order:"),o.a.createElement("ul",null,o.a.createElement("li",null,"The breadth_first_order() method returns a breadth first traversal from a node."),o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("b",null,"This function takes 2 arguments:"),o.a.createElement("ul",null,o.a.createElement("li",null,"The graph."),o.a.createElement("li",null,"The starting element to traverse graph from."))),o.a.createElement("br",null),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:_,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"SciPy Spatial Data"),o.a.createElement("ul",null,o.a.createElement("li",null,"Spatial data refers to data that is represented in a geometric space.",o.a.createElement("b",null,"Ex. "),"points on a coordinate system, finding if a point is inside a boundary or not."),o.a.createElement("br",null),o.a.createElement("b",null,"Triangulation: "),o.a.createElement("ul",null,o.a.createElement("li",null,"A Triangulation of a polygon is to divide the polygon into multiple triangles with which we can compute an area of the polygon."),o.a.createElement("li",null,"A Triangulation with points means creating surface composed triangles in which all of the given points are on at least one vertex of any triangle in the surface."),o.a.createElement("li",null,"Method to generate these triangulations through points is the Delaunay() Triangulation."))),o.a.createElement("br",null),o.a.createElement("b",null,"KDTrees:"),"KDTrees are a datastructure optimized for nearest neighbor queries.",o.a.createElement("ul",null,o.a.createElement("li",null,"KDTree() method returns a KDTree object."),o.a.createElement("li",null,"query() method returns the distance to the nearest neighbor and the location of the neighbors.")),o.a.createElement("br",null),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:k,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Distance Matrix"),o.a.createElement("ul",null,o.a.createElement("li",null,"There are many Distance Metrics used to find various types of distances between two points in data science, Euclidean distsance, cosine distsance etc."),o.a.createElement("li",null,"The distance between two vectors may not only be the length of straight line between them, it can also be the angle between them from origin, or number of unit steps required etc."),o.a.createElement("li",null,o.a.createElement("b",null,"Cityblock Distance: "),"Is the distance computed using 4 degrees of movement. we can only move: up, down, right, or left, not diagonally."),o.a.createElement("li",null,"Is the value of cosine angle between the two points A and B."),o.a.createElement("li",null,"Is the proportion of bits where two bits are difference. It's a way to measure distance for binary sequences.")),o.a.createElement("br",null),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:S,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"SciPy Matlab Arrays"),o.a.createElement("ul",null,o.a.createElement("li",null,"SciPy provides us with the module scipy.io, which has functions for working with Matlab arrays."),o.a.createElement("li",null,"savemat() function allows us to export data in Matlab format."),o.a.createElement("li",null,"The loadmat() function allows us to import data from a Matlab file."),o.a.createElement("li",null,"array originally was 1D, but on extraction it has increased one dimension. to resolve this we can pass an additional argument squeeze_me=True")),o.a.createElement("br",null),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:T,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"SciPy Interpolation"),o.a.createElement("ul",null,o.a.createElement("li",null,"Interpolation is a method for generating points between given points.",o.a.createElement("b",null,"Ex. "),"for points 1 and 2, we may interpolate and find points 1.33 and 1.66."),o.a.createElement("li",null,"SciPy provides scipy.interpolate which has many functions to deal with interpolation."),o.a.createElement("br",null),o.a.createElement("b",null,"1D Interpolation:"),o.a.createElement("ul",null,o.a.createElement("li",null,"interp1d() is used to interpolate a distribution with 1 variable."),o.a.createElement("li",null,"It takes x and y points and returns a callable function that can be called with new x and returns corresponding y."))),o.a.createElement("br",null),o.a.createElement("b",null,"Spline Interpolation:"),o.a.createElement("ul",null,o.a.createElement("li",null,"In 1D interpolation the points are fitted for a single curve whereas in Spline interpolation the points are fitted against a piecewise function defined with polynomials called splines."),o.a.createElement("li",null,"The UnivariateSpline() function takes xs and ys and produce a callable funciton that can be called with new xs."),o.a.createElement("li",null,o.a.createElement("b",null,"Piecewise function: "),"A function that has different definition for different ranges."),o.a.createElement("li",null,o.a.createElement("b",null,"Interpolation with Radial Basis Function: "),"It a function that is defined corresponding to a fixed reference point."),o.a.createElement("li",null,"Rbf() function also takes xs and ys as arguments and produces a callable function that can be called with new xs.")),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:N,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"SciPy Statistical Significance Tests"),o.a.createElement("ul",null,o.a.createElement("li",null,"In statistics, statistical significance means that the result that was produced has a reason behind it, it was not produced randomly, or by chance."),o.a.createElement("br",null),o.a.createElement("b",null,"T-Test:"),o.a.createElement("ul",null,o.a.createElement("li",null,"T-tests are used to determine if there is significant deference between means of two variables. and lets us know if they belong to the same distribution."),o.a.createElement("li",null,"It is a two tailed test."),o.a.createElement("li",null,"The function ttest_ind() takes two samples of same size and produces a tuple of t-statistic and p-value."))),o.a.createElement("br",null),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:D,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Statistical Description of Data"),"To see a summary of values in an array, we can use the describe() function.",o.a.createElement("br",null),"It returns the following description:",o.a.createElement("ul",null,o.a.createElement("li",null,"number of observations (nobs)"),o.a.createElement("li",null,"minimum and maximum values = minmax"),o.a.createElement("li",null,"mean"),o.a.createElement("li",null,"variance"),o.a.createElement("li",null,"skewness"),o.a.createElement("li",null,"kurtosis")),o.a.createElement("br",null),o.a.createElement("b",null,"Normality: "),"This tests based on the skewness and kurtosis. normaltest() function returns p value for the null hypothesis.",o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("b",null,"Skewness: "),o.a.createElement("ul",null,o.a.createElement("li",null,"A measure of symmetry in data. For normal distributions it is 0."),o.a.createElement("li",null,"If it is negative, it means the data is skewed left. If it is positive it means the data is skewed right.")),o.a.createElement("br",null),o.a.createElement("b",null,"Kurtosis: "),o.a.createElement("ul",null,o.a.createElement("li",null,"A measure of whether the data is heavy or lightly tailed to a normal distribution."),o.a.createElement("li",null,"Positive kurtosis means heavy tailed."),o.a.createElement("li",null,"Negative kurtosis means lightly tailed.")),o.a.createElement("div",{style:g},o.a.createElement(b.a,{code:j,language:"js",plugins:["line-numbers"]}))))))}}]),n}(c.Component);n.default=Object(h.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(z)}}]);
//# sourceMappingURL=193.e91e73b9.chunk.js.map