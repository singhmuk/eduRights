{"version":3,"sources":["components/ReactJs/prismCode.js","components/nodeJs/sidebar.js","components/nodeJs/nodeDeep/filSystems.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","fsdir","read","opens","writeFiles","appendFiles","rename","delFiles","watch","CreateFiles","ReadFiles","RenameFiles","OpenFiles","deleteFiles","writeFile","UpdateFiles","FileSys","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/216.d26df792.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introNodejs' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/ejsNode' className={classes.line}>Basics</Link></MenuItem>\n        <MenuItem><Link to='/buffers' className={classes.line}>Buffer</Link></MenuItem>\n        <MenuItem><Link to='/childs' className={classes.line}>Child Process-fork()-exec()</Link></MenuItem>\n        <MenuItem><Link to='/tut_1' className={classes.line}>Callback</Link></MenuItem>\n        <MenuItem><Link to='/filSystems' className={classes.line}>File System</Link></MenuItem>\n        <MenuItem><Link to='/evtNode' className={classes.line}>EvtEmter-Capture data</Link></MenuItem>\n        <MenuItem><Link to='/codes' className={classes.line}>Codes</Link></MenuItem>\n        <MenuItem><Link to='/url_shortener' className={classes.line}>Url_Shortener</Link></MenuItem>\n        <MenuItem><Link to='/stripe_payment' className={classes.line}>stripe_payment</Link></MenuItem>\n        <MenuItem><Link to='/sendEmail' className={classes.line}>sendEmail</Link></MenuItem>\n        <MenuItem><Link to='/search_pagination' className={classes.line}>search_pagination</Link></MenuItem>\n        <MenuItem><Link to='/push_notifications' className={classes.line}>push_notifications</Link></MenuItem>\n        <MenuItem><Link to='/nodetext' className={classes.line}>nodetext</Link></MenuItem>\n        <MenuItem><Link to='/file_upload' className={classes.line}>file_upload</Link></MenuItem>\n        <MenuItem><Link to='/e_acco_veri' className={classes.line}>email_acco_veri</Link></MenuItem>\n        <MenuItem><Link to='/2fa_speakearst' className={classes.line}>2fa_speakearst</Link></MenuItem>\n        <MenuItem><Link to='/authentications' className={classes.line}>SignUp</Link></MenuItem>\n        <MenuItem><Link to='/serverSide' className={classes.line}>Server Side</Link></MenuItem>\n        <MenuItem><Link to='/tut_2' className={classes.line}>Geocode-Upload</Link></MenuItem>\n        <MenuItem><Link to='/tut_6' className={classes.line}>Chat</Link></MenuItem>\n        <MenuItem><Link to='/udemy' className={classes.line}>Udemy</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst fsdir = `\nfs.stat('filename.js', (err, stats) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(stats)\n  console.log(stats.isFile())\n  console.log(stats.isDirectory())\n  console.log(stats.size)\n})\n\nfs.opendir('filename.js', (err, dir) => {\n  if (err) {\n    return console.log(err)\n  }\n  console.log(dir.path)\n})\n`.trim();\n\nconst read = `\nconst fs = require(\"fs\"); \n\nfs.readFile('input.txt', (err, data) => {                                         // Asynchronous read \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"Asynchronous read: \" + data.toString()); \n});\n\n\nconst data = fs.readFileSync('input.txt');                                        // Synchronous read \nconsole.log(\"Synchronous read: \" + data.toString()); \n`.trim();\n\nconst opens = `\nconst fs = require(\"fs\"); \n  \nconsole.log(\"opening file!\"); \nfs.open('input.txt', 'r+', function(err, fd) { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File open successfully\");      \n}); \n\n\n//2\nvar fs = require(\"fs\"); \nvar buf = new Buffer(1024); \n  \nconsole.log(\"opening an existing file\"); \nfs.open('input.txt', 'r+', (err, fd) => { \n   if (err) { \n      return console.error(err); \n   } \n   console.log(\"File opened successfully!\"); \n   console.log(\"reading the file\"); \n     \n   fs.read(fd, buf, 0, buf.length, 0, (err, bytes) => { \n      if (err){ \n         console.log(err); \n      } \n      console.log(bytes + \" bytes read\"); \n      \n      if(bytes > 0){                                                        // Print only read bytes to avoid junk. \n         console.log(buf.slice(0, bytes).toString()); \n      } \n   }); \n}); `.trim();\n\nconst writeFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"writing into existing file\"); \nfs.writeFile('input.txt', 'Geeks For Geeks', (err) => { \nif (err) { \n\treturn console.error(err); \n} \n\t\nconsole.log(\"Data written successfully!\"); \nconsole.log(\"Let's read newly written data\"); \n\t\nfs.readFile('input.txt', (err, data) => { \n\tif (err) { \n\t\treturn console.error(err); \n\t} \n\tconsole.log(\"Asynchronous read: \" + data.toString()); \n}); \n}); \n`.trim();\n\nconst appendFiles = `\nvar fs = require('fs'); \n\nvar data = \"\\nLearn Node.js\"; \n\n// Append data to file \nfs.appendFile('input.txt', data, 'utf8', \n\n\t// Callback function \n\tfunction(err) { \n\t\tif (err) throw err; \n\t\tconsole.log(\"Data is appended to file successfully.\") \n}); `.trim();\n\nconst rename = `\nvar fs = require('fs');\n\nfs.rename('input.txt', 'myrenamedfile.txt',  (err) => {\n  if (err) throw err;\n  console.log('File Renamed!');\n});`.trim();\n\nconst delFiles = `\nvar fs = require(\"fs\"); \n\nconsole.log(\"deleting an existing file\"); \nfs.unlink('input.txt', (err) => { \nif (err) { \n\treturn console.error(err); \n} \nconsole.log(\"File deleted successfully!\"); \n}); \n`.trim();\n\nconst watch = `\nvar fs = require('fs');\nfs.watch(__filename, { persistent: false }, (event, filename) => {\n    console.log(event);\n    console.log(filename);\n})\n\nsetImmediate(function() {\n    fs.rename(__filename, __filename + '.new', () => {});\n});`.trim();\n\nconst CreateFiles = `\nvar fs = require('fs');\n\nfs.appendFile('demo.txt', 'Hello content!', (err) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\n\nconst ReadFiles = `\n//index.html\n<html>\n<body>\n<h1>My Header</h1>\n<p>My paragraph.</p>\n</body>\n</html>\n\n\n//index.js\nvar http = require('http');\nvar fs = require('fs');\nhttp.createServer(function(req, res) {\n    fs.readFile('index.html', function(err, data) {\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.write(data);\n        res.end();\n    });\n}).listen(4000);`.trim();\n\nconst RenameFiles = `\nvar fs = require('fs');\n\nfs.rename('demo.txt', 'text.txt', (err) => {\n    if (err) throw err;\n    console.log('File Renamed!');\n});`.trim();\n\nconst OpenFiles = `\nvar fs = require('fs');\n\nfs.open('read.txt', 'w', (err, file) => {\n    if (err) throw err;\n    console.log('Saved!');\n});`.trim();\n\nconst deleteFiles = `\nvar fs = require('fs');\n\nfs.unlink('will_delete.txt', function (err) {\n  if (err) throw err;\n  console.log('File deleted!');\n});`.trim();\n\nconst writeFile = `\nvar fs = require('fs');\n\nfs.writeFile('write.html', 'Hello content!', function (err) {\n  if (err) throw err;\n  console.log('Saved!');\n});`.trim();\n\nconst UpdateFiles = `\n//append.txt\nThis is my text.\n\n\n//append_file.js\nvar fs = require('fs');\n\nfs.appendFile('append.txt', ' This is my text.', function (err) {\n  if (err) throw err;\n  console.log('Updated!');\n});`.trim();\n\n\nclass FileSys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>What is a control flow function? What are the steps does it execute?</h3>\n              <p>\n                Control flow function runs in between several asynchronous function calls.\n                <ul>\n                  <li>Control the order of execution. </li>\n                  <li>Collect data.</li>\n                  <li>Limit concurrency. </li>\n                  <li>Call the next step in the program.</li>\n                </ul>\n              </p>\n              <br />\n\n              <h3>Explain the working mechanism of control flow function?</h3>\n              <i>\n                Control flow function is the sequence in which statements or functions are executed. Since I/O operations are non-blocking in Node.js, control flow cannot be linear. Therefore, it registers a callback to the event loop and passes the control back to the node, so that the next lines of code can run without interruption. Ex:Read File\n              </i>\n              <br />\n              <ul>\n                <li><b>fs.state(): </b>It helps to get various statistic of a file.</li>\n                <br />\n                To deal with directories here are 2 methods.\n                <li><b>opendir(): </b>readfile()/ writefile()</li>\n                <li><b>opendirSync(): </b>readfileSync()/ writefileSync()</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={fsdir}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Read File</b>\n              <p>fs method read the entire file into buffer.</p>\n              <div style={titles}>\n                <PrismCode\n                  code={read}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Open File</b>\n              <p>The fs.open() method is used to create, read, or write a file. </p>\n              <div style={titles}>\n                <PrismCode\n                  code={opens}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Write</b>\n              <div style={titles}>\n                <PrismCode\n                  code={writeFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <p>\n                <ul>\n                  <li><b>fs.appendFile(): </b>method appends specified content to a file. If the file does not exist, the file will be created.</li>\n                  <ul><li><b>fs.appendFile(filepath, data, options, callback);</b></li></ul>\n                  <br />\n                  <li><b>fs.appendFile(): </b>method is used to synchronously append/Update the data to the file or Create a file.</li>\n                  <ul><li><b>fs.appendFileSync(filepath, data, options);</b></li></ul>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={appendFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Rename File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={rename}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Delete File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={delFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Watch File</b>\n              <p>\n                <ul>\n                  <li>This will set up a watcher on itself, change its own filename, and exit.</li>\n                  <li>Watcher channels can be closed at any time using the following code snippet.</li>\n                  <ul><li><b>const w = fs.watch('file', function(){ }) w.close();</b></li></ul>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={watch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>File System2</h3>\n              <b>Create Files</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={CreateFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Write File</b>\n              <div style={titles}>\n                <PrismCode\n                  code={writeFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Open File</b>\n              A text.txt file create in same the folter.\n              <div style={titles}>\n                <PrismCode\n                  code={OpenFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Read Files</b>\n              <div style={titles}>\n                <PrismCode\n                  code={ReadFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Rename Files</b>\n              A text.txt file create without any data in same the folter.\n              <div style={titles}>\n                <PrismCode\n                  code={RenameFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Delete Files</b>\n              <div style={titles}>\n                <PrismCode\n                  code={deleteFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Update Files</b>\n              <b></b>\n              <div style={titles}>\n                <PrismCode\n                  code={UpdateFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(FileSys));\n"],"sourceRoot":""}