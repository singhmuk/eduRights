{"version":3,"sources":["components/ReactJs/prismCode.js","components/angularjs/sidebar.js","components/angularjs/angular 12/datatypests.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","typescriptypes","anotations","annotations","types","objects","arrays","anyis","tuple","enumsing","enums","functionTypes","anonymous","unions","voids","clicks","omitted","generics","funs","parameters","resting","Datatypests","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/98.262a53b1.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAngular' className={classes.line}>AI</Link></MenuItem>\n        <MenuItem><Link to='/tensorflow' className={classes.line}>Tensorflow</Link></MenuItem>\n        <MenuItem><Link to='/tensors' className={classes.line}>Tensorboards</Link></MenuItem>\n        <MenuItem><Link to='/angCompiler' className={classes.line}>Compiler</Link></MenuItem>\n        <MenuItem><Link to='/neural' className={classes.line}>NeuralKeras</Link></MenuItem>\n        <MenuItem><Link to='/activationFunctions' className={classes.line}>activationFuncs</Link></MenuItem>\n        <MenuItem><Link to='/loss' className={classes.line}>Loss</Link></MenuItem>\n        <MenuItem><Link to='/gradientNeural' className={classes.line}>GradientNeural</Link></MenuItem>\n        <MenuItem><Link to='/stochastic' className={classes.line}>Stochastic</Link></MenuItem>\n        <MenuItem><Link to='/benchmarking' className={classes.line}>Benchmarking</Link></MenuItem>\n        <MenuItem><Link to='/customer' className={classes.line}>Customer</Link></MenuItem>\n        <MenuItem><Link to='/regularizationDeep' className={classes.line}>Regularization Deep</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced' className={classes.line}>Imbalanced</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced2' className={classes.line}>Imbalanced2</Link></MenuItem>\n        <MenuItem><Link to='/convolutionals' className={classes.line}>Convolutionals</Link></MenuItem>\n        <MenuItem><Link to='/data_augmentation' className={classes.line}>data Augmentation</Link></MenuItem>\n        <MenuItem><Link to='/transfer' className={classes.line}>Transfer</Link></MenuItem>\n        <MenuItem><Link to='/word_embedding' className={classes.line}>Embedding</Link></MenuItem>\n        <MenuItem><Link to='/datatypests' className={classes.line}>Datatypes</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_2' className={classes.line}>TS Function</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_4' className={classes.line}>Type Assertion</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst typescriptypes = `\nTypeScript Types => Static, Generics, Decorators\nStatic => Built-in, User-Defined\nBuilt-in Type => Number, String, Boolean, Void, Null\nUser-Defined Type => Array, Touple, Enum, Class, Interface, Functions\n`.trim();\n\nconst anotations = `\nfunction typeAnotation(a:number, str:string, isActive:boolean){\n  return console.log(a, str, isActive);\n}\n\ntypeAnotation(1, 'Mukesh', true)\n`.trim();\n\nconst annotations = `\nconst drawPoint = (point: {x:number, y:number})=>{\n  return console.log(point.x, point.y)\n}\n\ndrawPoint({x:1, y:2});\n\n\n// Better way is use interface as\n interface Poiny{\n   x:number,\n   y:number\n }\n`.trim();\n\nconst types = `\n//1\nfunction add(n1:number,n2:number){\n  console.log(typeof n1)\n  return console.log(n1+n2);\n}\n\nconst number1=5;\nconst number2=10.3;\nadd(number1,number2);\n\n\n//2\nfunction add(n1:number,n2:number){\n  if(typeof n1 !=='number' || typeof n2 !=='number'){\n    throw new Error('Incorrect input')\n  }\n  return console.log(n1+n2);\n}\n\nconst number='5';\nconst number2=10.3;\nadd(number,number2);\n\n\n//3\nfunction add(n1:number,n2:number, showResult:boolean,phrase:string){\n  if(showResult){\n    console.log(phrase,n1+n2)\n  }\n  else{\n    return n1+n2;\n  }\n}\n\nconst number1=5;\nconst number2=10.3;\nconst printResult=true;\nconst resultPhrase='Result is:'\n\nadd(number1,number2,printResult,resultPhrase);\n`.trim();\n\nconst objects = `\n// const person: {\n//   name:string;\n//   id:number;\n// }={\n  \n  const person= {\n  name:'Rakesh',\n  id:1\n}\n\nconsole.log(person.name)\n`.trim();\n\nconst arrays = `\nconst person= {\n  name:'Rakesh',\n  id:1,\n  hobbies:['Sports','Cooking']\n}\n\nlet favaateActivites:any[];\nfavaateActivites=['Sports',1]\n\nfor(const hobby of person.hobbies){\n  console.log(hobby)\n}\n`.trim();\n\nconst anyis = `\nlet useInput: unknown; \nlet userName: string;\n\nuseInput=5;\nuseInput='Mukesh'\nif(typeof useInput === 'string'){\n  userName= useInput\n}\n\n\n//2\nfunction generateError(message:string, code:number):never {\n  throw{message:message, errorCode:code};\n}\n\nconst result = generateError('An Error Occured',500);\nconsole.log(result)\n`.trim();\n\nconst tuple = `\nconst person:{\n  name:string;\n  id:number;\n  hobbies:string[];\n  role:[number,string]                                                              // this mark tuple types\n}= {\nname:'Rakesh',\nid:1,\nhobbies:['Sports','Cooking'],\nrole:[2,'Author']\n}\n\nperson.role.push('admin')\nperson.role[0]=10;\n\nfor(const hobby of person.hobbies){\nconsole.log(hobby)\n}\n`.trim();\n\nconst enumsing = `\nenum Color {Red, Green, Blue};\nlet c: Color;\nColorColor = Color.Green; \n`.trim();\n\nconst enums = `\n// const ADMIN=0;\n// const READ_ONLY=1;\n// const AUTHOR=2;\n\nenum Role {ADMIN,READ_ONLY,AUTHOR}\nenum Role {ADMIN=5,READ_ONLY,AUTHOR}\n\nconst person= {\n  name:'Rakesh',\n  id:1,\n  hobbies:['Sports','Cooking'],\n  role:Role.AUTHOR\n}\n\nlet favaateActivites:any[];\nfavaateActivites=['Sports']\n\nfor(const hobby of person.hobbies){\n  console.log(hobby)\n}\n\nif(person.role===Role.AUTHOR){\n  console.log('Is read only')\n}\n`.trim();\n\nconst functionTypes = `\nfunction add(n1:number, n2:number){\n  return console.log(n1+n2);\n}\n\nlet combineValues:Function;\ncombineValues=add;\ncombineValues(1,3)\n\n\n//2\nfunction add(n1:number, n2:number){\n  return n1+n2;\n}\n\nlet combineValues:(a:number, b:number)=>number;\ncombineValues=add;\nconsole.log(combineValues(1,3))\n\n\n//3\nfunction addAndHandle(n1:number, n2:number, cb:(num:number)=>void){\n  const result = n1 + n2;\n  cb(result);\n}\n\naddAndHandle(10,20,(result)=>{\n  console.log(result)\n})\n`.trim();\n\nconst anonymous = `\nconst names = [\"Alice\", \"Bob\", \"Eve\"];\n\nnames.forEach((s) => {\n  console.log(s.toUpperCase());\n});`.trim();\n\nconst unions = `\nfunction union(n1:number | string | boolean, n2:number|string){\n  const result = n1;\n  return  console.log(result);\n}\n\nconst combine=union(10,30)\ncombine;\n\n\n//2\nconst popStack = (stack: string[]) => {\n  if (stack.length) {\n    return stack[stack.length-1];                                                 // return type is any\n  } else {\n    return null;                                                                  // return type is null\n  }\n};\nlet toys: string[] = ['Doll', 'Ball', 'Marbles'];\nlet emptyBin: string[] = [];\nlet item: string | null = popStack(toys);                                         // item has union type\nconsole.log(item);                                                                // Prints \"Marbles\"\nitem = popStack(emptyBin);\nconsole.log(item);                                                                // Prints null\n\n\n//3\nconst removeDashes = (id: string | number) => {\n  if (typeof id === 'string') {\n    id = id.split('-').join('');\n    return parseInt(id);\n  } else {\n    return id;\n  }\n} \n                                                    \nlet ids: (number | string)[] = ['93-235-66', '89-528-92'];                        // This is a union of array types\nlet newIds: (number | string)[] = [];\nfor (let i=0; i < ids.length; i++) {\n  newIds[i] = removeDashes(ids[i]);                                               // Convert string id to number id\n}\nconsole.log(newIds); \n\n\n//4\n// This is a union of string literal types\ntype RPS = 'rock' | 'paper' | 'scissors' ;\nconst play = (choice: RPS): void => {\n  console.log('You: ', choice);\n  let result: string = '';\n  switch (choice) {\n    case 'rock':\n      result = 'paper';\n      break;\n    case 'paper':\n      result = 'scissors';\n      break;\n    case 'scissors':\n      result = 'rock';\n      break;\n  }\n  console.log('Me: ', result);\n}\nconst number = Math.floor(Math.random()*3);\nlet choices: [RPS, RPS, RPS] = ['rock', 'paper', 'scissors'];\nplay(choices[number]);  \n`.trim();\n\nconst voids = `\nfunction add(n1:number, n2:number){\n  const result = n1;\n  return result;\n}\n\nfunction printResult(num:number):void {\n  console.log('Result', num)\n}\n\nconsole.log(printResult(add(10,30)))                                                    //get undefined\n`.trim();\n\nconst clicks = `\nconst button = document.querySelector('button');\n\nif(button){\n  button.addEventListener('click', ()=>{\n    console.log('Clicked')\n  })\n}\n\n\n//2\nconst button = document.querySelector('button');\n\nfunction clickHandler(message: string){\n  console.log('Clicked', message)\n}\n\nif(button){\n  button.addEventListener('click',clickHandler.bind(null, \"You welcome\"))\n}\n`.trim();\n\nconst omitted = `\nfunction greet(name:string, greeting:string='Ritesh'):string{\n  return greeting\n}\n\nconsole.log(greet('Rakesh'))\n`.trim();\n\nconst generics = `\nfunction show<T>(args:T):T{\n  return args;\n}\n\nvar output=show<string>(\"String\")\nvar output2=show<number>(1)\n\nconsole.log(output);\nconsole.log(output2);\n`.trim();\n\nconst funs = `\n//Tuple:\nlet empTuple = [\"JavaTpoint\", 101, \"Abhishek\"];\nfunction display(tuple_values:any[]) {\n   for(let i = 0;i<empTuple.length;i++) {\n      console.log(empTuple[i]);\n   }\n}\n\ndisplay(empTuple);\n\n\n//Union:\nfunction display(value: (number | string)) {\n    if(typeof(value) === \"number\")\n        console.log(value);\n    else if(typeof(value) === \"string\")\n        console.log(value);\n}\n\ndisplay(123);\ndisplay(\"ABC\");`.trim();\n\nconst parameters = `\nfunction greet(name:string, greeting?:string){\n  return console.log(name, greeting)\n}\n\ngreet('Rakesh')\n\n\n//2\nfunction printName(obj: {first: string; last?: string}) {\n  if (obj.last !== undefined) {\n    console.log(obj.last.toUpperCase());\n  }\n\n  console.log(obj.last?.toUpperCase());\n}\n\nprintName({ first: \"Bob\" });\nprintName({first: \"Alice\", last: \"Alisson\"})\n`.trim();\n\nconst resting = `\n\nfunction greet(name:string, ...greeting:string[]){\n  return console.log(name, greeting)\n}\n\ngreet('Rakesh','Mukesh','John','Ritesh','Nitesh','God')\n`.trim();\n\n\nclass Datatypests extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. What is TypeScript?</h3>\n              <ul>\n                <li>TypeScript is superset of js.</li>\n                <br />\n                <li>\n                  It's an open-source pure object-oriented programing language(means support such as classes, interface, inheritance, generics, etc).\n                  it is a strongly typed suerset of js which compiles to plain js. It contains all of elements of js. It's a language designed for large-scale\n                  js application development, which can be executed on any browser, any Host. TypeScript is the ES6 version of js\n                  with some additionam features.\n                </li>\n                <br />\n                <b>Why use TypeScript.</b>\n                <br />\n                <li>TypeScript supports Static typing, Strongly type, Modules, Optional Parameters, etc.</li>\n                <li>It supports OOPS programing features such as classes, inheritance, etc.</li>\n                <li>It fast, simple.</li>\n                <li>It provides the error-checking feature at compilation time. It will compiles the code, and if any error\n                  found, then it highlighten the mistakes before the script is run.</li>\n                <br />\n                <b>Advantages of TypeScript over js</b>\n                <br />\n                <li>TypeScript always highlights errors at compilation time, whereas js points out at the runtime.</li>\n                <li>It has a namespace concept by defining a module.</li>\n                <br />\n                <p>\n                  Small set of primitive types available in JavaScript: <br />\n                  <b>boolean, bigint, null, number, string, symbol, and undefined,</b> which can use in an interface.\n                  <br />\n                  <br />\n                  TypeScript extends this list with a few more, such as :\n                  <ul>\n                    <li><b>any: </b>allow anything.</li>\n                    <li><b>unknown: </b>ensure someone using this type declares what the type is.</li>\n                    <li><b>never: </b>it’s not possible that this type could happen.</li>\n                  </ul>\n                </p>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={typescriptypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. TypeScript Annotation</h3>\n              <li>type annotation means declared data types during varriable initializtion.</li>\n              <li>Js is not a typed language. It means we can't specify the type of a variable.\n                However, TypeScript is a typed language, where we can specify the type of the variables, function Parameters and object properties.\n              </li>\n              <div style={titles}>\n                <PrismCode\n                  code={anotations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Inline annotation</b>\n              <div style={titles}>\n                <PrismCode\n                  code={annotations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Object</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={objects}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4. Arrays</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={arrays}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Any</h3>\n              <ul>\n                <li>unknown is less similar to any.</li>\n                <li>never type return anything.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={anyis}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Tuple</h3>\n              <ul><li>Fixed length array and fixed data type</li></ul>\n              <div style={titles}>\n                <PrismCode\n                  code={tuple}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. Enum</h3>\n              Enums allows for describing a value which could be one of a set of possible named constants.\n\n              <div style={titles}>\n                <PrismCode\n                  code={enumsing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={enums}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. Function Type</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={functionTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. Anonymous Functions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={anonymous}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. Composing Types:</h3>\n              With TypeScript, can create complex types by combining simple ones. There are two popular ways to do so:\n              <ul>\n                <li><b>Unions: </b>Can declare that a type could be one of many types.</li>\n                <li>Generics</li>\n              </ul>\n              <br />\n              <b>1. Union</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={unions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>2. Generic</b>\n              <br />\n              <ul>\n                <li>\n                  Generics provide variables to types. <b>Ex.</b> An array without generics could contain anything. An array\n                  with generics can describe the values that the array contains.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={generics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Tuple And Union</b>\n              <div style={titles}>\n                <PrismCode\n                  code={funs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. Void</h3>\n              <ul>\n                <li>Void means, function doesn't return anything. It's used where no data type is accessible.</li>\n                <li>A variable of type void is not useful because we can only assign undefined or null to them.</li>\n                <li>An undefined data type denotes uninitialized variable, whereas null represents a variable whose value is undefined.</li>\n                <br />\n                <b>Any Type</b>\n                <li>\n                  It's the 'super type' of all data type in TypeScript. It's used to represents any js value. It allows us to opt-in and opt-out of\n                  type-checking during compilation. If a variable cannot be represented in any of the basic data types, then it can be declared using\n                  \"Any\" data type. Any type is useful when we do not know about the type of value(which might come from an API), and we want to skip the\n                  type-checking on compile time.\n                </li>\n                <br />\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={voids}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Click</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={clicks}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Default Parameters</h3>\n              <ul>\n                <li>\n                  TypeScript provides the Option to add default values to Parameters. So, if the user does not provide a value to an argument, TypeScript\n                  will initialize the Parameter with the default value. Default Parameters have the same behaviour as Optional Parameters. If a value is not passed for the default Parameters in a function call, the default Parameter must follow the required Parameters in\n                  the function signature. Hence, default Parameters can be omitted while calling a function. However, if a function signature has a default Parameter before a required Parameter, the function can still be called, provided the default Parameter is\n                  passed a value of undefined.\n                </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={omitted}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>14. Optional Parameter</h3>\n              <ul>\n                <li>The parameters that may or may not receive a value can be appended with a '?' to mark then as optional.</li>\n                <li>All optional parameters must follow required parameters and should be at the end.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={parameters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>15. Rest Parameter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={resting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Datatypests));\n"],"sourceRoot":""}