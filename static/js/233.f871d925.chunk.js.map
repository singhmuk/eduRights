{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/csv.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","reading","writing","dictionary","searchings","quickSort","CsvPython","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/233.f871d925.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst reading = `\nimport csv\n\nfilename = \"aapl.csv\"\n\nfields = []                                                       # initializing the titles and rows list\nrows = []\n\nwith open(filename, 'r') as csvfile:                              # reading csv file\n    csvreader = csv.reader(csvfile)                               # creating a csv reader object\n    fields = next(csvreader)                                      # extracting field names through first row\n    \n    for row in csvreader:                                         # extracting each data row one by one\n        rows.append(row)\n\n    print(\"Total no. of rows: %d\" % (csvreader.line_num))         # get total number of rows\n\n\nprint('Field names are:' + ', '.join(field for field in fields))                          \n\nprint('First 5 rows are:')\nfor row in rows[:5]:\n    for col in row:                                                                     # parsing each column of a row\n        print(\"%10s\" % col),\n`.trim();\n\nconst writing = `\nimport csv\n\n\nfields = ['Name', 'Branch', 'Year', 'CGPA']                            \n\nrows = [['Nikhil', 'COE', '2', '9.0'],                                  # data rows of csv file\n        ['Sanchit', 'COE', '2', '9.1'],\n        ['Aditya', 'IT', '2', '9.3'],\n        ['Sagar', 'SE', '1', '9.5'],\n        ['Prateek', 'MCE', '3', '7.8'],\n        ['Sahil', 'EP', '2', '9.1']]\n\nfilename = \"university_records.csv\"                                     # name of csv file\n\nwith open(filename, 'w') as csvfile:                                    \n    csvwriter = csv.writer(csvfile)                                     # creating a csv writer object\n    csvwriter.writerow(fields)                                          # writing the fields\n    csvwriter.writerows(rows)                                           # writing the data rows\n    `.trim();\n\nconst dictionary = `\nimport csv\n\n\nmydict = [{'branch': 'COE', 'cgpa': '9.0', 'name': 'Nikhil', 'year': '2'},        # my data rows as dictionary objects\n          {'branch': 'COE', 'cgpa': '9.1', 'name': 'Sanchit', 'year': '2'},\n          {'branch': 'IT', 'cgpa': '9.3', 'name': 'Aditya', 'year': '2'},\n          {'branch': 'SE', 'cgpa': '9.5', 'name': 'Sagar', 'year': '1'},\n          {'branch': 'MCE', 'cgpa': '7.8', 'name': 'Prateek', 'year': '3'},\n          {'branch': 'EP', 'cgpa': '9.1', 'name': 'Sahil', 'year': '2'}]\n\nfields = ['name', 'branch', 'year', 'cgpa']\n\nfilename = \"university_records.csv\"\n\nwith open(filename, 'w') as csvfile:\n    writer = csv.DictWriter(csvfile, fieldnames=fields)\n    writer.writeheader()                                                            # writing headers (field names)\n    writer.writerows(mydict)                                                        # writing data rows\n    `.trim();\n\nconst searchings = `\n    def binary_search(arr, low, high, x):\n        if high >= low:                                                                    \n            mid = (high + low) // 2\n            \n            if arr[mid] == x:                                                # If element is present at the middle itself\n                return mid\n            elif arr[mid] > x:\n                return binary_search(arr, low, mid - 1, x)\n            else:\n                return binary_search(arr, mid + 1, high, x)\n        else:                                                                       # Element is not present in the array\n            return -1\n    \n            \n    # Test array\n    arr = [ 2, 3, 4, 10, 40 ]\n    x = 10\n    \n    result = binary_search(arr, 0, len(arr)-1, x)\n    if result != -1:\n        print(\"Element is present at index\", str(result))\n    else:\n        print(\"Element is not present in array\") `.trim();\n\nconst quickSort = `\n    def partition(arr,low,high):\n        i = ( low-1 )                                                                         # index of smaller element\n        pivot = arr[high]                                                                     # pivot\n    \n        for j in range(low , high):\n            if   arr[j] <= pivot:\n                i = i+1\n                arr[i],arr[j] = arr[j],arr[i]\n    \n        arr[i+1],arr[high] = arr[high],arr[i+1]\n        return ( i+1 )\n    \n    \n    def quickSort(arr,low,high):                                  # Function to do Quick sort.\n        if low < high:\n            pi = partition(arr,low,high)                          # pi is partitioning index, arr[p] is now at right place\n                                                            # Separately sort elements before partition and after partition\n            quickSort(arr, low, pi-1)\n            quickSort(arr, pi+1, high)\n    \n    arr = [10, 7, 8, 9, 1, 5]\n    n = len(arr)\n    quickSort(arr,0,n-1)\n    print (\"Sorted array is:\")\n    for i in range(n):\n        print (\"%d\" %arr[i]), `.trim();\n\nclass CsvPython extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Reading a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reading}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Writing to a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={writing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Writing a dictionary to a CSV file</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dictionary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Searching</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={searchings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>QuickSort</h3>\n              <b>The main function that implements QuickSort </b>\n              <ul>\n                <li><b>arr[] :</b>Array to be sorted.</li>\n                <li><b>low :</b>Starting index.</li>\n                <li><b>high :</b>Ending index.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={quickSort}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(CsvPython));\n"],"sourceRoot":""}