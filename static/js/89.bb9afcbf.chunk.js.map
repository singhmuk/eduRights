{"version":3,"sources":["components/ReactJs/prismCode.js","components/Redux/sidebar.js","components/Redux/deep/mernRedux.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","actions","reducers","comp","servers","MernRedux","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/89.bb9afcbf.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introRedux' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/counter' className={classes.line}>Counter Select</Link></MenuItem>\n        <MenuItem><Link to='/reduxState' className={classes.line}>Redux State-Curd</Link></MenuItem>\n        <MenuItem><Link to='/reduxMethods' className={classes.line}>Redux Methods</Link></MenuItem>\n        <MenuItem><Link to='/react_redux' className={classes.line}>Filter</Link></MenuItem>\n        <MenuItem><Link to='/reduxCurd' className={classes.line}>Redux Curd</Link></MenuItem>\n        <MenuItem><Link to='/expenseTraMern' className={classes.line}>ReactCurdPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/contactKeeperApi' className={classes.line}>ReactReduxCurdPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/mernRedux' className={classes.line}>Mern Redux</Link></MenuItem>\n        <MenuItem><Link to='/signUp' className={classes.line}>SignUP</Link></MenuItem>\n        <MenuItem><Link to='/git' className={classes.line}>Git</Link></MenuItem>\n        <MenuItem><Link to='/gitConcepts' className={classes.line}>Git Concepts</Link></MenuItem>\n        <MenuItem><Link to='/skills' className={classes.line}>Skills</Link></MenuItem>\n        <MenuItem><Link to='/comskills' className={classes.line}>Comskills</Link></MenuItem>\n        <MenuItem><Link to='/techskills' className={classes.line}>Techskills</Link></MenuItem>\n        <MenuItem><Link to='/techinto' className={classes.line}>TechsInto</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst actions = `\n//actions/types.js\nexport const NEW_ENTRY = 'NEW_ENTRY';\nexport const LIST = 'LIST';\nexport const UPDATE_ENTRY = 'UPDATE_ENTRY';\nexport const DELETE_ENTRY = 'DELETE_ENTRY';\nexport const LIST_BY_ID = 'LIST_BY_ID';\n\n\n//actions/index.js\nimport axios from 'axios';\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from './types';\n\n\nexport function newDirectoryEntry( fields ){\n   const request = axios.post('/create', fields );\n   return {\n      type: NEW_ENTRY,\n      payload: request\n   }\n}\n\nexport function directoryList(){\n   const request = axios.get('/read');\n   return {\n      type: LIST,\n      payload: request\n   }\n}\n\n/* Retrieve a single record by  id */\nexport function directoryListById( id ){\n   const request = axios.get('/readbyid/', { params: { id: id } });\n   return {\n      type: LIST_BY_ID,\n      payload: request\n   }\n}\n\nexport function updateDirectoryEntry( fields ){\n   const request = axios.put('/update', fields );\n   return {\n      type: UPDATE_ENTRY,\n      payload: request\n   }\n}\n\nexport function deleteDirectoryEntry( entryid ){\n   const request = axios.delete('/delete', { params : { entryid: entryid } } );\n   return {\n      type: DELETE_ENTRY,\n      payload: request\n   }\n}\n`.trim();\n\nconst reducers = `\n//reducers/index.js\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from '../actions/types';\n\n\nexport default function( state = [], action ) {\n    switch(action.type){\n      case NEW_ENTRY:\n        return { ...state, directory: action.payload };\n      case LIST:\n        return { ...state, directory: action.payload };\n      case LIST_BY_ID:\n        return { ...state, directory: action.payload };\n      case UPDATE_ENTRY:\n        return { ...state, directory: action.payload };\n      case DELETE_ENTRY:\n        return { ...state, directory: action.payload };\n      default:\n        return state;\n    }\n}\n`.trim();\n\nconst comp = `\n//components/form.js\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Formik, Field, Form } from 'formik';\nimport Yup from 'yup';\nimport { updateDirectoryEntry, newDirectoryEntry } from '../actions/index';\n\nconst validationSchema = Yup.object().shape({\n    name: Yup.string().required('Business name is required!'),\n    description: Yup.string().required('Business description is required!'),\n    phone: Yup.string().required('Phone is required!'),\n    email_address: Yup.string().email('Invalid email address!').required('Email address is required!'),\n    physical_address: Yup.string().required('Physical address is required!'),\n});\n\nclass form extends Component {\n   constructor(props){\n      super(props);\n      this.state = { id: typeof this.props.row._id !== 'undefined' ? this.props.row._id : '', \n      name: typeof this.props.row.name !== 'undefined' ? this.props.row.name : '', \n      description: typeof this.props.row.description !== 'undefined' ? this.props.row.description : '', \n      phone: typeof this.props.row.phone !== 'undefined' ? this.props.row.phone : '', \n      email_address: typeof this.props.row.email_address !== 'undefined' ? this.props.row.email_address : '', \n      physical_address: typeof this.props.row.physical_address !== 'undefined' ? this.props.row.physical_address : '', \n      redirect: false \n      }\n   }\n   async createUpdateRecord(values){\n      let results;\n      if( this.props.mode === 'edit' ) {\n        results = await this.props.updateDirectoryEntry(values);\n        if( results.payload.data.response === 'success' ) {\n            this.setState({ redirect: true });\n        } else {\n            console.log(results.payload.data.response);\n        }\n      } else {\n        results = await this.props.newDirectoryEntry(values);\n        if( results.payload.data.response === 'success' ) {\n            this.setState({ redirect: true });\n        } else {\n            console.log(results.payload.data.response);\n        }\n      }\n   }\n   render(){\n      if( this.state.redirect ) {\n          return (\n            <Redirect to=\"/\" />\n          );\n      }\n      return(\n         <div>\n           <Formik\n             initialValues={{\n               name: this.state.name,\n               description: this.state.description,\n               phone: this.state.phone,\n               email_address: this.state.email_address,\n               physical_address: this.state.physical_address,\n               id: this.state.id\n             }}\n             validationSchema={validationSchema}\n             onSubmit={ values => {\n                this.createUpdateRecord(values);\n             }}\n             render={({ errors, touched }) => (\n               <Form>\n                 <div>\n                   <div>\n                   <h2>{ this.props.mode === 'edit' ? 'Edit Entry' : 'New Entry' }</h2>\n                   </div>\n                 </div> \n                 <div>\n                   <div className={''$'{errors.name && touched.name && 'has-error'}'}>\n                     <p>Business Name</p>\n                     <Field name=\"name\" type=\"text\" />\n                   </div>\n                   <div className={''$'{errors.description && touched.description && 'has-error'}'}>\n                     <p>Business Description</p>\n                     <Field name=\"description\" type=\"text\" />\n                      { errors.description && touched.description && <span>{errors.description}</span> }\n                   </div>\n                 </div>\n                 <div className=\"row\">\n                   <div className={''$'{errors.phone && touched.phone && 'has-error'}'}>\n                     <p>Phone</p>\n                     <Field name=\"phone\" type=\"text\" />\n                      { errors.phone && touched.phone && <span>{errors.phone}</span> }\n                   </div>\n                   <div className={''$'{errors.email_address && touched.email_address && 'has-error'}'}>\n                     <p>Email Address</p>\n                     <Field name=\"email_address\" type=\"text\" />\n                      { errors.email_address && touched.email_address && <span>{errors.email_address}</span> }\n                   </div>\n                 </div>\n                 <div className=\"row\">\n                   <div className={''$'{errors.physical_address && touched.physical_address && 'has-error'}'}>\n                     <p>Physical Address</p>\n                     <Field name=\"physical_address\" type=\"text\" />\n                      { errors.physical_address && touched.physical_address && <span>{errors.physical_address}</span> }\n                   </div>\n                 </div> \n                 <div>\n                   <div>\n                      <button>Submit</button>\n                   </div>\n                 </div>\n               </Form>\n             )} />\n         </div>\n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ updateDirectoryEntry, newDirectoryEntry }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(form);\n\n\n\n//components/list.js\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { deleteDirectoryEntry, directoryList } from '../actions/index';\nimport { Link } from \"react-router-dom\";\n\nclass List extends Component {\n   constructor(props){\n     super(props);\n     this.state = { list: [] };\n     this.confirmDelete = this.confirmDelete.bind(this);\n   }\n   async getAList() {\n     let results = await this.props.directoryList();\n     this.setState({ list : results.payload.data });\n   }\n   componentDidMount(){\n     this.getAList();\n   }\n   async confirmDelete(e){\n     if ( window.confirm('Are you sure you wish to delete this item?') ) {\n          let results = await this.props.deleteDirectoryEntry(e.target.id);\n          if( results.payload.data.response === 'success' ) {\n              this.getAList();\n          }\n     }\n   }\n   displayAList(){\n     if( Object.keys(this.state.list).length > 0 ) {\n         const row = this.state.list.map( ( item, i ) => {\n            let rowNumber = i + 1;\n            return <tr key={i}><th scope=\"row\">{rowNumber}</th><td>{item.name}</td><td>{item.description}</td>\n            <td>{item.phone}</td>\n            <td>{item.email_address}</td><td>{item.physical_address}</td>\n            <td><Link className=\"btn btn-warning\" to={\"/edit/\"+item._id}>Edit</Link>&nbsp;\n            <Link id={item._id} onClick={this.confirmDelete} to=\"/\">Delete</Link></td></tr>\n         });\n         return (\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>Description</th>\n                  <th>Phone</th>\n                  <th>Email</th>\n                  <th>Address</th>\n                  <th>Edit / Delete</th>\n                </tr>\n              </thead>\n              <tbody>\n                { row }\n              </tbody>\n            </table>\n         );\n     } else {\n         return <p><em>There are no listings at the moment.</em></p>;\n     }\n   }\n   render(){\n      return(\n        <div>\n          <h2>Listings</h2>\n          { this.displayAList() }\n        </div> \n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ directoryList, deleteDirectoryEntry }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(List);\n\n\n//components/edit.js\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { directoryListById } from '../actions/index';\nimport Form from './form';\n\nclass Edit extends Component {\n   constructor(props){\n      super(props);\n      this.id = this.props.match.params.id;\n      this.state = { row: [] }\n   }\n   async getRecord() {\n      let result = await this.props.directoryListById(this.id);\n      this.setState({ row : Object.assign( this.state.row, result.payload.data ) });\n   }\n   componentDidMount(){\n      this.getRecord();\n   }\n   callForm(){\n      if ( Object.keys(this.state.row).length > 0 ) {\n           return <Form mode=\"edit\" row={this.state.row} />;\n      }\n   }\n   render(){\n      return(\n        <div>\n          { this.callForm() }\n        </div> \n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ directoryListById }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(Edit);\n\n\n//components/entry.js\nimport Form from './form';\n\nconst Entry = () => {\n    return(\n      <div>\n        <Form mode=\"new\" row=\"[]\" />\n      </div>\n    );\n}\n\n\n//App.js\nimport { Link, Route } from \"react-router-dom\";\nimport Entry from \"./components/entry\";\nimport List from \"./components/list\";\nimport Edit from \"./components/edit\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"row\">\n         <Link to=\"/\">Listings</Link>\n          <Link to=\"/entry\">Entry</Link>\n          <Route exact path=\"/\" component={List} />\n          <Route path=\"/entry\" component={Entry} />\n          <Route path=\"/edit/:id\" component={Edit} />\n      </div>\n    );\n  }\n}\n\n\n//index.js\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Router } from \"react-router-dom\";\nimport createBrowserHistory from \"history/createBrowserHistory\";\nimport promise from \"redux-promise\";\n\nimport reducers from \"./reducers\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\nconst history = createBrowserHistory();\n\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>, document.querySelector(\".container\") );`.trim();\n\nconst servers = `\n//models/directory.js\nconst DirectorySchema = new Schema({\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  phone: { type: String, required: true },\n  email_address: { type: String, required: true },\n  physical_address: { type: String, required: true },\n  createdAt: { type: Date, required: true }\n});\n\n\nmodule.exports = mongoose.model('Directory', DirectorySchema);\n\n\n//routes/index.js\nconst Directory = require('../models/directory');\n\nmodule.exports = function() {\n  router.get('/read', async (req, res) => {\n      let directory_list = await Directory.find({});\n      res.send(directory_list);\n  });\n\n  router.post(\"/create\", async ( req, res ) => {\n      let directory = new Directory({\n         name: req.body.name,\n         description: req.body.description,\n         phone: req.body.phone,\n         email_address: req.body.email_address,\n         physical_address: req.body.physical_address,\n         createdAt: new Date(Date.now())\n      });\n\n        let newDirectory = await directory.save();\n        res.send({ response: 'success'});\n  });\n\n  router.get('/readbyid/', async ( req, res ) => {\n       let record = await Directory.findOne({ _id: req.query.id });\n       res.send(record);\n  });\n     \n  router.put('/update', async ( req, res ) => {\n        let directory = await Directory.findOneAndUpdate({ _id: req.body.id }, req.body, { new: true });\n        res.send({ response: 'success' });\n  });\n\n  router.delete('/delete', async (req, res) => {\n        let directory = await Directory.findOneAndRemove({ _id: req.query.entryid });\n        return res.send({ response: 'success' });\n  });\n\n  return router;\n\n};\n\n\n//server.js\nconst path = require('path');\n\nconst routes = require('./routes/index')();\n\napp.use(express.json());\napp.use('/', routes);\n\nconst port = process.env.PORT || 3001;\napp.listen(port, () => { console.log('Server listening on port ') });\n\n`.trim();\n\n\n\nclass MernRedux extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Actions</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Reducers</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Components</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={comp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Server</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={servers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MernRedux));\n"],"sourceRoot":""}