(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[215],{140:function(e,t,n){"use strict";n.d(t,"a",(function(){return E}));var a=n(45),l=n(28),r=n(136),i=n(137),s=n(139),c=n(0),o=n.n(c),m=n(138),u=n.n(m),E=(n(59),function(e){function t(e){var n;return Object(a.a)(this,t),(n=Object(r.a)(this,Object(i.a)(t).call(this,e))).highlight=function(){n.ref&&n.ref.current&&u.a.highlightElement(n.ref.current)},n.ref=o.a.createRef(),n}return Object(s.a)(t,e),Object(l.a)(t,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,t=e.code,n=(e.plugins,e.language);return o.a.createElement("pre",{className:"code-prism"},o.a.createElement("code",{ref:this.ref,className:"language-".concat(n)},t.trim()))}}]),t}(o.a.Component))},141:function(e,t,n){},149:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var a=n(0),l=n.n(a),r=n(26),i=n(297),s=n(295),c=n(114),o=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function m(){var e=o();return l.a.createElement("div",{className:e.root},l.a.createElement(s.a,null,l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/introNodejs",className:e.line},"Intro")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/ejsNode",className:e.line},"Basics")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/buffers",className:e.line},"Buffer")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/childs",className:e.line},"Child Process-fork()-exec()")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/tut_1",className:e.line},"Callback")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/filSystems",className:e.line},"File System")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/evtNode",className:e.line},"EvtEmter-Capture data")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/codes",className:e.line},"Codes")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/url_shortener",className:e.line},"Url_Shortener")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/stripe_payment",className:e.line},"stripe_payment")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/sendEmail",className:e.line},"sendEmail")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/search_pagination",className:e.line},"search_pagination")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/push_notifications",className:e.line},"push_notifications")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/nodetext",className:e.line},"nodetext")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/file_upload",className:e.line},"file_upload")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/e_acco_veri",className:e.line},"email_acco_veri")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/2fa_speakearst",className:e.line},"2fa_speakearst")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/authentications",className:e.line},"SignUp")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/serverSide",className:e.line},"Server Side")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/tut_2",className:e.line},"Geocode-Upload")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/tut_6",className:e.line},"Chat")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/udemy",className:e.line},"Udemy"))),l.a.createElement("div",null))}},369:function(e,t,n){"use strict";n.r(t);var a=n(45),l=n(28),r=n(136),i=n(137),s=n(139),c=n(0),o=n.n(c),m=n(138),u=n.n(m),E=n(120),d=n(57),v=n(296),h=n(5),g=(n(141),n(149)),f=n(140),b={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},p="\nvar fs = require('fs');\nvar rs = fs.createReadStream('./test.txt');\n\nrs.on('open', function () {\n  console.log('The file is open');\n});".trim(),y="\n//1\nvar events = require('events');\nvar eventEmitter = new events.EventEmitter();\n\n\nvar myEventHandler = function () {                                      //Create an event handler.\n  console.log('I hear a scream!');\n}\n\neventEmitter.on('scream', myEventHandler);                              //Assign the event handler to an event.\n\neventEmitter.emit('scream');                                            //Fire the 'scream' event.\n\n\n//2\n//test.txt\ntext file datas uuuuuuuuuuuuuuu\n\n//events.js\nvar fs = require('fs');\nvar rs = fs.createReadStream('./test.txt');\nrs.on('open', function() {\n    console.log('The file is open');\n});".trim(),k="\nconst { EventEmitter } = require(\"events\");\nconst firstEmitter = new EventEmitter();\n\nconst evt = firstEmitter.emit(\"My first event\");\nconsole.log(evt);\n\n\n//2\nconst EventEmmiter = require('events').EventEmitter;\n\nfunction counter(init) {\n    this.increment = function() {\n        init++;\n        this.emit('incremented', init);\n    }\n}\n\ncounter.prototype = new EventEmmiter();\nvar counter = new counter(10);\n\nfunction callback(count) {\n    console.log(count);\n}\n\ncounter.addListener('incremented', callback);\n\n//counter.removeListener('incremented', callback);                 //To remove the event listeners bound to counte.\n//counter.on('incremented', callback);                             //counter.on and counter.addListener are interchangeable.\n\ncounter.increment();\ncounter.increment();".trim(),w='\nconst EventEmitter = require("events");\n\nclass TicketManager extends EventEmitter {\n constructor(supply) {\n super();\n this.supply = supply;\n }\n \n buy(email, price) {\n  this.supply--;\n  this.emit("buy", email, price, Date.now());\n  } \n}\n\nmodule.exports = TicketManager;\n\n\n\n//2\n// const TicketManager = require("./ticketManager");\nconst ticketManager = new TicketManager(10);\nticketManager.on("buy", () => {\n  console.log("Someone bought a ticket!");\n });\n \n ticketManager.once("buy", () => {\n  console.log("This is only called once");\n });\n \n \n ticketManager.buy(\'test@gmail.com\',10);\n ticketManager.buy(\'test@gmail.com\',10);'.trim(),M='\nconst ticketManager = new TicketManager(10);\nticketManager.on("buy", () => {\n  console.log("Someone bought a ticket!");\n });\n\nclass EmailService {\n  send(email) {\n  console.log(Sending email to \'$\'{email});\n  }\n }\n \n module.exports = EmailService;\n \n \n class DatabaseService {\n  save(email, price, timestamp) {\n  console.log(Running query: INSERT INTO orders VALUES\n (email, price, created) VALUES (\'$\'{email}, \'$\'{price}, \'$\'{timestamp}));\n  }\n }\n module.exports = DatabaseService;\n \n \n// const TicketManager = require("./ticketManager");\n// const EmailService = require("./emailService");\n// const DatabaseService = require("./databaseService");\n\nconst ticketManager = new TicketManager(3);\nconst emailService = new EmailService();\nconst databaseService = new DatabaseService();\n\n\nticketManager.on("buy", (email, price, timestamp) => {\n  emailService.send(email);\n  databaseService.save(email, price, timestamp);\n });\n\n this.emit("buy", email, price, Date.now());\n ticketManager.buy("test@email.com", 10);\n '.trim(),x='\nconst EventEmitter = require("events");\n\nclass TicketManager extends EventEmitter {\n constructor(supply) {\n super();\n this.supply = supply;\n }\n \n buy(email, price) {\n  if (this.supply > 0) {\n  this.supply;\n  this.emit("buy", email, price, Date.now());\n  return;\n  }\n  this.emit("error", new Error("There are no more tickets left to purchase"));\n }\n \n}\n\nmodule.exports = TicketManager;\n\n\nconst ticketManager = new TicketManager(10);\nticketManager.on("buy", () => {\n  console.log("Someone bought a ticket!");\n });\n \nticketManager.buy("test@email.com", 10);'.trim(),j='\nvar events = require("events");\nvar emitter = new events.EventEmitter();\nvar author = "Slim Shady";\nvar title = "The real Slim Shady";\n\nemitter.on("addAuthorTitle", function (author, title) {                                   //an event listener.\n  console.log("Added Author and Title " + author + " - " + title);\n});\n\nemitter.emit("addAuthorTitle", author, title);                                       //add record to db then emit an event.\n'.trim(),S='\nvar emitter = require("events").EventEmitter;\n\nfunction LoopProcessor(num) {\n  var e = new emitter();\n\n  setTimeout(function () {\n    for (var i = 1; i <= num; i++) {\n      e.emit("BeforeProcess", i);\n\n      console.log("Processing number:" + i);\n\n      e.emit("AfterProcess", i);\n    }\n  }, 2000);\n\n  return e;\n}\nvar lp = LoopProcessor(3);\n\nlp.on("BeforeProcess", function (data) {\n  console.log("About to start the process for " + data);\n});\n\nlp.on("AfterProcess", function (data) {\n  console.log("Completed processing " + data);\n});'.trim(),N='\nconst EventEmitter = require("events");\n\nvar eventEmitter1 = new EventEmitter();                                 // Initializing event emitter instances\nvar eventEmitter2 = new EventEmitter();\n\n// Getting max listener\nconsole.log("Default max listener", eventEmitter1.getMaxListeners());\nconsole.log("Default max listener", eventEmitter2.getMaxListeners());\n\n\nEventEmitter.defaultMaxListeners = 2;                                   // Set global deaultMaxListeners to 2\n\nconsole.log("Default max listener", eventEmitter1.getMaxListeners());\nconsole.log("Default max listener", eventEmitter2.getMaxListeners());\n\neventEmitter1.setMaxListeners(5);                                       // Set max listener of eventEmitter1 to 5\n\nconsole.log("Default max listener", eventEmitter1.getMaxListeners());\nconsole.log("Default max listener", eventEmitter2.getMaxListeners());\n\n\nvar fun1 = (msg) => {\n  console.log("Message from fun1: " + msg);                             // Declaring listener fun1 to myEvent1\n};\n\nvar fun2 = (msg) => {\n  console.log("Message from fun2: " + msg);                             // Declaring listener fun2 to myEvent2\n};\n\nfor (var i = 0; i < 3; i++) {\n  eventEmitter1.addListener("myEvent1", fun1);                    // Listening to myEvent1 with 3 instance of fun1\n}\n\nfor (var i = 0; i < 3; i++) {\n  eventEmitter2.addListener("myEvent2", fun2);                    // Listening to myEvent2 with 3 instance of fun2\n}\n\neventEmitter1.emit("myEvent1", "Event1 occurred");\neventEmitter2.emit("myEvent2", "Event2 occurred");'.trim(),T='\nvar events = require("events");\nvar emitter = new events.EventEmitter();\nvar author = "Slim Shady";\nvar title = "The real Slim Shady";\n\nemitter.once("addAuthorTitle", function (author, title) {\n  console.log("Added Author and Title " + author + " - " + title);\n});\n\n\nemitter.emit("addAuthorTitle", author, title);                                  //add record to db then emit an event.\nemitter.emit("addAuthorTitle", author, title);'.trim(),L='\nvar events = require("events");\nvar em = new events.EventEmitter();\n\nem.on("FirstEvent", function (data) {\n  console.log("First subscriber: " + data);\n});\n\nem.emit("FirstEvent", "This is my first Node.js event emitter.");'.trim(),A='\nconst EventEmitter = require("events");\n\nvar eventEmitter = new EventEmitter();\n\nvar geek1 = (msg) => {\n  console.log("Message from geek1: " + msg);\n};\n\nvar geek2 = (msg) => {\n  console.log("Message from geek2: " + msg);\n};\n\n\neventEmitter.on("myEvent", geek1);                                      // Registering geek1 and geek2\neventEmitter.on("myEvent", geek1);\neventEmitter.on("myEvent", geek2);\n\neventEmitter.removeListener("myEvent", geek1);                          // Removing listener geek1\neventEmitter.emit("myEvent", "Event occurred");\neventEmitter.removeAllListeners("myEvent");                             // Removing all the listeners to myEvent\neventEmitter.emit("myEvent", "Event occurred");'.trim(),R='\nconst EventEmitter = require("events");\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\n\nmyEmitter.setMaxListeners(11);                                          // increase the limit\n\nfor (let i = 0; i < 11; i++) {\n  myEmitter.on("event", (_) => console.log(i));\n}\n\nmyEmitter.emit("event");\n'.trim(),q="\nconst EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter { }\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\nmyEmitter.emit('event');\n".trim(),D=function(e){function t(){return Object(a.a)(this,t),Object(r.a)(this,Object(i.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(l.a)(t,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return o.a.createElement(E.a,{container:!0},o.a.createElement(E.a,{item:!0,xs:2},o.a.createElement(d.a,{className:e.paper},o.a.createElement("h4",null,o.a.createElement(g.a,null)))),o.a.createElement(E.a,{item:!0,xs:10},o.a.createElement(d.a,{className:e.paper},o.a.createElement(v.a,null,o.a.createElement("h3",null,"Events"),o.a.createElement("ul",null,o.a.createElement("li",null,"Every action on a computer is an event. Like when a connection is made or a file is opened."),o.a.createElement("li",null,"Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file.")),o.a.createElement("br",null),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:p,language:"js",plugins:["line-numbers"]})),o.a.createElement("h3",null,"What is Event Emmitter"),o.a.createElement("ul",null,o.a.createElement("li",null,'Node.js has a built-in module, called "Events", where we can create-, fire-, and listen for- own events.'),o.a.createElement("li",null,"Can assign event handlers to own events with the EventEmitter object."),o.a.createElement("li",null,"All objects that emit events are members of EventEmitter class. These objects expose an ",o.a.createElement("b",null,"eventEmitter.on()")," function that allows one/ more functions to be attached to events emitted by the object."),o.a.createElement("li",null,"When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously."),o.a.createElement("li",null,"Node.js allows us to add a listener for an event with the on() function of an event emitter object. This listens for a particular event name and fires a callback when the event is triggered.")),o.a.createElement("br",null),o.a.createElement("br",null),"Node.js allows us to create and handle custom events by using events module. Event module includes EventEmitter class which can be used to raise and handle custom events.",o.a.createElement("br",null),o.a.createElement("br",null),"Many objects in a Node emit events, for example.",o.a.createElement("ul",null,o.a.createElement("li",null,"A net.Server emits an event each time a peer connects to it"),o.a.createElement("li",null,"fs.readStream emits an event when the file is opened."),o.a.createElement("li",null,"All objects which emit events are the instances of events.EventEmitter.")),o.a.createElement("br",null),"EventEmitter provides multiple properties like on and emit.",o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"on: "),"property is used to bind a function with the event."),o.a.createElement("li",null,o.a.createElement("b",null,"emit: "),"is used to fire an event.")),o.a.createElement("br",null),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"addListener(event, listener):")," Adds a listener at the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times. Returns emitter, so calls can be chained."),o.a.createElement("li",null,o.a.createElement("b",null,"on(event, listener):")," Adds a listener at the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times. Returns emitter, so calls can be chained."),o.a.createElement("li",null,o.a.createElement("b",null,"once(event, listener):")," Adds a one time listener to the event. This listener is invoked only the next time the event is fired, after which it is removed. Returns emitter, so calls can be chained."),o.a.createElement("li",null,o.a.createElement("b",null,"removeListener(event, listener):")," Removes a listener from the listener array for the specified event. Caution \u2212 It changes the array indices in the listener array behind the listener. removeListener will remove, at most, one instance of a listener from the listener array. If any single listener has been added multiple times to the listener array for the specified event, then removeListener must be called multiple times to remove each instance. Returns emitter, so calls can be chained."),o.a.createElement("li",null,o.a.createElement("b",null,"removeAllListeners([event]):")," Removes all listeners, or those of the specified event. It's not a good idea to remove listeners that were added elsewhere in the code, especially when it's on an emitter that you didn't create (e.g. sockets or file streams). Returns emitter, so calls can be chained."),o.a.createElement("li",null,o.a.createElement("b",null,"setMaxListeners(n):")," By default, EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited."),o.a.createElement("li",null,o.a.createElement("b",null,"listeners(event):")," Returns an array of listeners for the specified event."),o.a.createElement("li",null,o.a.createElement("b",null,"emit(event, [arg1], [arg2], [...]):")," Execute each of the listeners in order with the supplied arguments. Returns true if the event had listeners, false otherwise."),o.a.createElement("li",null,o.a.createElement("b",null,"listenerCount(emitter, event):")," Returns the number of listeners for a given event."),o.a.createElement("br",null),o.a.createElement("li",null,"There are two common patterns that can be used to raise and bind an event using EventEmitter class in Node.js."),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"Return EventEmitter from a function.")),o.a.createElement("li",null,o.a.createElement("b",null,"Extend the EventEmitter class."))),o.a.createElement("br",null),o.a.createElement("li",null,o.a.createElement("b",null,"Return EventEmitter from a function:")," In this pattern, a constructor function returns an EventEmitter object, which was used to emit events inside a function. This EventEmitter object can be used to subscribe for the events."),o.a.createElement("li",null,"eventEmitter.on(event,listener) and eventEmitter.addListener(event, listener) are pretty much similar.")),o.a.createElement("br",null),o.a.createElement("h3",null,"addListener"),o.a.createElement("ul",null,o.a.createElement("li",null,"Events are worthless unless there is some action to perform in response to an event. To handle an event response, Node provides the on() and addListener() methods."),o.a.createElement("li",null,"Both methods take an event name and handler function as arguments. These methods can be used interchangeably because they do the same thing: execute code based on events."),o.a.createElement("li",null,"Continuing with the author and title example, but adding a handler function to be invoked once the event is triggered.")),o.a.createElement("br",null),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:j,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:q,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:y,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"EventEmitter2"),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:k,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Secon Evt"),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:w,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Capture Data"),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:M,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Handling Error"),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:x,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Extend EventEmitter"),"In this pattern, we can extend the constructor function from EventEmitter class to emit the events.",o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:S,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"getMaxListeners"),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:N,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Once"),"Sometimes you want your application to respond to an event only one time (the first time the event occurs). To do this, Node provides the once() method. It is used just like the addListener() and on() methods, but allows for responding to the event only once.",o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:T,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Raise and Handle"),o.a.createElement("ul",null,o.a.createElement("li",null,"on() method requires name of the event to handle and callback function which is called when an event is raised."),o.a.createElement("li",null,"emit() function raises the specified event. First parameter is name of the event as a string and then arguments. "),o.a.createElement("li",null,"An event can be emitted with zero or more arguments.")),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:L,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"removeListener"),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:A,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"setMax"),o.a.createElement("div",{style:b},o.a.createElement(f.a,{code:R,language:"js",plugins:["line-numbers"]}))))))}}]),t}(c.Component);t.default=Object(h.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(D)}}]);
//# sourceMappingURL=215.b20f1d2b.chunk.js.map