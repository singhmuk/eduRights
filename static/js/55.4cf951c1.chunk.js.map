{"version":3,"sources":["components/ReactJs/prismCode.js","components/css/sidebar.js","assets/css1.PNG","components/css/enzymes.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","shallow","shallow2","fullDom","statics","selectors","Enzymes","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/55.4cf951c1.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/devtools' className={classes.line}>Devtools</Link></MenuItem>\n        <MenuItem><Link to='/cssbasics' className={classes.line}>CSS</Link></MenuItem>\n        <MenuItem><Link to='/sass' className={classes.line}>SASS</Link></MenuItem>\n        <MenuItem><Link to='/html_1' className={classes.line}>html 1</Link></MenuItem>\n        <MenuItem><Link to='/restApi' className={classes.line}>RestApi</Link></MenuItem>\n        <MenuItem><Link to='/jest' className={classes.line}>Jest</Link></MenuItem>\n        <MenuItem><Link to='/matchers' className={classes.line}>Matchers</Link></MenuItem>\n        <MenuItem><Link to='/enzymes' className={classes.line}>Enzymes</Link></MenuItem>\n        <MenuItem><Link to='/enzyme2' className={classes.line}>Enzymes2</Link></MenuItem>\n        <MenuItem><Link to='/enzyme3' className={classes.line}>Enzymes3</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/css1.cf9107ca.PNG\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../ReactJs/styles.css'\nimport Sidebar from './sidebar';\nimport PrismCode from '../ReactJs/prismCode';\n\nimport Browser from '../../assets/css1.PNG';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\n\nconst shallow = `\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\n\nconst Foo = (props) => <div>\n  <button onClick={() => props.onButtonClick && props.onButtonClick()}></button>\n</div>;\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = shallow(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = shallow(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        <Foo />\n        <Foo />\n        <Foo />\n        <div\n          className=\"icon-star\"\n        />\n        <div\n          className=\"unique\"\n        />\n      </div>\n    ');\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = shallow(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\n\nconst shallow2 = `\nimport React, { Suspense, Component } from \"react\";\nimport { shallow } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = shallow(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"disableLifecycleMethods\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      disableLifecycleMethods: true\n    });\n\n    expect(wrapper.find(\"#user\").text()).toBe(\"Guest\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = shallow(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">dark</div><div id=\\\\\"user\\\\\">Guest</div></div>\"'\n    );\n  });\n\n  test(\"suspenseFallback\", () => {\n    const LazyComponent = React.lazy(() => import(\"../../LazyComponent\"));\n\n    const wrapper = shallow(\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyComponent />\n      </Suspense>,\n      { suspenseFallback: true }\n    );\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <div>\n        Loading...\n      </div>\n    ');\n  });\n});\n`.trim();\n\nconst fullDom = `\nimport { mount } from \"enzyme\";\nimport React from \"react\";\n\nconst Foo = props => (\n  <div>\n    <button onClick={() => props.onButtonClick && props.onButtonClick()} />\n  </div>\n);\n\nconst MyComponent = props => (\n  <div>\n    <Foo />\n    <Foo />\n    <Foo />\n    <div className=\"icon-star\"></div>\n    {props.children}\n  </div>\n);\n\ndescribe(\"<MyComponent />\", () => {\n  it(\"renders three <Foo /> components\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(Foo)).toHaveLength(3);\n  });\n\n  it(\"renders an '.icon-star'\", () => {\n    const wrapper = mount(<MyComponent />);\n    expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n  });\n\n  it(\"renders children when passed in\", () => {\n    const wrapper = mount(\n      <MyComponent>\n        <div className=\"unique\" />\n      </MyComponent>\n    );\n    expect(wrapper.contains(<div className=\"unique\" />)).toEqual(true);\n\n    expect(wrapper).toMatchInlineSnapshot('\n      <MyComponent>\n        <div>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <Foo>\n            <div>\n              <button\n                onClick={[Function]}\n              />\n            </div>\n          </Foo>\n          <div\n            className=\"icon-star\"\n          />\n          <div\n            className=\"unique\"\n          />\n        </div>\n      </MyComponent>\n    );\n  });\n\n  it(\"simulates click events\", () => {\n    const onButtonClick = jest.fn();\n    const wrapper = mount(<Foo onButtonClick={onButtonClick} />);\n    wrapper.find(\"button\").simulate(\"click\");\n    expect(onButtonClick).toHaveBeenCalledTimes(1);\n  });\n});\n`.trim();\n\nconst fullDom2 = `\nimport React, { Component } from \"react\";\nimport { mount } from \"enzyme\";\nimport PropTypes from \"prop-types\";\n\nconst ThemeContext = React.createContext({ theme: \"light\" });\n\nclass ThemeComponent extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={{ theme: this.props.theme || \"dark\" }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nclass CustomComponent extends Component {\n  state = {\n    authenticated: false\n  };\n\n  componentDidMount() {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"theme\">\n          <ThemeContext.Consumer>\n            {value => String(value.theme)}\n          </ThemeContext.Consumer>\n        </div>\n        <div id=\"user\">{this.state.authenticated ? \"User\" : \"Guest\"}</div>\n      </div>\n    );\n  }\n}\n\ndescribe(\"options\", () => {\n  test(\"context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = mount(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n\n  test(\"wrappingComponent\", () => {\n    const wrapper = mount(<CustomComponent></CustomComponent>, {\n      wrappingComponent: ThemeComponent,\n      wrappingComponentProps: { theme: \"custom\" }\n    });\n\n    expect(wrapper.getWrappingComponent().html()).toMatchInlineSnapshot(\n      '\"<div><div id=\\\\\"theme\\\\\">custom</div><div id=\\\\\"user\\\\\">User</div></div>\"'\n    );\n  });\n\n  test(\"attachTo\", () => {\n    document.body.innerHTML = '<div id=\"attach-here\"></div><div id=\"not-here\"></div>';\n    const attachHere = document.getElementById(\"attach-here\");\n\n    mount(<CustomComponent></CustomComponent>, {\n      attachTo: attachHere\n    });\n\n    expect(document.body.innerHTML).toMatchInlineSnapshot(\n      '\"<div id=\\\\\"attach-here\\\\\"><div><div id=\\\\\"theme\\\\\">light</div><div id=\\\\\"user\\\\\">User</div></div></div><div id=\\\\\"not-here\\\\\"></div>\"'\n    );\n  });\n});\n`.trim();\n\nconst statics = `\nimport { render } from \"enzyme\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Foo = props => (\n  <div>\n    <h1>{props.title}</h1>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n    <div className=\"foo-bar\"></div>\n  </div>\n);\n\ndescribe(\"<Foo />\", () => {\n  it(\"renders three '.foo-bar's\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.find(\".foo-bar\")).toHaveLength(3);\n  });\n\n  it(\"rendered the title\", () => {\n    const wrapper = render(<Foo title=\"unique\" />);\n    expect(wrapper.text()).toContain(\"unique\");\n  });\n\n  it(\"renders a div\", () => {\n    const wrapper = render(<Foo />);\n    expect(wrapper.html()).toMatch(/div/);\n  });\n\n  it(\"can pass in context\", () => {\n    function SimpleComponent(props, context) {\n      const { name } = context;\n      return <div>{name}</div>;\n    }\n    SimpleComponent.contextTypes = {\n      name: PropTypes.string\n    };\n\n    const context = { name: \"foo\" };\n    const wrapper = render(<SimpleComponent />, { context });\n    expect(wrapper.text()).toEqual(\"foo\");\n  });\n});\n`.trim();\n\nconst selectors = `\nfunction Foo(props) {\n  return (\n    <div>\n      <button\n        id=\"foo-button\"\n        onClick={() => props.onButtonClick && props.onButtonClick()}\n      />\n    </div>\n  );\n}\n\nfunction MyComponent(props) {\n  return (\n    <div>\n      <Foo anum={3} abool={false} />\n      <Foo anum=\"3\" abool=\"false\" />\n      <Foo id=\"foo-id\" abool={undefined} />\n      <div className=\"icon-star\"></div>\n      <a href=\"foo\">Foo</a>\n      {[1, 2, 3].map(item => (\n        <div key={item}>{item}</div>\n      ))}\n      {props.children}\n    </div>\n  );\n}\n\nMyComponent.displayName = \"My Component\";\n\nlet wrapper;\n\nbeforeEach(() => {\n  wrapper = mount(<MyComponent />);\n});\n\nafterEach(() => {\n  wrapper.unmount();\n});\n\ntest(\".icon-start\", () => {\n  expect(wrapper.find(\".icon-star\")).toHaveLength(1);\n});\n\ntest(\"button#foo-button\", () => {\n  expect(wrapper.find(\"button#foo-button\")).toHaveLength(3);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"a[href=foo]\", () => {\n  expect(wrapper.find('a[href=\"foo\"]')).toHaveLength(1);\n});\n\ntest(\"#foo-id *\", () => {\n  expect(wrapper.find('#foo-id *')).toHaveLength(2);\n});\n\ntest(\"key doesn't work\", () => {\n  expect(wrapper.find('[key=1]')).toHaveLength(0);\n});\n\ntest(\"ref doesn't work\", () => {\n  class SimpleComponent extends React.Component {\n    render() {\n      return <div ref=\"foo\">Ref</div>;\n    }\n  }\n\n  const wrapper = mount(<SimpleComponent />);\n  expect(wrapper.find('[ref=\"foo\"]')).toHaveLength(0);\n});\n\ntest(\"Foo\", () => {\n  expect(wrapper.find(Foo)).toHaveLength(3);\n});\n\ntest.skip(\"My Component\", () => {\n  expect(wrapper.find(\"My Component\")).toHaveLength(1);\n});\n\ntest(\"anum={3} abool={false}\", () => {\n  expect(wrapper.find(\"[anum=3][abool=false]\")).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: 3,\n      abool: false\n    })\n  ).toHaveLength(1);\n});\n\ntest('anum=\"3\" abool=\"false\"', () => {\n  expect(wrapper.find('[anum=\"3\"][abool=\"false\"]')).toHaveLength(1);\n\n  expect(\n    wrapper.find({\n      anum: \"3\",\n      abool: \"false\"\n    })\n  ).toHaveLength(1);\n});\n\ntest('abool={undefined}', () => {\n  // wont work\n  // expect(\n  //   wrapper.find({\n  //     aundefined: undefined\n  //   })\n  // ).toHaveLength(1);\n  expect(\n    wrapper.findWhere(n => n.is(Foo) && n.props().abool === undefined)\n  ).toHaveLength(1);\n});\n`.trim();\n\n\n\nclass Enzymes extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n    <Grid item xs={10}>\n    <Paper className={classes.paper}>\n    <List>\n      <h3>2-shallow-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={shallow}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>shallow-rendering</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={shallow2}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>3-full-dom-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={fullDom}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>full-dom-rendering</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={fullDom}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>4-static-rendering</h3>\n      <div style={titles}>\n      <PrismCode\n        code={statics}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      \n      <h3>5-selectors</h3>\n      <div style={titles}>\n      <PrismCode\n        code={selectors}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Enzymes));\n"],"sourceRoot":""}