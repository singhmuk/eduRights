(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[52],{140:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(45),a=n(28),o=n(136),s=n(137),i=n(139),l=n(0),c=n.n(l),u=n(138),m=n.n(u),p=(n(59),function(e){function t(e){var n;return Object(r.a)(this,t),(n=Object(o.a)(this,Object(s.a)(t).call(this,e))).highlight=function(){n.ref&&n.ref.current&&m.a.highlightElement(n.ref.current)},n.ref=c.a.createRef(),n}return Object(i.a)(t,e),Object(a.a)(t,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,t=e.code,n=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(n)},t.trim()))}}]),t}(c.a.Component))},141:function(e,t,n){},145:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(0),a=n.n(r),o=n(26),s=n(297),i=n(295),l=n(114),c=Object(l.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function u(){var e=c();return a.a.createElement("div",{className:e.root},a.a.createElement(i.a,null,a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/apiLogic3",className:e.line},"new updated")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/ngRepeat",className:e.line},"NgRepeat")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/ngModel",className:e.line},"ng-model")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/scope",className:e.line},"Scope")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/filter",className:e.line},"Events")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/directives",className:e.line},"Directives")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/angularConditions",className:e.line},"Condition")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/angularlFlters",className:e.line},"Fiters")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/services",className:e.line},"Services")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/validations",className:e.line},"Validations")),a.a.createElement("p",null,"Angular 12"),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/introAngularjs",className:e.line},"Intro")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/flows",className:e.line},"Interviews")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/angularDir2",className:e.line},"Architecture")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/metedata",className:e.line},"MetaData")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/ngFor",className:e.line},"NgFor")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/pipes",className:e.line},"Pipes")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/anguRoutes",className:e.line},"Routes")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/lifeCycleAng",className:e.line},"LifeCycle")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/angularSelector",className:e.line},"Change Detection")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/angularDir",className:e.line},"Custom Elements")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/viewProvider",className:e.line},"ViewProvider")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/dynamicallyLoad",className:e.line},"DynamicallyLoad")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/rxjs",className:e.line},"Rxjs")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/ngrxCurd",className:e.line},"Ngrx")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/ngrxCounter",className:e.line},"NgrxCounter")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/projection",className:e.line},"Pro-Input-Output-Iterates-",a.a.createElement("br",null),"IncrDecr-Toggle-keyIn-If")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/angularCurd",className:e.line},"Curd")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/filterPlace",className:e.line},"FilterPlace-get-live-",a.a.createElement("br",null),"Agree-NoName-Excel")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/radioButton",className:e.line},"Radio-s/h-add-",a.a.createElement("br",null),"version-Launch-Font")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/multiCheck",className:e.line},"MultiSel-MultiCheck")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/services12",className:e.line},"Services")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/dropdownsAngu",className:e.line},"pick-ddSelectData")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/vote",className:e.line},"Vote")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/debounce",className:e.line},"Debounce")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/loader",className:e.line},"Loader")),a.a.createElement(s.a,null,a.a.createElement(o.b,{to:"/paginations",className:e.line},"Paginations"))),a.a.createElement("div",null))}},165:function(e,t,n){e.exports=n.p+"static/media/ngrx.88e0b61d.png"},501:function(e,t,n){"use strict";n.r(t);var r=n(45),a=n(28),o=n(136),s=n(137),i=n(139),l=n(0),c=n.n(l),u=n(138),m=n.n(u),p=n(120),d=n(57),g=n(296),E=n(5),b=(n(141),n(145)),f=n(140),U=n(165),h=n.n(U),y={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},v="\n//user-action.ts\nimport {User} from '../models/user';\n\nexport const USER_LIST_REQUEST = 'user list request';\nexport const USER_LIST_SUCCESS = 'user list success';\nexport const USER_DELETE = 'user delete';\nexport const USER_UPDATE = 'user update';\nexport const USER_ADD = 'user add';\nexport const USER_LIST_ERROR = 'user list error';\n\nexport class UserListRequestAction {\n  readonly type = USER_LIST_REQUEST;\n}\n\nexport class UserDeleteAction {\n  readonly type = USER_DELETE;\n\n  constructor(public payload?: { id: number }) {\n  }\n}\n\nexport class UserUpdateAction {\n  readonly type = USER_UPDATE;\n\n  constructor(public payload?: { data: User }) {\n  }\n}\n\nexport class UserAddAction {\n  readonly type = USER_ADD;\n\n  constructor(public payload?: { data: User }) {\n  }\n}\n\nexport class UserListErrorAction {\n  readonly type = USER_LIST_ERROR;\n}\n\nexport class UserListSuccessAction {\n  readonly type = USER_LIST_SUCCESS;\n\n  constructor(public payload?: { data: User[] }) {\n  }\n}\n\n\n\n//index.ts\nimport {Action as NgRxAction} from '@ngrx/store';\n\nexport interface Action extends NgRxAction {\n  payload?: any;\n}".trim(),S="\n//user-reducer.ts\nimport {User} from '../models/user';\nimport {Action} from '../actions';\nimport {USER_ADD, USER_DELETE, USER_LIST_ERROR, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_UPDATE} \n        from '../actions/user-action';\nimport {StoreUtility} from '../utils/store-utility';\nimport {createSelector} from '@ngrx/store';\n\nexport interface UserReducerState {\n  loading: boolean;\n  loaded: boolean;\n  error: boolean;\n  entities: { [id: number]: User };\n  ids: number[];\n}\n\nconst initialState: UserReducerState = {\n  loaded: false,\n  loading: false,\n  error: false,\n  entities: {},\n  ids: []\n};\n\nexport function UserReducer(state = initialState, action: Action): UserReducerState {\n  switch (action.type) {\n    case USER_LIST_REQUEST: {\n      return {...state, loading: true};\n    }\n    case USER_DELETE: {\n      const id = action.payload.id;\n      const newIds = state.ids.filter(elem => elem !== id);\n      const newEntities = StoreUtility.removeKey(state.entities, id);\n      return {...state, ...{entities: newEntities, ids: newIds}};\n    }\n    case USER_UPDATE: {\n      const user = action.payload.data;\n      const entity = {[user.id]: user};\n      const updatedEntities = {...state.entities, ...entity};\n      return {...state, ...{entities: updatedEntities}};\n    }\n    case USER_ADD: {\n      const user = action.payload.data;\n      const entity = {[user.id]: user};\n      const newEntities = {...state.entities, ...entity};\n      const newIds = StoreUtility.filterDuplicateIds([...state.ids, user.id]);\n      return {...state, ...{entities: newEntities, ids: newIds}};\n\n    }\n    case USER_LIST_ERROR: {\n      return {...state, error: true, loading: false};\n    }\n    case USER_LIST_SUCCESS: {\n      const users = action.payload.data;\n      const obj = StoreUtility.normalize(users);\n      const newEntities = {...state.entities, ...obj};\n      const ids = users.map(user => user.id);\n      const newIds = StoreUtility.filterDuplicateIds([...state.ids, ...ids]);\n      return {\n        ...state, ...{\n          loaded: true,\n          loading: false, error: false,\n          entities: newEntities, ids: newIds\n        }\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// selectors\nexport const getLoading = (state: UserReducerState) => state.loading;\nexport const getLoaded = (state: UserReducerState) => state.loaded;\nexport const getEntities = (state: UserReducerState) => state.entities;\nexport const getIds = (state: UserReducerState) => state.ids;\nexport const getUsers = createSelector(getEntities,\n  (entities) => StoreUtility.unNormalized(entities));\nexport const getError = (state: UserReducerState) => state.error;\n\n\n\n//index.ts\nimport * as fromUser from './user-reducer';\nimport {ActionReducerMap, createSelector} from '@ngrx/store';\n\n\nexport interface RootReducerState {\n  users: fromUser.UserReducerState;\n}\n\nexport const rootReducer: ActionReducerMap<RootReducerState> = {\n  users: fromUser.UserReducer,\n};\n\nexport const getUserState = (state: RootReducerState) => state.users;\n\nexport const getUserLoaded = createSelector(getUserState, fromUser.getLoaded);\nexport const getUserLoading = createSelector(getUserState, fromUser.getLoading);\nexport const getUserEntities = createSelector(getUserState, fromUser.getEntities);\nexport const getUsers = createSelector(getUserState, fromUser.getUsers);\nexport const getUserError = createSelector(getUserState, fromUser.getError);\n\nexport const getUserById = (state: RootReducerState, id: number) => {\n  const entities = getUserEntities(state);\n  return entities[id];\n};\n\nexport const getPostById = (state: RootReducerState, id: number) => {\n  const entities = getUserEntities(state);\n  return entities[id];\n};".trim(),R="\n//api.service.ts\nimport {Injectable} from '@angular/core';\nimport {HttpService} from './http.service';\nimport {map} from 'rxjs/operators';\nimport {User} from '../models/user';\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class ApiService {\n  constructor(private httpService: HttpService) {\n  }\n\n  getAllUser(): Observable<User[]> {\n    return this.httpService.get('/users')\n      .pipe(map(data => data as User[]));\n  }\n\n  getUser(id: number): Observable<User> {\n    return this.httpService.get('/users/' + id);\n  }\n}\n\n\n\n//http.service.ts\nimport {HttpClient} from '@angular/common/http';\nimport {catchError} from 'rxjs/operators';\nimport {Observable, throwError} from 'rxjs';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class HttpService {\n  private baseUrl = 'https://jsonplaceholder.typicode.com';\n  AUTH_TOKEN = 'auth_token';\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  get(url: string, params?: any): Observable<any> {\n    const data = {params, headers: this.getAuthHeader()};\n    return this.httpClient\n      .get(this.baseUrl + url, data).pipe(catchError(this.errorHandler.bind(this)));\n  }\n\n  private errorHandler(response: any) {\n    const error = response.error;\n    const keys = Object.keys(error);\n    const key = keys[0];\n    let message = error[key];\n    if (response.status === 401) {\n      \n    }\n    if (error[key] instanceof Array) {\n      message = error[key][0];\n    }\n    if (key === 'isTrusted') {\n      // this will occur when not connected to internet\n    } else {\n      message = key + ' : ' + message;\n    }\n    // call snackbar and show error with message\n    return throwError({messages: message, error});\n  }\n\n  private getAuthHeader(): { [header: string]: string | string[]; } {\n    return {\n      Authorization: 'Bearer '$'{ localStorage.getItem(this.AUTH_TOKEN)}'\n    };\n  }\n}\n\n\n\n//youtube-repository.ts\nimport {Injectable} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {\n  getUserById,\n  getUserError,\n  getUserLoaded,\n  getUserLoading,\n  getUsers,\n  RootReducerState\n} from '../reducers';\nimport {combineLatest, Observable} from 'rxjs';\nimport {\n  UserAddAction,\n  UserDeleteAction,\n  UserListErrorAction,\n  UserListRequestAction,\n  UserListSuccessAction,\n  UserUpdateAction\n} from '../actions/user-action';\nimport {ApiService} from './api.service';\nimport {User} from '../models/user';\nimport {take} from 'rxjs/operators';\n\n\n@Injectable()\nexport class YoutubeRepository {\n  constructor(private store: Store<RootReducerState>, private apiService: ApiService) {\n  }\n\n  getUserList(force = false): [Observable<boolean>, Observable<User[]>, Observable<boolean>] {\n    const loading$ = this.store.select(getUserLoading);\n    const loaded$ = this.store.select(getUserLoaded);\n    const getUserData$ = this.store.select(getUsers);\n    const getError$ = this.store.select(getUserError);\n    combineLatest([loaded$, loading$]).pipe(take(1)).subscribe((data) => {\n      if ((!data[0] && !data[1]) || force) {\n        this.store.dispatch(new UserListRequestAction());\n        this.apiService.getAllUser().subscribe(res => {\n          this.store.dispatch(new UserListSuccessAction({data: res}));\n        }, error => {\n          this.store.dispatch(new UserListErrorAction());\n        });\n      }\n    });\n    return [loading$, getUserData$, getError$];\n  }\n\n  deleteUser(id: number) {\n    // first we will call actual delete api\n    this.store.dispatch(new UserDeleteAction({id}));\n  }\n\n  updateUser(data: User) {\n// first send details to actual api\n    this.store.dispatch(new UserUpdateAction({data}));\n  }\n\n  addUser(data: User) {\n    // first call api to add a user and then update it in store\n    this.store.dispatch(new UserAddAction({data}));\n  }\n\n  getUserById(id: number, force = false) {\n    // get user from reducer if exist otherwise from api\n    const user$ = this.store.select(state => getUserById(state, id));\n    user$.pipe(take(1)).subscribe(res => {\n      if (force || !res) {\n        return this.apiService.getUser(id).subscribe(data => {\n          this.store.dispatch(new UserAddAction({data}));\n        });\n      }\n      return res;\n    });\n    return user$;\n  }\n}".trim(),A='\n//store-utility.ts\nexport class StoreUtility {\n  // [{id,...},{id,..}] -> normal array\n  // entities: {id:{}} -> normalized format\n  static normalize(entityArray: Entity[]) {\n    return entityArray.reduce((previousValue, currentValue) => {\n      return {...previousValue, ...{[currentValue.id]: currentValue}};\n    }, {});\n  }\n\n  // {dsdsd:{id:dsdsd,name:"dasds"}}; -> entities\n  // [{id:dsdsd,name:"dasds"}];\n  static unNormalized(entities: { [id: number]: any }) {\n    if (!entities) {\n      return [];\n    } else {\n      return Object.keys(entities).map(key => entities[key]);\n    }\n  }\n\n  // [1,2,3,4,5,1];\n  static filterDuplicateIds(ids: number[]) {\n    return ids.filter((elem, index, self) => index === self.indexOf(elem));\n  }\n\n  static removeKey(entities: { [id: number]: any }, id: any) {\n    const newObj = {...entities};\n    delete newObj[id];\n    return newObj;\n  }\n}\n\ninterface Entity {\n  id: any;\n}'.trim(),x="\n//user.ts\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n  address: Address;\n  username: string;\n}\n\ninterface Address {\n  street: string;\n  suite: string;\n  'city': string;\n  'zipcode': string;\n  geo: Geo;\n}\n\ninterface Geo {\n  'lat': string;\n  'lng': string;\n}".trim(),M="\n//users.component.ts\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {User} from '../models/user';\nimport {YoutubeRepository} from '../services/youtube-repository';\nimport {takeWhile} from 'rxjs/operators';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UpdateUserComponent} from '../components/update-user.component';\n\n@Component({\n  selector: 'youtube-users',\n  template: '\n  < div >\n  <youtube-user-list * ngIf=\"!this.loading && !this.error\"[users] = \"this.users\" ></youtube - user - list >\n    <mat-spinner * ngIf=\"this.loading\" ></mat - spinner >\n      <button * ngIf=\"!this.loading && !this.error\"(click) = \"addUser()\" > Add User</button >\n    </div >\n  ',\n})\n\nexport class UsersComponent implements OnInit, OnDestroy {\n  users: User[] = [];\n  loading = false;\n  error = false;\n  isAlive = true;\n\n  constructor(private youtubeRepository: YoutubeRepository, private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.fetchData();\n  }\n\n  ngOnDestroy() {\n    this.isAlive = false;\n  }\n\n  fetchData() {\n    const observer$ = this.youtubeRepository.getUserList();\n    const userData$ = observer$[1];\n    const loading$ = observer$[0];\n    const error$ = observer$[2];\n    userData$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\n      this.users = data;\n    });\n    loading$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\n      this.loading = data;\n    });\n    error$.pipe(takeWhile(() => this.isAlive)).subscribe(data => {\n      this.error = data;\n    });\n  }\n\n  tryAgain() {\n    this.youtubeRepository.getUserList(true);\n  }\n\n  addUser() {\n    this.dialog.open(UpdateUserComponent, {\n    });\n  }\n}\n\n\n// reducer -> it contain a state (global state)\n// it will take an action -> it will return a new state\n\n// action -> it will contain a payload and a type\n\n// Dependency Injection Principle\n// you should not depend on something directly\n// component -> youtube repo -> apiService -> http Service -> http client\n\n\n\n//view-user.component.ts\nimport {Component, OnDestroy} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {YoutubeRepository} from '../services/youtube-repository';\nimport {filter, map, switchMap, takeWhile} from 'rxjs/operators';\nimport {User} from '../models/user';\n\n@Component({\n  selector: 'youtube-view-user',\n  template: '\n    <h1> {{ this.user ?this.user.email: ''}}</h1>\n    <h1>{{ this.user ? this.user.name : '' }}</h1>\n',\n})\n\nexport class ViewUserComponent implements OnDestroy {\n  isAlive = true;\n  user: User;\n\n  constructor(private route: ActivatedRoute, private youtubeRepo: YoutubeRepository) {\n    this.fetchData();\n  }\n\n  ngOnDestroy() {\n    this.isAlive = false;\n  }\n\n  fetchData() {\n    const user$ = this.route.params.pipe(map(data => data.id),\n      takeWhile(() => this.isAlive),\n      switchMap((id) => {\n        return this.youtubeRepo.getUserById(id);\n      }), filter(res => !!res));\n    user$.subscribe(data => {\n      this.user = data;\n    });\n  }\n}".trim(),C="\n//layout/youtube-layout.component.ts\n@Component({\n  selector: 'youtube-layout',\n  template: '\n  < button routerLink = \"\"[routerLinkActiveOptions] = \"{exact:true}\" routerLinkActive = \"selected\" > Users</button>\n    <router-outlet></router-outlet>\n      ',\n    })\n\nexport class LayoutComponent {\n\n  constructor() {\n  }\n}\n\n\n//user-list.component.ts\n@Component({\n  selector: 'youtube-user-list',\n  template: '\n  < div fxLayout = \"row wrap\" >\n    <youtube-user-card [user] = \"user\" * ngFor=\"let user of users\" ></youtube - user - card >\n    </div >\n  ',\n})\n\nexport class UserListComponent {\n  @Input() users: User[];\n  constructor() {\n  }\n}\n\n\n//user-card.component.ts\nimport {Component, Input} from '@angular/core';\nimport {User} from '../models/user';\nimport {YoutubeRepository} from '../services/youtube-repository';\nimport {MatDialog} from '@angular/material/dialog';\nimport {UpdateUserComponent} from './update-user.component';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'youtube-user-card',\n  template: '\n  <mat-card(click)=\"open()\" >\n      <li>{{this.user.name}}</li>\n      <li>{{this.user.email}}</li>\n      <button (click) = \"delete()\" > Delete</button >\n  <button (click) = \"update()\" > Update</button >\n    </mat-card >\n  ',\n})\n\nexport class UserCardComponent {\n  @Input() user: User;\n\n  constructor(private youtubeRepo: YoutubeRepository,\n              private dialog: MatDialog, private router: Router) {\n  }\n\n  delete() {\n    this.youtubeRepo.deleteUser(this.user.id);\n  }\n\n  update() {\n    this.dialog.open(UpdateUserComponent, {\n      data: this.user\n    });\n  }\n\n  open() {\n    this.router.navigate(['user', this.user.id]);\n  }\n}\n\n\n\n//update-user.component.ts\nimport {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {User} from '../models/user';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {YoutubeRepository} from '../services/youtube-repository';\n\n@Component({\n  selector: 'youtube-update-user',\n  template: '\n  <form[formGroup]=\"userForm\"(ngSubmit) = \"this.userForm.valid && this.addOrUpdateUser()\" >\n        <mat-form-field>\n          <input formControlName=\"email\" matInput placeholder=\"email\"/>\n          <mat-error>Valid email is Required</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input formControlName=\"name\" matInput placeholder=\"username\"/>\n          <mat-error>Name is Required</mat-error>\n        </mat-form-field>\n        <button type=\"submit\">{{this.data ? 'Update' : 'Add'}}</button>\n    </form >\n  ',\n})\n\nexport class UpdateUserComponent implements OnInit {\n  userForm: FormGroup;\n\n  constructor(private dialogRef: MatDialogRef<UpdateUserComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: User, private youtubeRepo: YoutubeRepository) {\n  }\n\n  ngOnInit() {\n    this.userForm = new FormGroup({\n      name: new FormControl(this.data ? this.data.name : null, [Validators.required]),\n      email: new FormControl(this.data ? this.data.email : null, [Validators.required]),\n    });\n  }\n\n\n  addOrUpdateUser() {\n    if (this.data) {\n      this.updateUser();\n    } else {\n      this.addUser();\n    }\n  }\n\n  updateUser() {\n    const updatedUser = {...this.data, ...this.userForm.value};\n    this.youtubeRepo.updateUser(updatedUser);\n    this.dialogRef.close();\n  }\n\n  addUser() {\n    this.youtubeRepo.addUser(this.userForm.value);\n    this.dialogRef.close();\n  }\n}".trim(),w="\n//app-routing.module.ts\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {UsersComponent} from './containers/users.component';\nimport {ViewUserComponent} from './containers/view-user.component';\n\n\nconst routes: Routes = [{\n  path: '', component: UsersComponent,\n  children: [\n    {path: 'user/:id', component: ViewUserComponent},\n  ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n\n\n//material.module.ts\nimport {NgModule} from '@angular/core';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatInputModule} from '@angular/material/input';\n\nconst data = [MatToolbarModule,\n  MatButtonModule, MatCardModule, MatProgressSpinnerModule,\n  MatIconModule, MatFormFieldModule, MatDialogModule, MatInputModule\n];\n\n@NgModule({\n  imports: data,\n  exports: data\n})\nexport class MaterialModule {}\n\n\n\n//app.component.ts\n@Component({\n  selector: 'youtube-root',\n  template: '<router - outlet ></router-outlet>',\n})\nexport class AppComponent {\n  constructor() {\n  }\n}\n\n// my component are dependent on api service\n// api service -> http service\n// http service -> http client\n\n\n\n//app.module.ts\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {FlexLayoutModule, FlexModule} from '@angular/flex-layout';\nimport {HttpClientModule} from '@angular/common/http';\nimport {UsersComponent} from './containers/users.component';\nimport {LayoutComponent} from './components/layout/youtube-layout.component';\nimport {MaterialModule} from './material.module';\nimport {HttpService} from './services/http.service';\nimport {ApiService} from './services/api.service';\nimport {UserCardComponent} from './components/user-card.component';\nimport {UserListComponent} from './components/user-list.component';\nimport {StoreModule} from '@ngrx/store';\nimport {rootReducer} from './reducers';\nimport {YoutubeRepository} from './services/youtube-repository';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {environment} from '../environments/environment';\nimport {UpdateUserComponent} from './components/update-user.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {ViewUserComponent} from './containers/view-user.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UsersComponent,\n    LayoutComponent,\n    UserCardComponent,\n    UserListComponent,\n    UpdateUserComponent,\n    ViewUserComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    FlexModule,\n    HttpClientModule,\n    StoreModule.forRoot(rootReducer),\n    StoreDevtoolsModule.instrument({maxAge: 25, logOnly: environment.production}),\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  providers: [HttpService, ApiService, YoutubeRepository],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}".trim(),D=function(e){function t(){return Object(r.a)(this,t),Object(o.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(i.a)(t,e),Object(a.a)(t,[{key:"componentDidMount",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(p.a,{container:!0},c.a.createElement(p.a,{item:!0,xs:2},c.a.createElement(d.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(b.a,null)))),c.a.createElement(p.a,{item:!0,xs:10},c.a.createElement(d.a,{className:e.paper},c.a.createElement(g.a,null,c.a.createElement("h3",null,"NGRX"),"NgRx is a framework for building reactive applications in Angular. NgRx provides libraries for:",c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("b",null,"Managing global and local state."),c.a.createElement("ul",null,c.a.createElement("li",null,"Isolation of side effects to promote a cleaner component architecture."),c.a.createElement("li",null,"Entity collection management."),c.a.createElement("li",null,"Integration with the Angular Router.")),c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("b",null,"State:"),c.a.createElement("br",null),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,"Store: "),"RxJS powered global state management for Angular apps, inspired by Redux."),c.a.createElement("li",null,c.a.createElement("b",null,"Effects: "),"Side effect model for @ngrx/store."),c.a.createElement("li",null,c.a.createElement("b",null,"Router Store: "),"Bindings to connect the Angular Router to @ngrx/store."),c.a.createElement("li",null,c.a.createElement("b",null,"Entity: "),"Entity State adapter for managing record collections."),c.a.createElement("li",null,c.a.createElement("b",null,"ComponentStore: "),"Standalone library for managing local/ component state.")),c.a.createElement("br",null),c.a.createElement("b",null,"Data: "),"Extension for simplified entity data management.",c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("b",null,"View:"),"Component - Extension for fully reactive Angular applications.",c.a.createElement("img",{src:h.a,alt:"Theata",className:"responsive"}),c.a.createElement("br",null),c.a.createElement("h3",null,"Actions"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:v,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Reducers"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:S,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Services"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:R,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Utils"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:A,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Models"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:x,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Containers"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:M,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Components"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:C,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Roots"),c.a.createElement("div",{style:y},c.a.createElement(f.a,{code:w,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null)))))}}]),t}(l.Component);t.default=Object(E.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(D)}}]);
//# sourceMappingURL=52.73c79250.chunk.js.map