{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","assets/ML/output.png","components/ml/deepMl/gredient_decents.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","cluster","gradientPy","chains","Gradient","setTimeout","highlightAll","container","item","xs","src","gradient","alt","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/60.e0b86c04.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/output.97680b5f.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport gradient from '../../../assets/ML/output.png'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst cluster = `\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\ndef gradient_descent(x,y):\n    m_curr = b_curr = 0\n    rate = 0.01\n    n = len(x)\n    plt.scatter(x,y,color='red',marker='+',linewidth='5')\n    for i in range(10000):\n        y_predicted = m_curr * x + b_curr\n        print (m_curr,b_curr, i)\n        plt.plot(x,y_predicted,color='green')\n        md = -(2/n)*sum(x*(y-y_predicted))\n        yd = -(2/n)*sum(y-y_predicted)\n        m_curr = m_curr - rate * md\n        b_curr = b_curr - rate * yd\n        \n        \nx = np.array([1,2,3,4,5])\ny = np.array([5,7,9,11,13])\n\ngradient_descent(x,y) \n`.trim();\n\nconst gradientPy = `\nimport numpy as np\n\ndef gradient_descent(x,y):\n    m=b = 0\n    iterations = 1000\n    n = len(x)\n    learning_rate = 0.08\n\n    for i in range(iterations):\n        y_predicted = m*x + b\n        cost = (1/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2/n)*sum(x*(y-y_predicted))\n        bd = -(2/n)*sum(y-y_predicted)\n        m = m-learning_rate * md\n        b = b-learning_rate * bd\n        print (\"m {}, b {}, cost {} iteration {}\".format(m,b,cost, i))\n\nx = np.array([1,2,3,4,5])\ny = np.array([5,7,9,11,13])\n\ngradient_descent(x,y)`.trim();\n\nconst chains = `\ndl/dw = dl/de * de/dy * dy/dw\n`.trim();\n\nclass Gradient extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Gradient descent</h3>\n              Gradient descent is an optimization algorithm that's used when training a ML model. It's based on a\n              convex function and tweaks its parameters iteratively to minimize a given function to its local minimum.\n              <br />\n              <br />\n              <b>A gradient measures how much the output of a function changes if you change the inputs a little bit</b>\n              <br />\n\n              <h3>WHAT IS A GRADIENT?</h3>\n              A gradient is a derivative of a function that has more than one input variable.\n              Known as the slope of a function, the gradient simply measures the change in all weights w.r.t the change\n              in error.\n              <br />\n              <br />\n              <b>Importance of the Learning Rate:</b>\n              <ul>\n                <li>How big the steps are gradient descent takes into the direction of the local minimum are determined by\n                  the learning rate, which figures out how fast/ slow we will move towards the optimal weights.</li>\n                <li>To reach the local minimum we must set the learning rate to an appropriate value, which is neither\n                  too low nor too high. This is important because if the steps it takes are too big, it may not reach\n                  the local minimum because it bounces back and forth between the convex function of gradient descent.\n                  If we set the learning rate to a very small value, gradient descent will eventually reach the local minimum but\n                  that may take a while. </li>\n              </ul>\n              <br />\n\n              <h3>Types of Gradient Descent</h3>\n              Three types based on amount of data they use.\n              <ul>\n                <li><b>BATCH GRADIENT DESCENT(vanilla gradient descen): </b>Calculates the error.</li>\n                <ul>\n                  <li>Advantages of batch gradient descent are its computational efficient,it produces a\n                    stable error gradient and a stable convergence.</li>\n                  <li>we go through all training samples and calculate cumulative error.</li>\n                  <li>Now back propagate and adjust weights.</li>\n                  <li>Good for small training set.</li>\n                </ul>\n                <br />\n                <li><b>STOCHASTIC GRADIENT DESCENT: </b>It updates the parameters for each training example one by one.</li>\n                <ul>\n                  <li>Use one(randomly picked) sample for a forward pass and then adjust weights.</li>\n                  <li>Good when training set is very big and we don't want too much computation.</li>\n                </ul>\n                <br />\n                <li><b>MINI-BATCH GRADIENT DESCENT: </b>Combination of the concepts of SGD and batch gradient descent. </li>\n                <ul>\n                  <li>It simply splits the training dataset into small batches and performs an update for each of\n                    those batches. This creates a balance between the robustness of SGD and the\n                    efficiency of batch gradient descent.</li>\n                  <li>Is like SGD instead of choosing 1 randomly picked training sample, We will use a batch of randomly picked training samples.</li>\n                  <li>Use a batch of (randomly picked) samples for a forward pass and then adjust weights.</li>\n                  <li>Common mini-batch sizes range between 50 and 256.</li>\n                </ul>\n              </ul>\n              <br />\n\n              <img src={gradient} alt=\"gradient\" className=\"responsive\" style={redesign} />\n              <div style={titles}>\n                <PrismCode\n                  code={cluster}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>With Python</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={gradientPy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Chain Rule</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={chains}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Gradient));\n"],"sourceRoot":""}