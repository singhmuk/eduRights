{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","assets/ML/scatterplot.JPG","assets/ML/error_equation.jpg","assets/ML/linear_equation.png","assets/ML/equation.jpg","components/ml/deepMl/leanearRegression.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","oneVarri","linearPy","independent","testings","LeanearRegression","setTimeout","highlightAll","container","item","xs","src","ScatterPlot","alt","style","ErrorEqu","LinearEqu","Equations","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/13.810725ce.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/scatterplot.1f852c34.JPG\";","module.exports = __webpack_public_path__ + \"static/media/error_equation.95823a1e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/linear_equation.959a22e0.png\";","module.exports = __webpack_public_path__ + \"static/media/equation.733bdc33.jpg\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport ScatterPlot from '../../../assets/ML/scatterplot.JPG'\nimport ErrorEqu from '../../../assets/ML/error_equation.jpg'\nimport LinearEqu from '../../../assets/ML/linear_equation.png'\nimport Equations from '../../../assets/ML/equation.jpg'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst oneVarri = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('homeprices.csv')\n\n%matplotlib inline\nplt.xlabel('area')\nplt.ylabel('price')\nplt.scatter(df.area,df.price,color='red',marker='+')\n\nnew_df = df.drop('price',axis='columns')\nprice = df.price\n\nreg = linear_model.LinearRegression()                         # Create linear regression object\nreg.fit(new_df,price)\n\nreg.predict([[3300]])                                         #Predict price of a home with area = 3300 sqr ft.\nreg.coef_\nreg.intercept_\n\n\n#Y = m * X + b (m is coefficient and b is intercept)\n3300*135.78767123 + 180616.43835616432\n\nreg.predict([[5000]])\n\n#Generate CSV file with list of home price predictions\narea_df = pd.read_csv(\"areas.csv\")\np = reg.predict(area_df)\narea_df['prices']=p\n\narea_df.to_csv(\"prediction.csv\")\n`.trim();\n\nconst linearPy = `\n# Data Preprocessing Template\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndataset = pd.read_csv('Data.csv')\n\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n\nfrom sklearn.preprocessing import StandardScaler                                    # Feature Scaling\nsc_X = StandardScaler()\nsc_y = StandardScaler()\n\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\ny_train = sc_y.fit_transform(y_train)\n`.trim();\n\nconst independent = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\n\ndf = pd.read_csv('homeprices.csv')\n\ndf.bedrooms.median()                                                          #Fill NA values with median value of a column.\ndf.bedrooms = df.bedrooms.fillna(df.bedrooms.median())\n\nreg = linear_model.LinearRegression()\nreg.fit(df.drop('price',axis='columns'),df.price)\n\nreg.predict([[3000, 3, 40]])\n112.06244194*3000 + 23388.88007794*3 + -3231.71790863*40 + 221323.00186540384\n\nreg.predict([[2500, 4, 5]])\n`.trim();\n\n\n\n\nconst testings = `\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n    from sklearn.model_selection import train_test_split\n    from sklearn import datasets\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4)\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n\n    regressor = LinearRegression(learning_rate=0.01, n_iters=1000)\n    regressor.fit(X_train, y_train)\n    predictions = regressor.predict(X_test)\n\n    mse = mean_squared_error(y_test, predictions)\n    print(\"MSE:\", mse)\n\n    accu = r2_score(y_test, predictions)\n    print(\"Accuracy:\", accu)\n\n    y_pred_line = regressor.predict(X)\n    cmap = plt.get_cmap(\"viridis\")\n    fig = plt.figure(figsize=(8, 6))\n    m1 = plt.scatter(X_train, y_train, color=cmap(0.9), s=10)\n    m2 = plt.scatter(X_test, y_test, color=cmap(0.5), s=10)\n    plt.plot(X, y_pred_line, color=\"black\", linewidth=2, label=\"Prediction\")\n    plt.show()`.trim();\n\n\nclass LeanearRegression extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Regression</h3>\n              Used to find the relationship between variables.\n              <br />\n              <ul>\n                <li><b>R-Squared: </b> If there are no relationship between the values of x-axis and the values of\n                  y-axis then linear regression can not be used to predict anything.\n                  <br />\n                  The relationship is measured with a value of r-squared. The r-squared value ranges from -1 to 1, where 0 means no relationship,\n                  and 1, or -1, means 100% related.</li>\n                <br />\n\n                <li><b>Predict Future Values: </b>Now we can use the information we have gathered to predict future values.\n                  <br />\n                  <b>Ex.</b> Predict the speed of a 10 years old car. </li>\n              </ul>\n              <br />\n\n              <h3>Logistic regression</h3>\n              It is a classification algorithm, used to predict binary outcomes for a given set of Independent Variables. The\n              dependent Variables outcome is discrete.\n              <br />\n              <br />\n\n              <b>How is linear and logistic regression different</b>\n\n              <table>\n                <tr>\n                  <th>Linear Regration</th>\n                  <th>Logistic Regression</th>\n                </tr>\n                <tr>\n                  <td>Used to solve Regression problems. The response Variable are continuous in nature. It helps\n                    estimate the dependent Variable in the Independent Variable. Is a straight line.</td>\n                  <td>Used to solve classification Problems. The response variable is categorical in nature. It helps calculate the possibility of a\n                    particular event taking place. An<b> S-curve (S = Sigmoid)</b>.</td>\n                </tr>\n                <tr>\n                  <td><i><b>Linear regression is used to predict the continuous dependent variable using a given set of independent variables.</b></i></td>\n                  <td><i><b>Logistic Regression is used to predict the categorical dependent variable using a given set of independent variables.</b></i></td>\n                </tr>\n                <tr>\n                  <td>We predict the value of continuous variables.</td>\n                  <td>We predict the values of categorical variables.</td>\n                </tr>\n                <tr>\n                  <td><i><b>We find the best fit line, by which we can easily predict the output.</b></i></td>\n                  <td><i><b>We find the S-curve by which we can classify the samples.</b></i></td>\n                </tr>\n                <tr>\n                  <td>Least square estimation method is used for estimation of accuracy.</td>\n                  <td>Maximum likelihood estimation method is used for estimation of accuracy.</td>\n                </tr>\n                <tr>\n                  <td><i><b>The output must be a continuous value, such as price, age, etc.</b></i></td>\n                  <td><i><b>The output must be a Categorical value such as 0 or 1, Yes or No, etc.</b></i></td>\n                </tr>\n                <tr>\n                  <td>There may be collinearity between the independent variables.</td>\n                  <td>There should not be collinearity between the independent variable.</td>\n                </tr>\n              </table>\n              <br />\n\n              <h3>Applications of Logistic Regression</h3>\n              <ul>\n                <li>Image Segmentation and Categorization Geographic Image Processing.</li>\n                <li>Handwriting recognition Healthcare.</li>\n                <li>Analyzing a group of over million people for myocardial infarction within a period of 10 years.</li>\n                <li>Prediction whether a person is depressed/ not based on bag of words from the corpus seems to be\n                  conveniently solvable using logistic regression and SVM.</li>\n              </ul>\n              <br />\n\n              <h3>Linear Regression With One Variable</h3>\n              Below table represents current home prices in monroe township based on square feet area,\n              new jersey.\n              <table>\n                <tr>\n                  <th>2600</th>\n                  <th>550000</th>\n                </tr>\n                <tr>\n                  <td>3000</td>\n                  <td>565000</td>\n                </tr>\n                <tr>\n                  <td>3200</td>\n                  <td>610000</td>\n                </tr>\n                <tr>\n                  <td>3600</td>\n                  <td>680000</td>\n                </tr>\n                <tr>\n                  <td>4000</td>\n                  <td>725000</td>\n                </tr>\n              </table>\n              <br />\n\n              <b>Problem Statement :</b> Given above data build a machine learning model that can predict\n              home prices based on square feet area.\n              <br />\n              You can represent values in above table as a scatter plot (values are shown in red markers).\n              After that one can draw a straight line that best fits values on chart.\n              <br />\n              <img src={ScatterPlot} alt=\"ScatterPlot\" className=\"responsive\" style={redesign} />\n              <br />\n              You can draw multiple lines like this but we choose the one where total sum of error is\n              minimum.\n              <br />\n              <img src={ErrorEqu} alt=\"ErrorEqu\" className=\"responsive\" style={redesign} />\n              <br />\n              Home prices can be presented as following equation.\n              <br />\n              <i><b>home price = m * (area) + b</b></i>\n              <br />\n              Generic form of same equation is,\n              <br />\n              <img src={LinearEqu} alt=\"LinearEqu\" className=\"responsive\" style={redesign} />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={oneVarri}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>with Python</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={linearPy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Linear Regression With Multi Variable</h3>\n              <table>\n                <tr>\n                  <th>Area</th>\n                  <th>Bedroom</th>\n                  <th>Age</th>\n                  <th>Price</th>\n                </tr>\n                <tr>\n                  <td>2600</td>\n                  <td>3</td>\n                  <td>20</td>\n                  <td>550000</td>\n                </tr>\n                <tr>\n                  <td>3000</td>\n                  <td>4</td>\n                  <td>15</td>\n                  <td>565000</td>\n                </tr>\n                <tr>\n                  <td>3200</td>\n                  <td> </td>\n                  <td>18</td>\n                  <td>610000</td>\n                </tr>\n                <tr>\n                  <td>3600</td>\n                  <td>3</td>\n                  <td>30</td>\n                  <td>595000</td>\n                </tr>\n                <tr>\n                  <td>4000</td>\n                  <td>5</td>\n                  <td>8</td>\n                  <td>760000</td>\n                </tr>\n                <tr>\n                  <td>4100</td>\n                  <td>6</td>\n                  <td>8</td>\n                  <td>810000</td>\n                </tr>\n              </table>\n              Given the Home Price find out price of a home that has,\n              3000 sqr ft area, 3 bedroom, 40 years old\n              2500 sqr ft area, 5 bedroom, 5 years old\n              <br />\n              <br />\n              We will use regression with multiple varriables, So price can be calculated using.\n              <br />\n              <img src={Equations} alt=\"Equations\" className=\"responsive\" style={redesign} />\n              <br />\n              Here, area, bedroom, age are independent varriable or features whereas price is dependent varriable.\n              <br />\n\n\n              <div style={titles}>\n                <PrismCode\n                  code={independent}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n\n\n              <b>Testing</b>\n              <div style={titles}>\n                <PrismCode\n                  code={testings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LeanearRegression));\n"],"sourceRoot":""}