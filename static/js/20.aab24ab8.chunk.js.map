{"version":3,"sources":["components/ReactJs/prismCode.js","components/algorithams/sidebar.js","assets/hash.png","assets/maxhip.png","components/algorithams/deepAlgorithams/heap.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","heap","Heap","setTimeout","highlightAll","container","item","xs","src","Hash","alt","style","Hips","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/20.aab24ab8.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAlgo' className={classes.line}>Deadlock</Link></MenuItem>\n        <MenuItem><Link to='/Stack' className={classes.line}>Stack</Link></MenuItem>\n        <MenuItem><Link to='/Queue' className={classes.line}>Queue</Link></MenuItem>\n        <MenuItem><Link to='/linkedList' className={classes.line}>LinkedList</Link></MenuItem>\n        <MenuItem><Link to='/heap' className={classes.line}>Heap</Link></MenuItem>\n        <MenuItem><Link to='/trees' className={classes.line}>Tree</Link></MenuItem>\n        <MenuItem><Link to='/graph' className={classes.line}>Graph</Link></MenuItem>\n        <MenuItem><Link to='/sort' className={classes.line}>QuickSort</Link></MenuItem>\n        <MenuItem><Link to='/searchAlgo' className={classes.line}>Search</Link></MenuItem>\n        <MenuItem><Link to='/topTech' className={classes.line}>TopTech</Link></MenuItem>\n        <MenuItem><Link to='/stringAlgo' className={classes.line}>String</Link></MenuItem>\n        <MenuItem><Link to='/arrayAlgo' className={classes.line}>Array</Link></MenuItem>\n        <MenuItem><Link to='/nestingArrAlgo' className={classes.line}>Nesting Array</Link></MenuItem>\n        <MenuItem><Link to='/numbersAlgo' className={classes.line}>Numbers</Link></MenuItem>\n        <MenuItem><Link to='/gameAlgo' className={classes.line}>Game</Link></MenuItem>\n        <MenuItem><Link to='/arrayStrAlgo' className={classes.line}>ArrayStr</Link></MenuItem>\n        <MenuItem><Link to='/arrayNumAlgo' className={classes.line}>ArrayNum</Link></MenuItem>\n        <MenuItem><Link to='/dslogic8' className={classes.line}>Logic8</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/hash.de3c44a6.png\";","module.exports = __webpack_public_path__ + \"static/media/maxhip.7ef8339a.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Hash from '../../../assets/hash.png';\nimport Hips from '../../../assets/maxhip.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst heap = `class MinPriorityQueue {\n  constructor(c) {\n    this.heap = [];\n    this.capacity = c;\n    this.size = 0;\n  }\n\n  \n  insert(key) {                               //inserts key at end and rearranges, so the binary heap in appropriate order.\n    if (this.isFull()) return;\n    this.heap[this.size + 1] = key;\n    let k = this.size + 1;\n    \n    while (k > 1) {\n      if (this.heap[k] < this.heap[Math.floor(k / 2)]) {\n        let temp = this.heap[k];\n        this.heap[k] = this.heap[Math.floor(k / 2)];\n        this.heap[Math.floor(k / 2)] = temp;\n      }\n      k = Math.floor(k / 2);\n    }\n    this.size++;\n  }\n\n  \n  peek() {                                                            // returns the highest priority value.\n    return this.heap[1];\n  }\n\n  \n  isEmpty() {                                                        \n    if (0 == this.size) return true;\n    return false;\n  }\n\n  \n  isFull() {                                                          \n    if (this.size == this.capacity) return true;\n    return false;\n  }\n\n\n  print() {                                                          \n    console.log(this.heap.slice(1));\n  }\n                                                                       \n  heapSort() {                                                        // heap sorting done by delete function to the \n    for (let i = 1; i < this.capacity; i++) {                         //number of times of the size of the heap it returns\n      this.delete();                                                  //reverse sort because it is a min priority queue.\n    }\n  }\n\n\n  sink() {                                                            // this function reorders the heap after every delete.\n    let k = 1;\n    while (2 * k <= this.size || 2 * k + 1 <= this.size) {\n      let minIndex;\n      if (this.heap[2 * k] >= this.heap[k]) {\n        if (2 * k + 1 <= this.size && this.heap[2*k+1] >= this.heap[k]) {\n          break;\n        }\n        else if(2*k+1 > this.size){\n          break;\n        }\n      }\n      if (2 * k + 1 > this.size) {\n        minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k;\n      } else {\n        if (\n          this.heap[k] > this.heap[2 * k] ||\n          this.heap[k] > this.heap[2 * k + 1]\n        ) {\n          minIndex =\n            this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1;\n        } else {\n          minIndex = k;\n        }\n      }\n      let temp = this.heap[k];\n      this.heap[k] = this.heap[minIndex];\n      this.heap[minIndex] = temp;\n      k = minIndex;\n    }\n  }\n\n  \n  delete() {                                                            // deletes the highest priority value from the heap.\n    let min = this.heap[1];\n    this.heap[1] = this.heap[this.size];\n    this.heap[this.size] = min;\n    this.size--;\n    this.sink();\n    return min;\n  }\n}\n\n\nq = new MinPriorityQueue(8);\n\nq.insert(5);\nq.insert(2);\nq.insert(4);\nq.insert(1);\nq.insert(7);\n\nq.print();                                                              // [ 1, 2, 3, 5, 7, 6, 4, 8 ]\nq.heapSort();\nq.print();                                                              // [ 8, 7, 6, 5, 4, 3, 2, 1 ]\n`.trim()\n\n\nclass Heap extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Hash Table</h3>\n              <img src={Hash} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <ul>\n                <li>\n                  A Hash Table is a dictionary-like structure that pairs keys/ values. The location in\n                  memory of each pair is determined by a hash function, which accepts a key and returns the\n                  address where the value should be inserted and retrieved. Collisions can result if two/\n                  more keys convert to the same address. For robustness, getters and setters should\n                  anticipate these events to ensure that all data can be recovered and no data is\n                  overwritten.\n                </li>\n                <br />\n\n                <li>\n                  If we know our addresses will be in integer sequences, we can simply use Arrays to store\n                  our key-value pairs. For more complex address mappings, we can use Maps or Objects. Hash\n                  tables have insertion and lookup of constant time on average. Because of collisions and\n                  resizing.\n                </li>\n              </ul>\n              <br />\n\n              <h3>Heap</h3>\n              <img src={Hips} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <br />\n\n              <b>Minimum Priority Queue: </b>\n              <ul>\n                <li>It is a part of heap data structure</li>\n                <li>\n                  A heap is a specific tree based data structure in which all the nodes of tree are in a specific order.\n                  that is the children are arranged in some  respect of their parents, can either be greater/ less than the parent. This makes\n                  it a min priority queue or max priority queue.\n                </li>\n                <br />\n              </ul>\n\n              <b>Functions: </b>insert, delete, peek, isEmpty, print, heapSort, sink etc.\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={heap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Heap));\n"],"sourceRoot":""}