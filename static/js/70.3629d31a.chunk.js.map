{"version":3,"sources":["components/ReactJs/prismCode.js","components/ReactJs/sidebar.js","components/ReactJs/reactJs_hooks/dropdownSelect.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","dropSelect","checkFilter","countAdd","DropdownSelect","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/70.3629d31a.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introReact' className={classes.line}>Intro-Lazy-Children</Link></MenuItem>\n        <MenuItem><Link to='/reactInter' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/codingInter' className={classes.line}>CodesPro</Link></MenuItem>\n        <MenuItem><Link to='/mainCompo' className={classes.line}>Event-hoc-form<br />curd-slider</Link></MenuItem>\n        <MenuItem><Link to='/pureComp' className={classes.line}>PureComp-conComp</Link></MenuItem>\n        <MenuItem><Link to='/useStates' className={classes.line}>useMultiState</Link></MenuItem>\n        <MenuItem><Link to='/contextHooks' className={classes.line}>Context Hooks</Link></MenuItem>\n        <MenuItem><Link to='/customHooks' className={classes.line}>CustomHooks-memo</Link></MenuItem>\n        <MenuItem><Link to='/useReducersSta' className={classes.line}>UseReducers</Link></MenuItem>\n        <MenuItem><Link to='/contextMethods' className={classes.line}>Curd Hooks</Link></MenuItem>\n        <MenuItem><Link to='/jsonPlaceholder' className={classes.line}>JsonPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/async_await' className={classes.line}>Async-await-sideMenu<br />Mouse hover</Link></MenuItem>\n        <MenuItem><Link to='/ticGame' className={classes.line}>Share-maxMinDate<br />moveBtn-slideshow</Link></MenuItem>\n        <MenuItem><Link to='/linkGet' className={classes.line}>LinkGet</Link></MenuItem>\n        <MenuItem><Link to='/numberFormats' className={classes.line}>Random NumFor-biToDe<br /> Validations Step DateTimw</Link></MenuItem>\n        <MenuItem><Link to='/models' className={classes.line}>Models-chidData-csv<br />Icon-router</Link></MenuItem>\n        <MenuItem><Link to='/like' className={classes.line}>Like-checkbox-radio<br />select-scroll</Link></MenuItem>\n        <MenuItem><Link to='/textEditors' className={classes.line}>TextEditors-paginations<br />translator-sortCheck</Link></MenuItem>\n        <MenuItem><Link to='/sortItems' className={classes.line}>IncOnClick-pushBtn-fizzBuzz<br />show-addDocs-ratings</Link></MenuItem>\n        <MenuItem><Link to='/serverSideRend' className={classes.line}>Jwt-multiSel</Link></MenuItem>\n        <MenuItem><Link to='/dropdownSelect' className={classes.line}>SelectFtr-checkFtr-updtCrd</Link></MenuItem>\n        <MenuItem><Link to='/kanban' className={classes.line}>Kanban</Link></MenuItem>\n        <MenuItem><Link to='/hackeRank' className={classes.line}>HackeRank</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport PrismCode from '../prismCode';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../styles.css'\nimport Sidebar from '../sidebar';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst dropSelect = `\nclass App extends Component {\n  state = {\n      mockData: [],\n      name: \"\"\n    };\n\n  handleSubmitCourse = (e) => {\n    alert(\"Your selected value is: \" + this.state.name);\n    e.preventDefault();\n  }\n\n  handleChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  handleChangeCourse = e => {\n    this.setState({ name: e.target.value });\n  };\n\n  getUnique(arr, comp) {\n    const unique = arr\n      //store the comparison values in array\n      .map(e => e[comp])\n\n      // store the keys of the unique objects\n      .map((e, i, final) => final.indexOf(e) === i && i)\n\n      // eliminate the dead keys & store unique objects\n      .filter(e => arr[e])\n\n      .map(e => arr[e]);\n\n    return unique;\n  }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users/?q=\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData: mockData })\n    })\n  }\n\n\n  render() {\n    const uniqueCouse = this.getUnique(this.state.mockData, \"username\");\n\n    const mockData = this.state.mockData;\n    const name = this.state.name;\n\n    const filterDropdown = mockData.filter(function(result) {\n      return result.username === name;\n    });\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmitCourse}>\n            <select value={name} onChange={this.handleChangeCourse}>\n              {uniqueCouse.map(name => (\n                <option key={name.id} value={name.username}>\n                  {name.username}\n                </option>\n              ))}\n            </select>\n            \n          <div>\n            {filterDropdown.map(name => (\n              <div key={name.id}>{name.name}</div>\n            ))}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}`.trim();\n\nconst checkFilter = `\n//App.js\n\nimport FilterableProductTable from './FilterableProductTable'\n\nconst App =() =>{\n//   const [PRODUCTS, setData ] = useState([]);\n  \n//   useEffect(() => {\n//     loadData();\n//  }, [])\n \n//  const loadData = async () => {\n//    await fetch(\"https://jsonplaceholder.typicode.com/posts\")\n//          .then(res => res.json())\n//          .then(receivedData => setData(receivedData));\n//  }\n//  console.log('ssss',PRODUCTS)\n  \n  const PRODUCTS = [\n    {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n    {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n    {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n    {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n    {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n  ];\n  return (\n    <div>\n      <FilterableProductTable products={PRODUCTS} />\n    </div>\n  );\n}\n\n\n//FilterableProductTable.js\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\n\nclass FilterableProductTable extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        filterText: '',\n        inStockOnly: false\n      };\n    }\n  \n    handleFilterTextChange = (filterText)=> {\n      this.setState({\n        filterText: filterText\n      });\n    }\n    \n    handleInStockChange = (inStockOnly) => {\n      this.setState({\n        inStockOnly: inStockOnly\n      })\n    }\n  \n    render() {\n      return (\n        <>\n          <SearchBar\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n            onFilterTextChange={this.handleFilterTextChange}\n            onInStockChange={this.handleInStockChange}\n          />\n          <ProductTable\n            products={this.props.products}\n            filterText={this.state.filterText}\n            inStockOnly={this.state.inStockOnly}\n          />\n        </>\n      );\n    }\n  }\n  \n  \n  //SearchBar.js\n  const SearchBar =(props)=> {\n    const  handleFilterTextChange =(e)=> {\n        props.onFilterTextChange(e.target.value);\n      }\n      \n      const handleInStockChange=(e) => {\n        props.onInStockChange(e.target.checked);\n      }\n      \n        return (\n          <form>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={props.filterText}\n              onChange={handleFilterTextChange}\n            />\n            <p>\n              <input\n                type=\"checkbox\"\n                checked={props.inStockOnly}\n                onChange={handleInStockChange}\n              />\n              {' '}\n              Only show products in stock\n            </p>\n          </form>\n        );\n    }\n    \n    \n//ProductTable.js\nconst ProductCategoryRow =(props)=> {\n  const category = props.category;\n  return (\n    <tr>\n      <th colSpan=\"2\">\n        {category}\n      </th>\n    </tr>\n  );\n}\n\nconst ProductRow = (props)=>{\n  const product = props.product;\n  const name = product.stocked ?\n    product.name :\n    <span style={{color: 'red'}}>\n      {product.name}\n    </span>;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{product.price}</td>\n    </tr>\n  );\n}\n\nconst ProductTable = (props)=> {\n      const filterText = props.filterText;\n      const inStockOnly = props.inStockOnly;\n  \n      const rows = [];\n      let lastCategory = null;\n  \n      props.products.forEach((product) => {\n        if ((product.name).toLowerCase().indexOf(filterText.toLowerCase()) === -1) {\n          return;\n        }\n        if (inStockOnly && !product.stocked) {\n          return;\n        }\n        if (product.category !== lastCategory) {\n          rows.push(\n            <ProductCategoryRow\n              category={product.category}\n              key={product.category} />\n          );\n        }\n        rows.push(\n          <ProductRow\n            product={product}\n            key={product.name}\n          />\n        );\n        lastCategory = product.category;\n      });\n  \n      return (\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Price</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </table>\n      );\n  }`.trim();\n\nconst countAdd = `\nclass App extends Component{\n  state={ mockData:[] }\n  \ncomponentDidMount(){\n  let url=\"https://jsonplaceholder.typicode.com/users\";\n    axios.get(url)\n     .then(res => {\n        const mockData= res.data\n        this.setState({ mockData })\n    })\n}\n\nrender() {\n  return ( \n   <div>\n      {this.state.mockData.map((value) => (\n          <Previews data={value}/> \n      ))}\n    </div>\n  );\n}\n}\n\n  // Previews.js\n  class Previews extends Component {\n    state = { count: 0 };\n    \n    handleCount = () => {\n      this.setState({ count: this.state.count + 1 })\n    }\n\n    render() {\n      return (\n       <div>\n         {this.state.count}\n         <button onClick={this.handleCount}>btn</button>\n            \n            <div>{this.props.data.name}</div>\n         </div>\n       );\n     }\n   }`.trim();\n\n\nclass DropdownSelect extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Dropdown filter data on the basis of select key</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={dropSelect}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Check Filter</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={checkFilter}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>3. Update single card count onClick</b>\n              <div style={titles}>\n                <PrismCode\n                  code={countAdd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DropdownSelect));"],"sourceRoot":""}