{"version":3,"sources":["components/ReactJs/prismCode.js","components/javaScripts/sidebar.js","components/javaScripts/deepJs/keyedCollections.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","WeakMaps","sets","setsAdv","converting","attToSets","SetsToArr","weakMap","Stack","arrayToClone","circular","changing","KeyedCollections","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/159.bdcce525.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introJs' className={classes.line}>IntroJs-Proxies</Link></MenuItem>\n        <MenuItem><Link to='/prototypes' className={classes.line}>Prototypes-Defa. Param</Link></MenuItem>\n        <MenuItem><Link to='/JsObjects' className={classes.line}>JsObject</Link></MenuItem>\n        <MenuItem><Link to='/array' className={classes.line}>String</Link></MenuItem>\n\n        <MenuItem><Link to='/this' className={classes.line}>This-call(), apply(), bind()</Link></MenuItem>\n        <MenuItem><Link to='/clousers' className={classes.line}>Clousers</Link></MenuItem>\n        <MenuItem><Link to='/oops' className={classes.line}>Oops-GetSet</Link></MenuItem>\n        <MenuItem><Link to='/regular' className={classes.line}>Regular</Link></MenuItem>\n        <MenuItem><Link to='/keyedCollections' className={classes.line}>Keyed Collections</Link></MenuItem>\n\n        <MenuItem><Link to='/arrayApi' className={classes.line}>Indexed colle-Arr Obj</Link></MenuItem>\n        <MenuItem><Link to='/logic' className={classes.line}>Logic</Link></MenuItem>\n        <MenuItem><Link to='/findOutput' className={classes.line}>findOutput</Link></MenuItem>\n        <MenuItem><Link to='/mcqjs' className={classes.line}>McqJs</Link></MenuItem>\n\n        <MenuItem><Link to='/hackerRank' className={classes.line}>HackerRank1</Link></MenuItem>\n        <MenuItem><Link to='/hackerRank6' className={classes.line}>HackerRank2</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst code = ``.trim();\n\nconst WeakMaps = `\nconst privates = new WeakMap();\n\nfunction Public() {\n  const me = {\n    // Private data goes here\n  };\n  privates.set(this, me);\n}\n\nPublic.prototype.method = function () {\n  const me = privates.get(this);\n  // Do stuff with private data in me...\n};\n\nmodule.exports = Public;`.trim();\n\nconst sets = `\nlet mySet = new Set();\nmySet.add(1);\nmySet.add('some text');\nmySet.add('foo');\n\nmySet.has(1);                                                                               // true\nmySet.delete('foo');\nmySet.size;                                                                                 // 2\n\nfor (let item of mySet) \nconsole.log(item);`.trim();\n\nconst setsAdv = `\nSet.prototype.subSet = function(otherSet) { \n  if(this.size > otherSet.size) \n      return false; \n  else { \n      for(var elem of this) { \n          if(!otherSet.has(elem)) \n              return false; \n      } \n      return true; \n  } \n} \n\nvar setA = new Set([10, 20, 30]); \nvar setB = new Set([50, 60, 10, 20, 30, 40]); \nvar setC = new Set([10, 30, 40, 50]); \n\nconsole.log(setA.subSet(setB)); \nconsole.log(setA.subSet(setC)); \nconsole.log(setC.subSet(setB));`.trim();\n\nconst converting = `\nArray.from(mySet);\n[...mySet2];\n\nmySet2 = new Set([1, 2, 3, 4]);`.trim();\n\nconst attToSets = `\nlet myArray = [11,22,34,65,34,65,34];\nlet mySet = new Set(myArray);\n  mySet.add('100');\n  mySet.add({a: 1, b: 2});\n  mySet.delete(22);\n\nmySet.forEach(function(val){\n  console.log(val);\n});`.trim();\n\nconst SetsToArr = `\nlet myArray = ['value1', 'value2', 'value3']\n\nlet mySet = new Set(myArray)\nmySet.has('value1')     \n\nconsole.log([...mySet]) `.trim();\n\nconst weakMap = `\nconst requests2 = new WeakSet();\nclass Request2 {\n    constructor() {\n        requests.set(this, {\n            created: new Date()\n        });\n    }\n    \n    makeRequest() {\n        if (requestIsTooOld(this)) {\n            throw new Error(\"Try again?\");\n        }    // Do work...  \n    }\n}`.trim();\n\nconst Stack = `\n  function postFixEvaluation(exp) {\n  var stack = new Stack();\n    for (var i = 0; i < exp.length; i++) {\n      var c = exp[i];\n      if (!isNaN(c))\n        stack.push(c - '0');\n        else {\n          var val1 = stack.pop();\n          var val2 = stack.pop();\n      if (val1 == \"Underflow\" || val2 == \"Underflow\")\n        return \"Can't perform postfix evaluation\";\n        \n    switch (c) {\n        case '+':\n          stack.push(val2 + val1);\n        break;\n        case '-':\n          stack.push(val2 - val1);\n        break;\n        case '/':\n          stack.push(val2 / val1);\n        break;\n        case '*':\n          stack.push(val2 * val1);\n        break;\n      }\n    }\n  }\n  return stack.pop();\n}\n\nconsole.log(postFixEvaluation(\"235*+8-\"));\n\nconsole.log(postFixEvaluation(\"23*+\"));                       // returns postfix evaluation can't be performed.\n`.trim();\n\nconst arrayToClone = `\narrayToClone = [1, 2, 3, 4, 5];\n clone1 = Array.from(arrayToClone); \n clone2 = Array.of(...arrayToClone); \n clone3 = [...arrayToClone] \n  \n   console.log(arrayToClone)\n\n\n  var array1 = [1, 2]; \n  var array2 = [3, 4, 5]; \n  var array3 = [...array1, ...array2]                                             // Concatenating Arrays.\n\n  console.log(array3)\n\n  \n//Multiple Arrays\n   var array1 = [\"a\", \"b\"],\n       array2 = [\"c\", \"d\"],    \n       array3 = [\"e\", \"f\"],    \n       array4 = [\"g\", \"h\"];\n\n       var arrConc = [...array1, ...array2, ...array3, ...array4]\n\n        console.log(arrConc)\n\n\n//Without Copying the First Array\n\tvar longArray = [1, 2, 3, 4, 5, 6, 7, 8],    \n\t\tshortArray = [9, 10]; \n\n\t\tlongArray.push(...shortArray)\n\t\tconsole.log(longArray)\n\nshortArray.forEach(function (elem) {\n    longArray.push(elem); \n});\n\n\nvar columns = [\"Date\", \"Number\", \"Size\", \"Location\", \"Age\"]; \nvar rows = [\"2001\", \"5\", \"Big\", \"Sydney\", \"25\"]; \nvar result =  rows.reduce(function(result, field, index) {\n  result[columns[index]] = field;\n    return result; \n}, {})\nconsole.log(result);\n\nvar a=[1, 2, 3, 4, 5].filter(value => value > 2);\nconsole.log(a)\n\n\n//filter\nfunction startsWithLetterA(str) { \n   if(str && str[0].toLowerCase() == 'a') {\n           return true   \n            }  \n              return false;\n               }\nvar str = 'Since Boolean is a native javascript afunction/constructor that takes';\nvar strArray = str.split(\" \");\nvar wordsStartsWithA = strArray.filter(startsWithLetterA); \n\nconsole.log(wordsStartsWithA)\n`.trim();\n\nconst circular = `\nclass CircularBuffer {\n  constructor(size) {\n    this.memory = new Array(size);\n    this.head = 0;\n    this.tail = 0;\n    this.isFull = false;\n  }\n  \n  read() {\n    if (this.tail === this.head && !this.isFull) {\n      console.log('Nothing to read.');\n    } else {\n      this.tail = this.next(this.tail);\n      this.isFull = false;\n      return this.memory[this.tail];\n    }\n  }\n  \n  write(value) {\n    if (this.isFull) {\n      console.error('Buffer full');\n      return;\n    } else {\n      this.head = this.next(this.head);\n      this.memory[this.head] = value;\n      if (this.head === this.tail) {\n        this.isFull = true;\n      }\n    }\n  }\n  \n  next(n) {\n    var nxt = n + 1;\n    if (nxt === this.memory.length) {\n      return 0;\n    } else {\n      return nxt;\n    }\n  }\n}\n\nvar buffer = new CircularBuffer(10);\n\ndocument.addEventListener('keydown', event => {\n  buffer.write(event.key);\n});\n\nvar readKeys = () => {\n  console.log(buffer.read());\n  setTimeout(readKeys, 500);\n}\n\nreadKeys();\n`.trim();\n\nconst changing = `\nfunction reverse(head) {\n  let node = head,\n      previous,\n      tmp;\n\n  while (node) {\n    tmp = node.next;                                            // save next before we overwrite node.next!\n    node.next = previous;                                       // reverse pointer\n    previous = node;                                            // step forward in the list.\n    node = tmp;\n  }\n\n  return previous;\n}`.trim();\n\nclass KeyedCollections extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1.Object and Map compared</h3>\n              <ul>\n                <li>Objects have been used to map strings to values. Objects allow you to set keys to values, retrieve those values,\n                  delete keys, and detect whether something is stored at a key. Map objects, however, have a few more advantages\n                  that make them better maps.</li>\n                <br />\n                <li>The keys of an Object are Strings or Symbols, where they can be of any value for a Map.</li>\n                <br />\n                <li>You can get the size of a Map easily, while you have to manually keep track of size for an Object.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>whether to use a Map or an Object:</b>\n              <br />\n              <ul>\n                <li>Use maps over objects when keys are unknown until run time, and when all keys are the same\n                  type and all values are the same type.</li>\n                <li>Use maps if there is a need to store primitive values as keys because object treats each\n                  key as a string whether it's a number value, boolean value or any other primitive value.</li>\n                <li>Use objects when there is logic that operates on individual elements.</li>\n              </ul>\n\n              <br />\n              <h3>2.WeakMap object</h3>\n              The WeakMap object is a collection of key/value pairs in which the keys are objects only and the\n              values can be arbitrary values. The object references in the keys are held weakly, means\n              they are a target of garbage collection (GC) if there is no other reference to the object anymore.\n              The WeakMap API is the same as the Map API.\n              <br />\n              <br />\n              <ul>\n                <li>One difference to Map objects is that WeakMap keys are not enumerable (i.e., there is no method giving you a list\n                  of the keys).</li>\n                <li>One use case of WeakMap objects is to store private data for an object, or to hide implementation details. </li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={WeakMaps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3.Sets</h3>\n              Set objects are collections of values. You can iterate its elements in insertion order. A value in a Set may only\n              occur once, it is unique in the Set's collection.\n              <br />\n              <br />\n              <b>Sets Methods:</b>\n              <ul>\n                <li>add(1)</li>\n                <li>has(1)</li>\n                <li>delete(5)</li>\n                <li>size</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={sets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={setsAdv}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>4.Converting between Array and Set</h3>\n              You can create an Array from a Set using Array.from or the spread operator. Also, the Set constructor accepts an\n              Array to convert in the other direction.\n\n              <div style={titles}>\n                <PrismCode\n                  code={converting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>1. Array To Set</b>\n              <div style={titles}>\n                <PrismCode\n                  code={attToSets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>2. Set To Array</b>\n              <div style={titles}>\n                <PrismCode\n                  code={SetsToArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5.WeakMap</h3>\n              Ability to have weak references used in the form of a WeakSet and WeakMap.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={weakMap}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6.Array and Set compared</h3>\n              Traditionally, a set of elements has been stored in arrays in JavaScript in a lot of situations.\n              <br />\n              The new Set object, however, has some advantages:\n              <br />\n              <br />\n              <ul>\n                <li>Deleting Array elements by value (arr.splice(arr.indexOf(val), 1)) is very slow.</li>\n                <li>Set objects let you delete elements by their value. With an array, you would have to splice\n                  based on an element's index.</li>\n                <li>The value NaN cannot be found with indexOf in an array.</li>\n              </ul>\n              <br />\n              <h3>WeakSet object</h3>\n              WeakSet objects are collections of objects. An object in the WeakSet may only occur once. It is unique in the\n              WeakSet's collection, and objects are not enumerable.\n              <ul>\n                <li>Sets, WeakSets are collections of objects only, and not of arbitrary values of any type.</li>\n                <li>The WeakSet is weak: References to objects in the collection are held weakly. If there is no\n                  other reference to an object stored in the WeakSet, they can be garbage collected.</li>\n              </ul>\n\n              <b>Stack</b>\n              <div style={titles}>\n                <PrismCode\n                  code={Stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Shallow cloning an array</b>\n              <br />\n              Sometimes, you need to work with an array while ensuring you don't modify the original. Instead of a clone method,\n              arrays have a slice method that lets you perform a shallow copy of any part of an array. This only\n              clones the ﬁrst level. This works well with primitive types, like numbers and strings, but not objects.\n              <br />\n              <br />\n              <ul>\n                <li>If the second array is too long (more than 100,000), we get a stack overﬂow error (because of how apply\n                  works). To be safe, we can iterate instead.</li>\n                <li>When we have two separate array and we want to make key value pair from that two array, we can use array's reduce\n                  function like below.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={arrayToClone}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7.Implement a circular buffer using an array.</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={circular}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8.How do you reverse a linked list?.</h3>\n              We iterate through the list once, changing the next pointer of each node to the previous node. The order of operations is important: we copy node.next into tmp before setting node.next to previous. Otherwise when we “step forward” at the end of the list we’d actually step back to the previous node.\n              <br />\n              <br />\n              <b>O(n) time & O(1) space</b>\n              <div style={titles}>\n                <PrismCode\n                  code={changing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(KeyedCollections));\n"],"sourceRoot":""}