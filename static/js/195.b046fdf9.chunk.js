(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[195],{140:function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var a=n(45),r=n(28),o=n(136),l=n(137),s=n(139),i=n(0),c=n.n(i),u=n(138),m=n.n(u),d=(n(59),function(e){function t(e){var n;return Object(a.a)(this,t),(n=Object(o.a)(this,Object(l.a)(t).call(this,e))).highlight=function(){n.ref&&n.ref.current&&m.a.highlightElement(n.ref.current)},n.ref=c.a.createRef(),n}return Object(s.a)(t,e),Object(r.a)(t,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,t=e.code,n=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(n)},t.trim()))}}]),t}(c.a.Component))},141:function(e,t,n){},155:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var a=n(0),r=n.n(a),o=n(26),l=n(297),s=n(295),i=n(114),c=Object(i.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function u(){var e=c();return r.a.createElement("div",{className:e.root},r.a.createElement(s.a,null,r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/infoMD",className:e.line},"IntroMD")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/intro",className:e.line},"Queries")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/mongodbMethods",className:e.line},"mongodbMethods")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/mongoCurd",className:e.line},"MongoCurd-Ref")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/mongoQueries",className:e.line},"Mongo Queries")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/searchErrorHandling",className:e.line},"searchErrorHandling")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/bulkRight",className:e.line},"BulkWright")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/mysql",className:e.line},"Mysql")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/mysqlCurd",className:e.line},"MysqlCurd")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/joinOp",className:e.line},"JoinOp")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/sortOp",className:e.line},"Sort")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/curdOp",className:e.line},"CurdOp")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/gridFs",className:e.line},"gridFs")),r.a.createElement(l.a,null,r.a.createElement(o.b,{to:"/postgressql",className:e.line},"PostgreSql"))),r.a.createElement("div",null))}},391:function(e,t,n){"use strict";n.r(t);var a=n(45),r=n(28),o=n(136),l=n(137),s=n(139),i=n(0),c=n.n(i),u=n(138),m=n.n(u),d=n(120),p=n(57),h=n(296),g=n(5),b=(n(141),n(155)),f=n(140),E={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},x='\n\ndb.students.bulkWrite(\n  [\n     { insertOne :{\n           "document" :{ name: "Andrew", major: "Architecture", gpa: 3.2 }\n        }},\n     { insertOne :{\n           "document" :{ name: "Terry", major: "Math", gpa: 3.8 }\n        }},\n     { updateOne :{\n           filter : { name : "Terry" },\n           update : { $set : { gpa : 4.0 } }\n        }},\n     { deleteOne :{ filter : { name : "Kate"} }\n        },\n     { replaceOne :{\n           filter : { name : "Claire" },\n           replacement : { name: "Genny", major: "Counsling", gpa: 2.4 }\n        }}\n],\n{ordered: false}\n);\n'.trim(),y='\ndb.stores.insertMany(\n  [\n    { _id: 1, name: "Java Hut", description: "Coffee and cakes" },\n    { _id: 2, name: "Burger Buns", description: "Gourmet hamburgers" },\n    { _id: 3, name: "Coffee Shop", description: "Just coffee" },\n    { _id: 4, name: "Clothes Clothes Clothes", description: "Discount clothing" },\n    { _id: 5, name: "Java Shopping", description: "Indonesian goods" }\n  ]\n)\n\ndb.stores.createIndex( { name: "text", description: "text" } )\n\ndb.stores.find({ $text: {$search: "Coffee" } })\n\ndb.stores.find({ $text: {$search: "Java Hut Coffee" } })\n\ndb.stores.find(\n  { $text: { $search: "java hut coffee" } },\n  { score: { $meta: "textScore" } }\n).sort( { score: { $meta: "textScore" } } )'.trim(),v='\ndb.purchase_orders.insertMany(\n  [\n       {product: "toothbrush", total: 4.75, customer: "Mike"},\n       {product: "guitar", total: 199.99, customer: "Tom"},\n       {product: "milk", total: 11.33, customer: "Mike"},\n       {product: "pizza", total: 8.50, customer: "Karen"},\n       {product: "toothbrush", total: 4.75, customer: "Karen"},\n       {product: "pizza", total: 4.75, customer: "Dave"}\n       {product: "toothbrush", total: 4.75, customer: "Mike"},\n  ]\n)\n\n// find out how many toothbrushes were sold\ndb.purchase_orders.count({product: "toothbrush"})\n\n// Find list of all products sold\ndb.purchase_orders.distinct("product")\n\n// Find the total amount of money spent by each customer\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: "$customer", total: { $sum: "$total"} } }\n  ])\n\n// Find how much has been spent on each product and sort it by price\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: "$product", total: { $sum: "$total"} } },\n       {$sort: {total: -1}}\n  ])\n\n// Find how much money each customer has spent on toothbrushes and pizza\ndb.purchase_orders.aggregate([\n       {$match: {product: {$in: ["toothbrush", "pizza"]} } },\n       {$group: {_id: "$product", total: { $sum: "$total"} } },\n  ])'.trim(),_='\n  //Creating Text Index\n  db.posts.insert({\n    "post_text": "enjoy the mongodb articles on tutorialspoint",\n    "tags": ["mongodb", "tutorialspoint"]\n }\n {\n   "post_text" : "writing tutorials on mongodb",\n   "tags" : [ "mongodb", "tutorial" ]\n })\n \n \n //We will create a text index on post_text field so that we can search inside our posts\' text \u2212\n db.posts.createIndex({post_text:"text"})\n{\n\t"createdCollectionAutomatically" : true,\n\t"numIndexesBefore" : 1,\n\t"numIndexesAfter" : 2,\n\t"ok" : 1\n}\n\n\n//Using Text Index\nNow that we have created the text index on post_text field, we will search for all the posts having the word \ntutorialspoint in their text.\ndb.posts.find({$text:{$search:"tutorialspoint"}}).pretty()\n{\n\t"_id" : ObjectId("5dd7ce28f1dd4583e7103fe0"),\n\t"post_text" : "enjoy the mongodb articles on tutorialspoint",\n\t"tags" : [\n\t\t"mongodb",\n\t\t"tutorialspoint"\n\t]\n}\n  '.trim(),k='\n  db.posts.getIndexes()[\n\t{"v" : 2,\t"key" : {"_id" : 1}, "name" : "_id_",\t"ns" : "mydb.posts"},\n\t{"v" : 2,\t"key" : { "fts" : "text", "ftsx" : 1},\t"name" : "post_text_text","ns" : "mydb.posts",\n\t\t"weights" : {"post_text" : 1},\n\t\t"default_language" : "english",\n\t\t"language_override" : "language",\n\t\t"textIndexVersion" : 3\n  }\n]\n\n\n//After getting the name of your index from above query, run the following command. Here, post_text_text is the name \nof the index.\ndb.posts.dropIndex("post_text_text")\n'.trim(),$=function(e){function t(){return Object(a.a)(this,t),Object(o.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(r.a)(t,[{key:"componentDidMount",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(d.a,{container:!0},c.a.createElement(d.a,{item:!0,xs:2},c.a.createElement(p.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(b.a,null)))),c.a.createElement(d.a,{item:!0,xs:10},c.a.createElement(p.a,{className:e.paper},c.a.createElement(h.a,null,c.a.createElement("b",null,"Bulk Write Operations"),c.a.createElement("br",null),c.a.createElement("br",null),"The ",c.a.createElement("b",null,"db.collection.bulkWrite()")," method provides the ability to perform bulk insert, update, and remove operations. MongoDB also supports bulk insert through the ",c.a.createElement("b",null,"db.collection.insertMany()."),c.a.createElement("br",null),c.a.createElement("br",null),"Since ordered is true by default, only the first operation completes successfully. The rest are not executed. Running the bulkWrite() with ordered : false would allow the remaining operations to complete despite the error.",c.a.createElement("div",{style:E},c.a.createElement(f.a,{code:x,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Aggregation"),c.a.createElement("div",{style:E},c.a.createElement(f.a,{code:v,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Text Indexing"),"MongoDB provides text indexes to support text search queries on string content. text indexes can include any field whose value is a string or an array of string elements.",c.a.createElement("div",{style:E},c.a.createElement(f.a,{code:y,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Text Search"),"The Text Search uses stemming techniques to look for specified words in the string fields by dropping stemming stop words like a, an, the, etc.",c.a.createElement("br",null),c.a.createElement("div",{style:E},c.a.createElement(f.a,{code:_,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Deleting Text Index"),"To delete an existing text index, first find the name of index using the following query \u2212",c.a.createElement("div",{style:E},c.a.createElement(f.a,{code:k,language:"js",plugins:["line-numbers"]}))))))}}]),t}(i.Component);t.default=Object(g.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))($)}}]);
//# sourceMappingURL=195.b046fdf9.chunk.js.map