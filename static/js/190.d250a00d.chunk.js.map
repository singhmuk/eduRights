{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","components/ml/deepMl/logisticRegrations.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","sklearn","accuracy","trains","stack","LogisticReg","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/190.d250a00d.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst sklearn = `\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\nX = iris.data\ny = iris.target\n\nfeature_names = iris.feature_names\ntarget_names = iris.target_names\n\nprint(\"Feature names:\", feature_names)\nprint(\"Target names:\", target_names)\nprint(\"First 10 rows of X\", X[:10])\n`.trim();\n\nconst accuracy = `\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)\n\nX_train.shape\nX_test.shape\n\ny_train.shape\ny_test.shape\n`.trim();\n\nconst trains = `\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\n\nclassifier_knn = KNeighborsClassifier(n_neighbors = 3)\nclassifier_knn.fit(X_train, y_train)\ny_pred = classifier_knn.predict(X_test)\n\n# Finding accuracy by comparing actual response values(y_test)with predicted response value(y_pred)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))\n\n# Providing sample data and the model will make prediction out of that data\nsample = [[5, 5, 3, 2], [2, 4, 3, 5]]\npreds = classifier_knn.predict(sample)\n`.trim();\n\nconst stack = `\nfrom sklearn import linear_model\nreg = linear_model.LinearRegression()  \n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)                       \n\nfrom sklearn.preprocessing import StandardScaler  \nsc_X = StandardScaler()\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\n\nfrom sklearn.svm import SVC\nsvm = SVC(gamma='auto') \n\nfrom sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=40)                                                      \n\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\nfrom sklearn.neighbors import KNeighborsClassifier \nknn = KNeighborsClassifier(n_neighbors=10)\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(df[['Income($)']])\n\nfrom sklearn.pipeline import Pipeline\nclf = Pipeline([('vectorizer', CountVectorizer()),('nb', MultinomialNB())])\nclf.fit(X_train, y_train)\n\nfrom sklearn.preprocessing import LabelEncoder\nle_company = LabelEncoder()\n\nfrom sklearn import tree\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(inputs_n, target)\n\nfrom sklearn.decomposition import PCA\npca = PCA(0.95)\nX_pca = pca.fit_transform(X)\n\nfrom sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()\nencoder.fit(input_labels)\n\nfrom sklearn.linear_model import Ridge                                                  \nridge_reg= Ridge(alpha=50, max_iter=100, tol=0.1) \nridge_reg.fit(train_X, train_y)\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nscores = cross_val_score(DecisionTreeClassifier(), X, y, cv=5)\n\nfrom sklearn.model_selection import GridSearchCV\nclf = GridSearchCV(svm.SVC(gamma='auto'), {'C': [1,10,20], 'kernel': ['rbf','linear']}, cv=5, return_train_score=False)\nclf.fit(iris.data, iris.target)\n\nfrom sklearn.model_selection import RandomizedSearchCV\nrs = RandomizedSearchCV(svm.SVC(gamma='auto'), {'C': [1,10,20],'kernel': ['rbf','linear']}, \n    cv=5, return_train_score=False, n_iter=2)\nrs.fit(iris.data, iris.target)\n\nfrom sklearn.ensemble import BaggingClassifier\n\nbag_model = BaggingClassifier(\n    base_estimator=DecisionTreeClassifier(), \n    n_estimators=100, \n    max_samples=0.8, \n    oob_score=True,\n    random_state=0\n)\nbag_model.fit(X_train, y_train)\n`.trim();\n\n// const stack = ``.trim();\n\n\n\nclass LogisticReg extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Scikit Learn (common algoritham) - Modelling Process</h3>\n              Rather than focusing on loading, manipulating and summarising data, Scikit-learn library is focused on modeling the data. Some of the most popular groups of models provided by Sklearn are as follows −\n              <br />\n              <br />\n              We can do following with scikit Learn.\n              <ul>\n                <li><b>Classification: </b>SVM, nearest neighbors, random forest, logistic regression, etc.</li>\n                <li><b>Regression: </b>Lasso, ridge regression, etc.</li>\n                <li><b>Clustering: </b>k-means, spectral clustering, etc.</li>\n                <li><b>Dimensionality reduction: </b>PCA, feature selection, matrix factorization, etc.</li>\n                <li><b>Model selection: </b>Grid search, cross-validation, metrics.</li>\n                <li><b>Preprocessing: </b>.Feature extraction, normalization</li>\n              </ul>\n              <br />\n              <b>Dataset Loading:</b>A collection of data is called dataset. It is having the following two components.\n              <br />\n              Dataset having the following two components.\n              <ul>\n                <li><b>Features: </b>The variables of data are called its features.</li>\n                <ul>\n                  <li><b>Feature matrix: </b>It is the collection of features, in case there are more than one.</li>\n                  <li><b>Feature Names: </b>It is the list of all the names of the features.</li>\n                </ul>\n                <br />\n                <li><b>Response: </b>It is the output variable that basically depends upon the feature variables.</li>\n                <ul>\n                  <li><b>Response Vector: </b>It is used to represent response column. Generally, we have just one response column.</li>\n                  <li><b>Target Names: </b>It represent the possible values taken by a response vector.</li>\n                </ul>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={sklearn}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Some popular groups of models provided by scikit-learn include:</b>\n              <ul>\n                <li><b>Clustering: </b>For grouping unlabeled data such as KMeans.</li>\n                <li><b>Cross Validation: </b>For estimating the performance of supervised models on unseen data.</li>\n                <li><b>Datasets: </b>For test datasets and for generating datasets with specific properties for\n                  investigating model behavior.</li>\n                <li><b>Dimensionality Reduction: </b>For reducing the number of attributes in data for summarization,\n                  visualization and feature selection such as Principal component analysis.</li>\n                <li><b>Ensemble methods: </b>For combining the predictions of multiple supervised models.</li>\n                <li><b>Feature extraction: </b>For defining attributes in image and text data.</li>\n                <li><b>Feature selection: </b>For identifying meaningful attributes from which to create supervised models.</li>\n                <li><b>Parameter Tuning: </b>For getting the most out of supervised models.</li>\n                <li><b>Manifold Learning: </b>For summarizing and depicting complex multi-dimensional data.</li>\n              </ul>\n              <br />\n\n              <h3>Splitting the dataset</h3>\n              To check the accuracy of our model, we can split the dataset into two pieces-a training set and a testing set.\n              <div style={titles}>\n                <PrismCode\n                  code={accuracy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Train the Model</h3>\n              Next, we can use our dataset to train some prediction-model. ML algorithms have a consistent interface for fitting, predicting\n              accuracy, recall etc.\n              <div style={titles}>\n                <PrismCode\n                  code={trains}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>sklearn Models</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(LogisticReg));\n"],"sourceRoot":""}