(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[89],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return m}));var r=t(45),s=t(28),a=t(136),i=t(137),o=t(139),d=t(0),c=t.n(d),l=t(138),p=t.n(l),m=(t(59),function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(a.a)(this,Object(i.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&p.a.highlightElement(t.ref.current)},t.ref=c.a.createRef(),t}return Object(o.a)(n,e),Object(s.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(c.a.Component))},141:function(e,n,t){},153:function(e,n,t){"use strict";t.d(n,"a",(function(){return l}));var r=t(0),s=t.n(r),a=t(26),i=t(297),o=t(295),d=t(114),c=Object(d.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function l(){var e=c();return s.a.createElement("div",{className:e.root},s.a.createElement(o.a,null,s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/introRedux",className:e.line},"Intro")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/counter",className:e.line},"Counter Select")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/reduxState",className:e.line},"Redux State-Curd")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/reduxMethods",className:e.line},"Redux Methods")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/react_redux",className:e.line},"Filter")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/reduxCurd",className:e.line},"Redux Curd")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/expenseTraMern",className:e.line},"ReactCurdPlaceholder")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/contactKeeperApi",className:e.line},"ReactReduxCurdPlaceholder")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/mernRedux",className:e.line},"Mern Redux")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/signUp",className:e.line},"SignUP")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/git",className:e.line},"Git")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/gitConcepts",className:e.line},"Git Concepts")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/skills",className:e.line},"Skills")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/comskills",className:e.line},"Comskills")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/techskills",className:e.line},"Techskills")),s.a.createElement(i.a,null,s.a.createElement(a.b,{to:"/techinto",className:e.line},"TechsInto"))),s.a.createElement("div",null))}},339:function(e,n,t){"use strict";t.r(n);var r=t(45),s=t(28),a=t(136),i=t(137),o=t(139),d=t(0),c=t.n(d),l=t(138),p=t.n(l),m=t(120),u=t(57),h=t(296),y=t(5),E=(t(141),t(153)),f=t(140),g={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},b="\n//actions/types.js\nexport const NEW_ENTRY = 'NEW_ENTRY';\nexport const LIST = 'LIST';\nexport const UPDATE_ENTRY = 'UPDATE_ENTRY';\nexport const DELETE_ENTRY = 'DELETE_ENTRY';\nexport const LIST_BY_ID = 'LIST_BY_ID';\n\n\n//actions/index.js\nimport axios from 'axios';\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from './types';\n\n\nexport function newDirectoryEntry( fields ){\n   const request = axios.post('/create', fields );\n   return {\n      type: NEW_ENTRY,\n      payload: request\n   }\n}\n\nexport function directoryList(){\n   const request = axios.get('/read');\n   return {\n      type: LIST,\n      payload: request\n   }\n}\n\n/* Retrieve a single record by  id */\nexport function directoryListById( id ){\n   const request = axios.get('/readbyid/', { params: { id: id } });\n   return {\n      type: LIST_BY_ID,\n      payload: request\n   }\n}\n\nexport function updateDirectoryEntry( fields ){\n   const request = axios.put('/update', fields );\n   return {\n      type: UPDATE_ENTRY,\n      payload: request\n   }\n}\n\nexport function deleteDirectoryEntry( entryid ){\n   const request = axios.delete('/delete', { params : { entryid: entryid } } );\n   return {\n      type: DELETE_ENTRY,\n      payload: request\n   }\n}\n".trim(),v="\n//reducers/index.js\nimport { NEW_ENTRY, LIST, UPDATE_ENTRY, DELETE_ENTRY, LIST_BY_ID } from '../actions/types';\n\n\nexport default function( state = [], action ) {\n    switch(action.type){\n      case NEW_ENTRY:\n        return { ...state, directory: action.payload };\n      case LIST:\n        return { ...state, directory: action.payload };\n      case LIST_BY_ID:\n        return { ...state, directory: action.payload };\n      case UPDATE_ENTRY:\n        return { ...state, directory: action.payload };\n      case DELETE_ENTRY:\n        return { ...state, directory: action.payload };\n      default:\n        return state;\n    }\n}\n".trim(),_="\n//components/form.js\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Formik, Field, Form } from 'formik';\nimport Yup from 'yup';\nimport { updateDirectoryEntry, newDirectoryEntry } from '../actions/index';\n\nconst validationSchema = Yup.object().shape({\n    name: Yup.string().required('Business name is required!'),\n    description: Yup.string().required('Business description is required!'),\n    phone: Yup.string().required('Phone is required!'),\n    email_address: Yup.string().email('Invalid email address!').required('Email address is required!'),\n    physical_address: Yup.string().required('Physical address is required!'),\n});\n\nclass form extends Component {\n   constructor(props){\n      super(props);\n      this.state = { id: typeof this.props.row._id !== 'undefined' ? this.props.row._id : '', \n      name: typeof this.props.row.name !== 'undefined' ? this.props.row.name : '', \n      description: typeof this.props.row.description !== 'undefined' ? this.props.row.description : '', \n      phone: typeof this.props.row.phone !== 'undefined' ? this.props.row.phone : '', \n      email_address: typeof this.props.row.email_address !== 'undefined' ? this.props.row.email_address : '', \n      physical_address: typeof this.props.row.physical_address !== 'undefined' ? this.props.row.physical_address : '', \n      redirect: false \n      }\n   }\n   async createUpdateRecord(values){\n      let results;\n      if( this.props.mode === 'edit' ) {\n        results = await this.props.updateDirectoryEntry(values);\n        if( results.payload.data.response === 'success' ) {\n            this.setState({ redirect: true });\n        } else {\n            console.log(results.payload.data.response);\n        }\n      } else {\n        results = await this.props.newDirectoryEntry(values);\n        if( results.payload.data.response === 'success' ) {\n            this.setState({ redirect: true });\n        } else {\n            console.log(results.payload.data.response);\n        }\n      }\n   }\n   render(){\n      if( this.state.redirect ) {\n          return (\n            <Redirect to=\"/\" />\n          );\n      }\n      return(\n         <div>\n           <Formik\n             initialValues={{\n               name: this.state.name,\n               description: this.state.description,\n               phone: this.state.phone,\n               email_address: this.state.email_address,\n               physical_address: this.state.physical_address,\n               id: this.state.id\n             }}\n             validationSchema={validationSchema}\n             onSubmit={ values => {\n                this.createUpdateRecord(values);\n             }}\n             render={({ errors, touched }) => (\n               <Form>\n                 <div>\n                   <div>\n                   <h2>{ this.props.mode === 'edit' ? 'Edit Entry' : 'New Entry' }</h2>\n                   </div>\n                 </div> \n                 <div>\n                   <div className={''$'{errors.name && touched.name && 'has-error'}'}>\n                     <p>Business Name</p>\n                     <Field name=\"name\" type=\"text\" />\n                   </div>\n                   <div className={''$'{errors.description && touched.description && 'has-error'}'}>\n                     <p>Business Description</p>\n                     <Field name=\"description\" type=\"text\" />\n                      { errors.description && touched.description && <span>{errors.description}</span> }\n                   </div>\n                 </div>\n                 <div className=\"row\">\n                   <div className={''$'{errors.phone && touched.phone && 'has-error'}'}>\n                     <p>Phone</p>\n                     <Field name=\"phone\" type=\"text\" />\n                      { errors.phone && touched.phone && <span>{errors.phone}</span> }\n                   </div>\n                   <div className={''$'{errors.email_address && touched.email_address && 'has-error'}'}>\n                     <p>Email Address</p>\n                     <Field name=\"email_address\" type=\"text\" />\n                      { errors.email_address && touched.email_address && <span>{errors.email_address}</span> }\n                   </div>\n                 </div>\n                 <div className=\"row\">\n                   <div className={''$'{errors.physical_address && touched.physical_address && 'has-error'}'}>\n                     <p>Physical Address</p>\n                     <Field name=\"physical_address\" type=\"text\" />\n                      { errors.physical_address && touched.physical_address && <span>{errors.physical_address}</span> }\n                   </div>\n                 </div> \n                 <div>\n                   <div>\n                      <button>Submit</button>\n                   </div>\n                 </div>\n               </Form>\n             )} />\n         </div>\n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ updateDirectoryEntry, newDirectoryEntry }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(form);\n\n\n\n//components/list.js\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { deleteDirectoryEntry, directoryList } from '../actions/index';\nimport { Link } from \"react-router-dom\";\n\nclass List extends Component {\n   constructor(props){\n     super(props);\n     this.state = { list: [] };\n     this.confirmDelete = this.confirmDelete.bind(this);\n   }\n   async getAList() {\n     let results = await this.props.directoryList();\n     this.setState({ list : results.payload.data });\n   }\n   componentDidMount(){\n     this.getAList();\n   }\n   async confirmDelete(e){\n     if ( window.confirm('Are you sure you wish to delete this item?') ) {\n          let results = await this.props.deleteDirectoryEntry(e.target.id);\n          if( results.payload.data.response === 'success' ) {\n              this.getAList();\n          }\n     }\n   }\n   displayAList(){\n     if( Object.keys(this.state.list).length > 0 ) {\n         const row = this.state.list.map( ( item, i ) => {\n            let rowNumber = i + 1;\n            return <tr key={i}><th scope=\"row\">{rowNumber}</th><td>{item.name}</td><td>{item.description}</td>\n            <td>{item.phone}</td>\n            <td>{item.email_address}</td><td>{item.physical_address}</td>\n            <td><Link className=\"btn btn-warning\" to={\"/edit/\"+item._id}>Edit</Link>&nbsp;\n            <Link id={item._id} onClick={this.confirmDelete} to=\"/\">Delete</Link></td></tr>\n         });\n         return (\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Name</th>\n                  <th>Description</th>\n                  <th>Phone</th>\n                  <th>Email</th>\n                  <th>Address</th>\n                  <th>Edit / Delete</th>\n                </tr>\n              </thead>\n              <tbody>\n                { row }\n              </tbody>\n            </table>\n         );\n     } else {\n         return <p><em>There are no listings at the moment.</em></p>;\n     }\n   }\n   render(){\n      return(\n        <div>\n          <h2>Listings</h2>\n          { this.displayAList() }\n        </div> \n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ directoryList, deleteDirectoryEntry }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(List);\n\n\n//components/edit.js\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { directoryListById } from '../actions/index';\nimport Form from './form';\n\nclass Edit extends Component {\n   constructor(props){\n      super(props);\n      this.id = this.props.match.params.id;\n      this.state = { row: [] }\n   }\n   async getRecord() {\n      let result = await this.props.directoryListById(this.id);\n      this.setState({ row : Object.assign( this.state.row, result.payload.data ) });\n   }\n   componentDidMount(){\n      this.getRecord();\n   }\n   callForm(){\n      if ( Object.keys(this.state.row).length > 0 ) {\n           return <Form mode=\"edit\" row={this.state.row} />;\n      }\n   }\n   render(){\n      return(\n        <div>\n          { this.callForm() }\n        </div> \n      );\n   }\n}\n\nconst mapStateToDispatch = (dispatch) => {\n  return bindActionCreators({ directoryListById }, dispatch);\n};\n\nexport default connect(null, mapStateToDispatch)(Edit);\n\n\n//components/entry.js\nimport Form from './form';\n\nconst Entry = () => {\n    return(\n      <div>\n        <Form mode=\"new\" row=\"[]\" />\n      </div>\n    );\n}\n\n\n//App.js\nimport { Link, Route } from \"react-router-dom\";\nimport Entry from \"./components/entry\";\nimport List from \"./components/list\";\nimport Edit from \"./components/edit\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"row\">\n         <Link to=\"/\">Listings</Link>\n          <Link to=\"/entry\">Entry</Link>\n          <Route exact path=\"/\" component={List} />\n          <Route path=\"/entry\" component={Entry} />\n          <Route path=\"/edit/:id\" component={Edit} />\n      </div>\n    );\n  }\n}\n\n\n//index.js\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Router } from \"react-router-dom\";\nimport createBrowserHistory from \"history/createBrowserHistory\";\nimport promise from \"redux-promise\";\n\nimport reducers from \"./reducers\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\nconst history = createBrowserHistory();\n\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>, document.querySelector(\".container\") );".trim(),x="\n//models/directory.js\nconst DirectorySchema = new Schema({\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  phone: { type: String, required: true },\n  email_address: { type: String, required: true },\n  physical_address: { type: String, required: true },\n  createdAt: { type: Date, required: true }\n});\n\n\nmodule.exports = mongoose.model('Directory', DirectorySchema);\n\n\n//routes/index.js\nconst Directory = require('../models/directory');\n\nmodule.exports = function() {\n  router.get('/read', async (req, res) => {\n      let directory_list = await Directory.find({});\n      res.send(directory_list);\n  });\n\n  router.post(\"/create\", async ( req, res ) => {\n      let directory = new Directory({\n         name: req.body.name,\n         description: req.body.description,\n         phone: req.body.phone,\n         email_address: req.body.email_address,\n         physical_address: req.body.physical_address,\n         createdAt: new Date(Date.now())\n      });\n\n        let newDirectory = await directory.save();\n        res.send({ response: 'success'});\n  });\n\n  router.get('/readbyid/', async ( req, res ) => {\n       let record = await Directory.findOne({ _id: req.query.id });\n       res.send(record);\n  });\n     \n  router.put('/update', async ( req, res ) => {\n        let directory = await Directory.findOneAndUpdate({ _id: req.body.id }, req.body, { new: true });\n        res.send({ response: 'success' });\n  });\n\n  router.delete('/delete', async (req, res) => {\n        let directory = await Directory.findOneAndRemove({ _id: req.query.entryid });\n        return res.send({ response: 'success' });\n  });\n\n  return router;\n\n};\n\n\n//server.js\nconst path = require('path');\n\nconst routes = require('./routes/index')();\n\napp.use(express.json());\napp.use('/', routes);\n\nconst port = process.env.PORT || 3001;\napp.listen(port, () => { console.log('Server listening on port ') });\n\n".trim(),D=function(e){function n(){return Object(r.a)(this,n),Object(a.a)(this,Object(i.a)(n).apply(this,arguments))}return Object(o.a)(n,e),Object(s.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return p.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(m.a,{container:!0},c.a.createElement(m.a,{item:!0,xs:2},c.a.createElement(u.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(E.a,null)))),c.a.createElement(m.a,{item:!0,xs:10},c.a.createElement(u.a,{className:e.paper},c.a.createElement(h.a,null,c.a.createElement("h3",null,"Actions"),c.a.createElement("div",{style:g},c.a.createElement(f.a,{code:b,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Reducers"),c.a.createElement("div",{style:g},c.a.createElement(f.a,{code:v,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Components"),c.a.createElement("div",{style:g},c.a.createElement(f.a,{code:_,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Server"),c.a.createElement("div",{style:g},c.a.createElement(f.a,{code:x,language:"js",plugins:["line-numbers"]}))))))}}]),n}(d.Component);n.default=Object(y.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(D)}}]);
//# sourceMappingURL=89.bb9afcbf.chunk.js.map