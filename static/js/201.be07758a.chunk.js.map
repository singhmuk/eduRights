{"version":3,"sources":["components/ReactJs/prismCode.js","components/mongoDB/sidebar.js","components/mongoDB/deepMongodb/mongoQueries.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","arraysSchema","conditional","increase","insertMany","itemsModels","nested","PluralizedCollectioName","primaryUniqeId","renameDoc","timeStamps","MongoCurd","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/201.be07758a.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMD' className={classes.line}>IntroMD</Link></MenuItem>\n        <MenuItem><Link to='/intro' className={classes.line}>Queries</Link></MenuItem>\n        <MenuItem><Link to='/mongodbMethods' className={classes.line}>mongodbMethods</Link></MenuItem>\n        <MenuItem><Link to='/mongoCurd' className={classes.line}>MongoCurd-Ref</Link></MenuItem>\n        <MenuItem><Link to='/mongoQueries' className={classes.line}>Mongo Queries</Link></MenuItem>\n        <MenuItem><Link to='/searchErrorHandling' className={classes.line}>searchErrorHandling</Link></MenuItem>\n        <MenuItem><Link to='/bulkRight' className={classes.line}>BulkWright</Link></MenuItem>\n        <MenuItem><Link to='/mysql' className={classes.line}>Mysql</Link></MenuItem>\n        <MenuItem><Link to='/mysqlCurd' className={classes.line}>MysqlCurd</Link></MenuItem>\n        <MenuItem><Link to='/joinOp' className={classes.line}>JoinOp</Link></MenuItem>\n        <MenuItem><Link to='/sortOp' className={classes.line}>Sort</Link></MenuItem>\n        <MenuItem><Link to='/curdOp' className={classes.line}>CurdOp</Link></MenuItem>\n        <MenuItem><Link to='/gridFs' className={classes.line}>gridFs</Link></MenuItem>\n        <MenuItem><Link to='/postgressql' className={classes.line}>PostgreSql</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst arraysSchema = `\nconst arraysSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('arraysOp', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/arrayOp');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.search = async (req, res) => {\n    Users.find({\n      testScore: { $all: [10, 20, 30] }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.size = async (req, res) => {\n    Users.find({\n      testScore: { $size: 3 }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.elementMatch = async (req, res) => {\n    Users.find({\n      testScore: { $elemMatch: { $gt: 20 } }\n    })\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      testScore: req.body.testScore,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\n\nconst conditional = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('conditional', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst increase = `\nconst reqString = { type: String, required: true }\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n})\n\nmodule.exports = mongoose.model('users', userSchema);\n\n\n//controllers\nconst Items = require('../models/conditional');\n\nrouter.findLevel = async (req, res) => {\n    //Search an user level > 10\n    Items.find({\n      level: {\n        $exists: true,                    //check value exixt or not\n        // $gte: 10, $lt: 15               //gte = greater than or equal to\n      }\n    })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      level: req.body.level,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst insertMany = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('manyQry', plurizedSchema);\n\n\n//controllers\nconst Items = require('../models/insertMany');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.inserts = async = (req, res) => {\n    Items.insertMany([{\n      \"email\": \"valid@gmail.com\", \"username\": \"min\", \"password\": \"password\"\n    },\n    {\n      \"email\": \"valid2@gmail.com\", \"username\": \"min2\", \"password\": \"password2\"\n    },\n    {\n      \"email\": \"valid3@gmail.com\", \"username\": \"min3\", \"password\": \"password3\"\n    }]).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n\nrouter.remove = async = (req, res) => {\n    Items.deleteMany({\n      username: ['min', 'min2']\n    }).then(function () {\n      console.log(\"Data inserted\")  // Success\n    })\n}\n`.trim();\n\nconst itemsModels = `\nconst MainSchema = new Schema({\n  title: { type: String, required: true },\n  age: { type: Number, required: true },\n  list: { type: Array, required: true },\n  status: { type: String, required: false },\n  qty: { type: Number },\n});\n\nmodule.exports = mains = mongoose.model('mains', MainSchema);\n\n\n//controllers\nconst Items = require('../models/items');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n\nrouter.updates = async = (req, res) => {\n    Items.findByIdAndUpdate(req.params.id, {\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n      size: {\n        h: req.body.h,\n        w: req.body.w,\n        uom: req.body.uom,\n      }\n    }, { new: true }).then(data => { res.json(data) })\n}\n\nrouter.remove = async (req, res) => {\n    Items.findByIdAndRemove(req.params.id)\n      .then(main => main.remove().then(() => res.json({ success: true })))\n}\n`.trim();\n\nconst nested = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, {\n  timeStamps: true\n})\n\nmodule.exports = mongoose.model('nested', userSchema);\n\n\n//controllers\nconst Items = require('../models/nested');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.messages = async (req, res) => {\n    Items.findOne({\n      'messages.text': 'Text'\n    })\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: [\n        {\n          userId: req.body.email,\n          text: 'Text'\n        },\n      ]\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst PluralizedCollectioName = `\nconst reqString = { type: String, required: true }\n\nconst plurizedSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n}, {\n  timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('plurized', plurizedSchema);\n/*\ncollection name=plurized\ncollection name is default create plural, if want singular collection name than follow as\nmodule.exports = mongoose.model('plurized', plurizedSchema,'plurized');\n*/\n\n\n//controllers\nconst Items = require('../models/PluralizedCollectioName');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .sort({ date: -1 })\n      .then(main => res.json(main));\n}\n\nrouter.getOne = async (req, res) => {\n    Items.findById(req.params.id)\n      .then(main => res.json(main))\n}\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Items({\n      title: req.body.title,\n      age: req.body.age,\n      list: req.body.list,\n      status: req.body.status,\n      qty: req.body.qty,\n    })\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst primaryUniqeId = `\nconst reqString = { type: String, required: true }\n\nconst arraysSchema = new Schema({\n  _id: reqString,            //to use own id\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: Number,          //count number of messages\n  nameHistory: [String],      //every time name chage\n  testScore: [Number]\n})\n\nmodule.exports = mongoose.model('keysIds', arraysSchema);\n\n\n//controllers\nconst Users = require('../models/primaryUniqeId');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main));\n}\n\nrouter.creates = async = (req, res) => {\n    const newUsers = new Users({\n      _id: req.body._id,\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n    })\n\n    newUsers.save().then(item => res.json(item));\n}\n`.trim();\n\nconst renameDoc = `\nconst reqString = { type: String, required: true }\n\nconst messageSchema = new Schema({\n  userId: reqString,\n  text: reqString\n})\n\nconst userSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  level: Number,\n  messages: [messageSchema],\n  nameHistory: [String]\n}, \n{ timeStamps: true })\n\nmodule.exports = mongoose.model('renameRemoveDocs', userSchema);\n\n\n//controllers\nconst Items = require('../models/renameDoc.js');\n\nrouter.all = async (req, res) => {\n    Items.find()\n      .then(main => res.json(main));\n}\n\nrouter.updates = async = (req, res) => {\n    const newItems = Items.updateMany({}, {\n      // $rename: { password: req.body.password },   // rename password to pass\n      $unst: { pass: '' },                           // remove field\n    })\n      .then(main => res.json(main));\n\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\nconst timeStamps = `\nconst reqString = { type: String, required: true }\n\nconst timeSchema = new Schema({\n  email: reqString,\n  username: reqString,\n  password: reqString,\n  messages: {\n    type: Number, default: 5, min: 0, max: 10\n  },\n  nameHistory: [String]       //every time name chage\n},\n{ timeStamps: true          //created and updated time automatically manage\n})\n\nmodule.exports = mongoose.model('timeStamps', timeSchema);\n\n\n//controllers\nconst Users = require('../models/timeStamps');\n\nrouter.all = async (req, res) => {\n    Users.find()\n      .then(main => res.json(main))\n}\n\n\nrouter.creates = async = (req, res) => {\n    const newItems = new Users({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.password,\n      messages: req.body.messages,\n    })\n\n    // const valid = new Promise((res) => {\n    //   newItems.validate((err) => {\n    //     if (err) {\n    //       res(false)\n    //     } else {\n    //       res(true)\n    //     }\n    //   })\n    // })\n\n    // if (valid) {\n    //   newItems.save()\n    // }\n    newItems.save().then(item => res.json(item));\n}\n`.trim();\n\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>arrayOp.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={arraysSchema}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>conditional.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={conditional}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>increase.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={increase}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>insertMany.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={insertMany}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>items.js</b><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={itemsModels}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>nested.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={nested}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>PluralizedCollectioName.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={PluralizedCollectioName}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>primaryUniqeId.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={primaryUniqeId}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>renameDoc.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={renameDoc}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>timeStamps.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={timeStamps}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n             <br/>\n             <br/>\n\n             <h3></h3>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MongoCurd));\n"],"sourceRoot":""}