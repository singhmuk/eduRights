{"version":3,"sources":["components/ReactJs/prismCode.js","components/javaScripts/sidebar.js","components/javaScripts/deepJs/array.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","nonInteger","forEach","copyWithin","iters","entries","multiArray","combined","spreadOp","modifyArr","jsNum","dataTypes","decimal","random","decimalToBinary","DecimalToOctal","DecimalToHex","stringFun","interpolation","Arrays","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/152.93f7b9be.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introJs' className={classes.line}>IntroJs-Proxies</Link></MenuItem>\n        <MenuItem><Link to='/prototypes' className={classes.line}>Prototypes-Defa. Param</Link></MenuItem>\n        <MenuItem><Link to='/JsObjects' className={classes.line}>JsObject</Link></MenuItem>\n        <MenuItem><Link to='/array' className={classes.line}>String</Link></MenuItem>\n\n        <MenuItem><Link to='/this' className={classes.line}>This-call(), apply(), bind()</Link></MenuItem>\n        <MenuItem><Link to='/clousers' className={classes.line}>Clousers</Link></MenuItem>\n        <MenuItem><Link to='/oops' className={classes.line}>Oops-GetSet</Link></MenuItem>\n        <MenuItem><Link to='/regular' className={classes.line}>Regular</Link></MenuItem>\n        <MenuItem><Link to='/keyedCollections' className={classes.line}>Keyed Collections</Link></MenuItem>\n\n        <MenuItem><Link to='/arrayApi' className={classes.line}>Indexed colle-Arr Obj</Link></MenuItem>\n        <MenuItem><Link to='/logic' className={classes.line}>Logic</Link></MenuItem>\n        <MenuItem><Link to='/findOutput' className={classes.line}>findOutput</Link></MenuItem>\n        <MenuItem><Link to='/mcqjs' className={classes.line}>McqJs</Link></MenuItem>\n\n        <MenuItem><Link to='/hackerRank' className={classes.line}>HackerRank1</Link></MenuItem>\n        <MenuItem><Link to='/hackerRank6' className={classes.line}>HackerRank2</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst nonInteger = `\nlet arr = []\narr[3.4] = 'Oranges'\n\narr.length                                                      // 0\narr.hasOwnProperty(3.4)                                         // true\n\narr.property = \"value\";                                         //Using arrays to store other properties\nconsole.log(arr);    \n`.trim();\n\nconst forEach = `\nconst event = {\n  name: 'Birthday Party',\n  guestList: ['Andrew', 'Jen', 'Mike'],\n  printGuestList() {\n      console.log('Guest list for ' + this.name)\n      \n      this.guestList.forEach((guest) => {\n          console.log(guest + ' is attending ' + this.name)\n      })\n  }\n}`.trim();\n\n\nconst copyWithin = `\nfunction copyWith(){\n  var arr = [];\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(mockdata => {\n        mockdata.map(val => {\n          arr.push(val.name);\n      })\n      \n    console.log('copyArr',copyArr(arr))\n    });\n  }\n    \n  const copyArr = (arr) => {\n    var result=arr.copyWithin(0,1,3);\n    return result;\n  }\n  \n  copyWith();`.trim()\n\nconst iters = `\narr.filter(val => 3 > val)\n\narr.find(val => 3 > val)\n\narr.findIndex(val => 3 > val)\n\narr.reduce((a, b) => a + b)\n\narr.some((a) => a > 4)\n\narr.toLocaleString('en', { timeZone: \"UTC\" })\n`.trim();\n\nconst entries = `\nconst entriesArr = (arr) => {\n  var itr = arr.entries();\n  for (var e of itr) {\n    console.log(e);\n  }\n}\n\nentriesArr(['a', 'b', 'c']);`.trim()\n\nconst multiArray = `\n//1\nlet a = new Array(4)\nfor (var i = 0; i < 4; i++) {\n  a[i] = new Array(4)\n  for (var j = 0; j < 4; j++) {\n    a[i][j] = [ + i + ', ' + j ];\n    console.log(a[i][j]);\n  }\n}\n\n\n//2\nlet myNestedArray = [\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  [['loop'], ['deep'], ['shift', 6, 7, 1000, 'method']],\n  [[['concat'], ['deeper'], [false, true, 'spread', 'array']],\n  [[['mutate', 1327.98], ['deepest', 'splice', 'slice', 'push']]\n  ]]\n];\n\nconsole.log(myNestedArray)`.trim();\n\nconst combined = `\nfunction spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun']; \n  return sentence;\n}\n\nconsole.log(spreadOut());`.trim();\n\nconst spreadOp = `\nfunction copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    newArr = [[...arr], ...newArr];\n    num--;\n  }\n  return newArr;\n}\n\nconsole.log(copyMachine([true, false, true], 2));`.trim();\n\nconst modifyArr = `\nlet user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj;\n};\n\nconsole.log(addFriend(user, 'Pete'));\n`.trim();\n\nconst jsNum = `\nex. (123).toString()\n\nx = Number(true)                                     //1\nx = Number(false)                                    //0\nx = Number(new Date())                               //1615382431900\nx = Number(\"999\")                                    //999\nx = Number(\"999 888\")                                //NaN\n\n\n// parseFloat\nx = parseFloat(\"10\")                                 //10\nx = parseFloat(\"10.00\")                              //10\nx = parseFloat(\"10.33\")                              //10.33\nx = parseFloat(\"34 45 66\")                           //34\nx = parseFloat(\"   60   \")                           //60\nx = parseFloat(\"40 years\")                           //40\nx = parseFloat(\"He was 40\")                          //NaN\n\n\n//isFinite\nx = isFinite(123)                                    //true\nx = isFinite(-1.23)                                  //true\nx = isFinite(\"123\")                                  //true\nx = isFinite(\"Hello\")                                //false\nx = isFinite(\"2005/12/12\")                           //false\n\n\n//isNaN\nx = isNaN(123)                                       //false\nx = isNaN(-1.23)                                     //false\nx = isNaN(\"123\")                                     //false\nx = isNaN(\"Hello\")                                   //true\nx = isNaN(\" \")                                       //false\nx = isNaN(true)                                      //false\nx = isNaN(undefined)                                 //true\nx = isNaN(NaN)                                       //true\nx = isNaN(0 / 0)                                     //true\nx = isNaN(null)                                      //false\n\nconsole.log(x)\n`.trim();\n\nconst dataTypes = `\nvar x = Math.abs(-7.25)                                             //7.25\nvar x = Math.abs(7.25)                                              //7.25\n\n\nvar x = Math.ceil(-7.25)                                            //-7\nvar x = Math.ceil(7.25)                                             //8\n\n\nvar x = Math.floor(-7.25)                                           //-8\nvar x = Math.floor(7.25)                                            //7\n\n\nvar x = Math.fround(-7.25)                                          //-7.25\nvar x = Math.fround(7.25)                                           //7.25\nvar x = Math.fround(2.60)                                           //2.5999999046325684\nvar x = Math.fround(2.50)                                           //2.5\n\nMath.max(-7.25, 7.25)                                               //7.25\nMath.min(-7.25, 7.25)                                               //-7.25\n//Sign\nvar x = Math.sign(7.25)                                                                //1\nvar x = Math.sign(-7.25)                                                               //-1\nvar x = Math.sign(0)                                                                   //0\nvar x = Math.sqrt(-7.25)                                                               //NaN\nvar x = Math.sqrt(9) \n\nconsole.log(x)\n\n\n//Math.PI\nconsole.log(Math.PI);                                               //3.14\n`.trim();\n\n\nconst decimal = `\nvar num = 123.4567\nvar mockData = [1, 6, 7, 8, 9, 0, 8, 2, 3, 4, 5]\n\nvar x = num.toFixed(2)\nx = num.toPrecision(6)\nx = mockData.sort()\nx = mockData[0] = \"cars\"\nx = delete mockData[0];\nx = mockData.splice(2, 0, \"Lemon\", \"Kiwi\");\nx = mockData.slice(1);\n\nconsole.log(x)\n`.trim();\n\nconst random = `\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n }\n \n getRndInteger(2,7)\n \n\n\n//2 Random Function\nfunction randomObj() {\n  let a, b, c, d, e, f, g, h, i, j\n     a = Math.floor(Math.random() * 10);                           //returns a random integer from 0 to 9.\n     b = Math.floor(Math.random() * 10) + 1;  \n     \n     return [a,\"-\", b]\n}\n\nrandomObj()\n`.trim();\n\n\nconst decimalToBinary = `function decimalToBinary(num) {\n  var bin = [];\n  while (num > 0) {\n    bin.unshift(num % 2);\n    num >>= 1;\n  }\n  console.log(bin.join(''));\n }\n \n decimalToBinary(2);\n`.trim();\n\n\nconst DecimalToOctal = `function decimalToOctal(num) {\n  var oct = 0,c=0;\n  while (num > 0) {\n    var r=num%8;\n    oct=oct+(r*Math.pow(10,c++));\n    num =Math.floor(num/ 8);                                   //basically /= 8 without remainder if any.\n  }\n  console.log(oct);\n }\n \n decimalToOctal(2);\n `.trim();\n\nconst DecimalToHex = `\n function intToHex(num){\n   switch(num){\n         case 10: return \"A\";\n         case 11: return \"B\";\n         case 12: return \"C\";\n         case 13: return \"D\";\n         case 14: return \"E\";\n         case 15: return \"F\";\n       }\n     return num;\n  }\n  \n  function decimalToHex(num){\n     let hex_out = [];\n     while(num > 15) {\n       hex_out.push(intToHex(num/16))\n   }\n   \n return intToHex(num) + hex_out.join(\"\");\n }\n \n console.log(decimalToHex(999098) === \"F3EBA\");\n console.log(decimalToHex(123) === \"7B\");\n `.trim();\n\nconst stringFun = `\n var a = new Date();                                  //Wed Mar 10 2021 19:18:41 GMT+0530 (India Standard Time)\n var b = \"12345\";                                                //12345\n var c = 12345;                                                  //12345\n `.trim();\n\nconst trim = `\n var str = 'Centralized empowering task-force';\n var str2 = '';\n var str3 = '';\n \n str = str.charAt(3)\n str2 = str.concat(str3)\n str3 = str2.charCodeAt(3)                                                         //116\n str4 = str.indexOf('t')                                                           //-1\n str5 = str2.search('empowering')                                                  //12\n str6 = str2.match('ing')\n str7 = str2.replace('empowering', 'women')                                 //Centralized women task-force\n str8 = str2.substr(2, 7)                                                          //ntraliz\n str9 = str2.substring(2, 7)                                                       //ntral            \n str10 = str2.valueOf()                                                     //Centralized empowering task-force\n str11 = \"   empowering\"\n str12 = str11.slice(2, 5)                                                         //em\n str13 = str11.toUpperCase()                                                       //EMPOWERING\n \n console.log('toUpperCase', str13)\n   `.trim();\n\n\nconst interpolation = `\n let firstName = \"John\";\n let lastName = \"Doe\";\n \n let text = 'Welcome '$'{firstName}, '$'{lastName}!';\n console.log(text)\n `.trim();\n\n\nclass Arrays extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>Indexed collections: </b>\n              An array is an ordered list of values that refer with a name and an index.\n              <br />\n              <h3>1.Creating an array</h3>\n              <ul>\n                <li>let arr = new Array(0, 1, ..., N);</li>\n                <li>let arr = Array(0, 1, ..., N);</li>\n                <li>let arr = [0, 1, ..., N];</li>\n              </ul>\n              <br />\n              If supply a non-integer value to the array operator, a property will be created in the\n              object representing the array, instead of an array element.\n              <div style={titles}>\n                <PrismCode\n                  code={nonInteger}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Array Methods</h3>\n              const arr = [\"Saab\", \"Volvo\", \"BMW\", 1, 2, 3, 4, 5, new Date('08 Jan 1997 17:12:00 UTC')];\n              <br />\n              <br />\n\n              Also create an array, and then provide the elements:\n              <br />\n              const cars = [];<br />\n              cars[0]= \"Saab\";\n\n              <br />\n              <br />\n              <b>Using new keyword: </b>\n              const arr2 = new Array(\"Aulto\", \"Zipsi\", \"Bokati\");\n              <br />\n              <ul>\n                <li><b>Accessing array elements: </b>arr[0]</li>\n                <li><b>Changing an array element: </b>arr[0] = \"Opel\"</li>\n                <li><b>arr.length: </b></li>\n                <li><b>arr.sort(): </b></li>\n                <li><b>arr.push(\"Lemon\"): </b>Adds one or more elements to the end of an array.</li>\n                <li><b>arr.pop(): </b>Removes and returns the last element of an array.</li>\n                <li><b>shift():</b>It removes and returns the first element of an array.</li>\n                <li><b>unshift(): </b>Adds one or more elements in the beginning of the given array.</li>\n                <li><b>Array.isArray(arr): </b>Tests if the passed value ia an array.</li>\n                <li><b>toString(): </b>arr.toString()</li>\n                <ul>\n                  <li>It converts the elements of a specified array into string form, without affecting the original array.</li>\n                </ul>\n                <br />\n\n                <li><b>arr.flat(): </b>Creates a new array carrying sub-array elements concatenated recursively till the specified depth.</li>\n                <li><b>arr.fill(\"Bootstrap\"): </b>Fills elements into an array with static values.</li>\n                <li><b>Array.from(arr): </b>Creates a new array carrying the exact copy of another array element.</li>\n                <li><b>arr.includes(\"Saab\"): </b>Checks whether the given array contains the specified element.</li>\n                <li><b>arr.indexOf(\"Saab\"): </b>Searches the specified element in the given array and returns the index of the first match.</li>\n                <li><b>arr.join(\"-\"): </b>Joins the elements of an array as a string.</li>\n                <li><b>arr.lastIndexOf(\"BMW\"): </b>Searches the specified element in the given array and returns the index</li>\n                <li><b>arr.reverse(): </b>Reverses the elements of given array.</li>\n                <li><b>arr.slice(1, 2): </b>Returns a new array containing the copy of the part of the given array.</li>\n                <li><b>arr.sort(): </b></li>\n                <li><b>arr.splice(1, 2): </b>Modify original array.</li>\n                <li><b>concat(): </b>Returns a new array object that contains two or more merged arrays.</li>\n                forEach(), map(), of(), reduceRight()\n              </ul>\n              <br />\n\n              <h3>Iterator Array</h3>\n              <ul>\n                <li><b>filter(): </b>Returns the new array containing the elements that pass the provided function conditions.</li>\n                <li><b>find(): </b>Returns the value of the first element in the given array that satisfies the specified condition.</li>\n                <li><b>findIndex(): </b>Returns the index value of the first element in the given array that satisfies the specified condition.</li>\n                <li><b>reduce(): </b>Executes a provided function for each value from left to right and reduces the array to a single value.</li>\n                <li><b>some(): </b>Determines if any element of the array passes the test of the implemented function.</li>\n                <li><b>toLocaleString(): </b>Returns a string containing all the elements of a specified array.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={iters}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>entries(): </b>It creates an iterator object and a loop that iterates over each key/value pair.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={entries}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>values():</b> It creates a new iterator object carrying values for each index in the array.\n              <br />\n              <br />\n\n              <b>Multi-dimensional arrays: </b>Array can contain another array as an element.\n              <br />\n              <b>Ex. </b>Creates a two-dimensional array.\n              <div style={titles}>\n                <PrismCode\n                  code={multiArray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2. Combine Arrays with the Spread Operator</h3>\n              <p>\n                Spread operator have ability to combine arrays, or to insert all the elements of one array into another, at any index.\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={combined}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Copy an Array with the Spread Operator</b>\n              <p>\n                <ul>\n                  <li>While slice() allows us to be selective about what elements of an array to copy</li>\n                  <li>Spread operator allows us to easily copy all of an array's elements.</li>\n                </ul>\n              </p>\n              <div style={titles}>\n                <PrismCode\n                  code={spreadOp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Modify an Array Stored in an Object</b>\n              <div style={titles}>\n                <PrismCode\n                  code={modifyArr}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>3. Create a Set</h3>\n              const my_set = new Set([\"a\", \"b\", \"c\", \"a\"])\n              <br />\n              <br />\n              <b>Add items in existing set: </b>my_set.add(\"ab\");\n              <br />\n\n              <b>Set Methods: </b>\n              <ul>\n                <li><b>my_set.values(): </b>returns a new Set containing all the values in a Set.</li>\n                <li><b>my_set.add(\"UO\"): </b>Adds a new element to the Set.</li>\n                <li><b>delete(): </b>Removes an element from a Set.</li>\n                <li><b>has(): </b>Returns true if a value exists in the Set.</li>\n                <li><b>values: </b>Returns an iterator with all the values in a Set.</li>\n                <li><b>size: </b>Returns the number of elements in a Set.</li>\n              </ul>\n              <br />\n\n              <h3>4. JsNumbers</h3>\n              JavaScript Numbers are Always 64-bit Floating Point.\n              <br />\n              <p><b>parseFloat():</b> Parses a string and returns a floating point number.</p>\n              <p>\n                This function determines if the first character in the specified string is a number. If it is, it parses the string until it reaches\n                the end of the number, and returns the number as a number, not as a string.\n              </p>\n              <ul>\n                <li>Only the first number in the string is returned!</li>\n                <li>Leading and trailing spaces are allowed.</li>\n                <li>If the first character cannot be converted to a number, parseFloat() returns NaN.</li>\n              </ul>\n              <br />\n              <br />\n\n              <b>isFinite:</b>\n              <ul>\n                <li>Determines whether a number is a finite, legal number.</li>\n                <li>Returns false if the value is +infinity, -infinity, or NaN, Otherwise it returns true.</li>\n              </ul>\n              <br />\n\n              <b>isNan: </b>\n              <ul>\n                <li>Returns true if the argument is not a number otherwise it is false.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li>This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in\n                  bits 52 to 62, and the sign in bit 63.</li>\n                <li>Extra large or extra small numbers can be written with scientific (exponent) notation.</li>\n                <li>NaN is a JavaScript reserved word indicating that a number is not a legal number.\n                  Trying to do arithmetic with a non-numeric string will result in NaN.\n                  <br />\n                  <b>Ex. </b>100 / \"Apple\";</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li><b>toString(): </b>Returns a number as a string.</li>\n                <li><b>toFixed(): </b>Returns a string, with the number written with a specified number of decimals.</li>\n                <li><b>toPrecision(): </b>Returns a string, with a number written with a specified length.</li>\n                <li><b>parseInt(): </b>Parses a string and returns a whole number.</li>\n                <li><b>splice(): </b>Method can be used to add new items to an array.</li>\n                <li><b>slice(): </b>Method creates a new array. It does not remove any elements from the source array.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={jsNum}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Sign</b>\n              <ul>\n                <li><b>Math.abs: </b>Return the absolute value of a number.</li>\n                <li><b>ceil():: </b>Rounds a number UPWARDS to the nearest integer, and returns the result.</li>\n                <li><b>floor(): </b>Round a number downward to its nearest integer.</li>\n                <li><b>round(): </b>Returns the nearest (32-bit single precision) float representation of a number.</li>\n                <li><b>max(): </b>Returns the number with the highest value.</li>\n                <li><b>min(): </b>Returns the number with the lowest value.</li>\n                <br />\n                <br />\n                The sign() method checks whether a number is negative, positive or zero.\n                <li>If the number is positive, this method returns 1.</li>\n                <li>If the number is negative, it returns -1.</li>\n                <li>If the number is zero, it returns 0.</li>\n                <li><b>sqrt(): </b>Return the square root of a number.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={dataTypes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Numbers formate</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>6. Random Number</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={random}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>7. DecimalToBinary</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={decimalToBinary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>8. DecimalToOctal</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={DecimalToOctal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>9. DecimalToHex</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={DecimalToHex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>10. String</h3>\n              <ul>\n                <li>String() converts the value of an object to a string.</li>\n                <li>String() returns the same value as toString() of the individual objects.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={stringFun}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>There are 2 ways to create string in JavaScript</b>\n              <br />\n              1.By string literal<br />\n              var str = \"Please locate where 'locate' occurs!\";\n              <br />\n              <br />\n              2.By string object<br />\n              var str2 = new String(\"string literal\");\n              <br />\n              <br />\n              <ul>\n                <li><b>charAt:</b> It provides the char value present at the specified index.</li>\n                <li><b>charCodeAt():</b> It provides the Unicode value of a character present at the specified index.</li>\n                <li><b>concat():</b> It provides a combination of two or more strings.</li>\n                <li><b>indexOf():</b> It provides the position of a char value present in the given string.</li>\n                <li>\n                  <b>lastIndexOf():</b> It provides the position of a char value present in the given string by searching a character from\n                  the last position.\n                </li>\n                str.lastIndexOf(\"locate\", 15)\n                <li>\n                  <b>search():</b> It searches a specified regular expression in a given string and returns its position if a match\n                  occurs.\n                </li>\n                <br />\n                <br />\n\n                <b>indexOf() and search() accept the same arguments, and return the same value. But they has differences as:</b>\n                <ul>\n                  <li>The search() method cannot take a second start position argument.</li>\n                  <li>The indexOf() method cannot take regular expressions.</li>\n                </ul>\n                <br />\n\n                <li>\n                  <b>match():</b> It searches a specified regular expression in a given string and returns that regular expression if\n                  a match occurs, as an Array object.\n                </li>\n                <li>\n                  <b>replace():</b> It replaces a given string with the specified replacement.\n                </li>\n                <li>\n                  <b>substr():</b> It is used to fetch the part of the given string on the basis of the specified starting position and\n                  length.\n                </li>\n                <li><b>substring(): </b>\n                  <ul>\n                    <li>substring() is similar to slice(), but substring() cannot accept negative indexes.</li>\n                    <li>It is used to fetch the part of the given string on the basis of the specified index.</li>\n                  </ul>\n                </li>\n                <br />\n\n                <li><b>valueOf():</b> It provides the primitive value of string object.</li>\n                <li><b>trim():</b> It trims the white space from the left and right side of the string.</li>\n                str.trim()\n                <br />\n                <br />\n\n                <li><b>str.length: </b></li>\n                <li><b>str.includes(\"Please\"): </b></li>\n                <li><b>str.startsWith(\"occurs\"): </b></li>\n                <li><b>str.endsWith(\"locate\"): </b></li>\n                <li><b>str.slice(7, 13): </b></li>\n                <li><b>str.toUpperCase(): </b></li>\n                <li><b>str.toLowerCase(): </b></li>\n                <li><b>Property Access: </b>str[0]</li>\n                <li><b>String can be converted to an array with the split() method: </b>str.split(\" \")</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={trim}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>11. String Interpolation</h3>\n              <ul>\n                <li>It allows injecting variables, function calls, arithmetic expressions directly into a string.</li>\n                <li>In JavaScript, the template literals and $ Curly braces expression as placeholders perform the string interpolation.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={interpolation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>12. Difference between Map and foreach.</h3>\n              <table>\n                <tr>\n                  <th>Value</th>\n                  <th>foreach</th>\n                  <th>Map</th>\n                </tr>\n                <tr>\n                  <td><b>Functionality</b></td>\n                  <td>Performs given operation on each element of the array</td>\n                  <td>Performs given \"transformation\" on \"copy\" of each element </td>\n                </tr>\n                <tr>\n                  <td><b>Return value</b></td>\n                  <td>undefined</td>\n                  <td>new array with tranformed elements leaving back original array unchanged.</td>\n                </tr>\n                <tr>\n                  <td><b>Processing</b></td>\n                  <td>Performing non-transformation like processing on each element.</td>\n                  <td>Obtaining array containing output of some processing done on each element of the array.</td>\n                </tr>\n              </table>\n              <br />\n\n              <ul>\n                <li>map() is chainable. This means we can attach reduce(), sort(), filter() and so on\n                  after performing a map() method on an array.</li>\n                <li>But we can't do with forEach()</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={forEach}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>13. Fetch javaScript</h3>\n              It copies the part of the given array with its own elements and returns the modified array.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={copyWithin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Arrays));\n"],"sourceRoot":""}