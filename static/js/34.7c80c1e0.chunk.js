(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[34],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return E}));var a=t(45),l=t(28),r=t(136),c=t(137),i=t(139),s=t(0),u=t.n(s),o=t(138),m=t.n(o),E=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(r.a)(this,Object(c.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&m.a.highlightElement(t.ref.current)},t.ref=u.a.createRef(),t}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return u.a.createElement("pre",{className:"code-prism"},u.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(u.a.Component))},141:function(e,n,t){},152:function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));var a=t(0),l=t.n(a),r=t(26),c=t(297),i=t(295),s=t(114),u=Object(s.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function o(){var e=u();return l.a.createElement("div",{className:e.root},l.a.createElement(i.a,null,l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/introAlgo",className:e.line},"Deadlock")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/Stack",className:e.line},"Stack")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/Queue",className:e.line},"Queue")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/linkedList",className:e.line},"LinkedList")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/heap",className:e.line},"Heap")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/trees",className:e.line},"Tree")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/graph",className:e.line},"Graph")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/sort",className:e.line},"QuickSort")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/searchAlgo",className:e.line},"Search")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/topTech",className:e.line},"TopTech")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/stringAlgo",className:e.line},"String")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/arrayAlgo",className:e.line},"Array")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/nestingArrAlgo",className:e.line},"Nesting Array")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/numbersAlgo",className:e.line},"Numbers")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/gameAlgo",className:e.line},"Game")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/arrayStrAlgo",className:e.line},"ArrayStr")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/arrayNumAlgo",className:e.line},"ArrayNum")),l.a.createElement(c.a,null,l.a.createElement(r.b,{to:"/dslogic8",className:e.line},"Logic8"))),l.a.createElement("div",null))}},157:function(e,n,t){e.exports=t.p+"static/media/stcks.7efa3b78.png"},446:function(e,n,t){"use strict";t.r(n);var a=t(45),l=t(28),r=t(136),c=t(137),i=t(139),s=t(0),u=t.n(s),o=t(138),m=t.n(o),E=t(120),g=t(57),p=t(296),b=t(5),h=(t(141),t(152)),f=t(140),d=(t(157),{backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"}),A="\nfunction isValid(s){\n  const stack = [];\n  const pair = {\n    '[': ']',\n    '{': '}',\n    '(': ')',\n  };\n  const isPaired = (a, b) => pair[a] === b;\n\n  for (c of s) {\n    if (isPaired(stack[stack.length - 1], c)) {\n      stack.pop();\n    } else {\n      stack.push(c);\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(isValid(\"()\"))\n".trim(),v="\nfunction generateParenthesis(n) {\n  const result = [];\n\n  function aux(current, left, right){\n    if (left === n && right === n) {\n      result.push(current)\n      return\n    }\n    if (left < right || left > n || right > n) return;\n\n    aux('$'{current}(', left + 1, right)\n    aux('$'current})', left, right + 1)\n  }\n  aux('', 0, 0)\n  return result;\n}\n\nconsole.log(generateParenthesis(3))\n".trim(),y="\nfunction largestPerimeter(A = []) {\n  A.sort((a, b) => b - a);\n  for (let i = 0; i < A.length - 2; i++) {\n    if (A[i] < A[i + 1] + A[i + 2]) {\n      return A[i] + A[i + 1] + A[i + 2];\n    }\n  }\n  return 0;\n}\n\nconsole.log(largestPerimeter([2,1,2]))\n".trim(),N="\nfunction generate(numRows){\n  const result = [];\n\n  for (let i = 0; i < numRows; i++) {\n    const current = [];\n    for (let j = 0; j <= i; j++) {\n      if (result[i - 1] && result[i - 1][j] && result[i - 1][j - 1]) {\n        current.push(result[i - 1][j] + result[i - 1][j - 1]);\n      } else {\n        current.push(1);\n      }\n    }\n    result.push(current);\n  }\n  return result;\n}\n\nconsole.log(generate(5))\n".trim(),j="\nfunction computeArea(A, B, C, D, E, F, G, H){\n  const area = (pointA, pointB) => (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n  const totalArea = area([A, B], [C, D]) + area([E, F], [G, H]);\n\n  if (E >= C || G <= A || F >= D || H <= B) return totalArea;\n\n  const pointA = [Math.max(A, E), Math.max(B, F)];\n  const pointB = [Math.min(C, G), Math.min(D, H)];\n  const overlapping = (pointB[0] - pointA[0]) * (pointB[1] - pointA[1]);\n\n  return totalArea - overlapping;\n}\n\nconsole.log(computeArea(-3, 0, 3, 4, 0, -1, 9, 2))\n".trim(),k="".trim(),x=function(e){function n(){return Object(a.a)(this,n),Object(r.a)(this,Object(c.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return u.a.createElement(E.a,{container:!0},u.a.createElement(E.a,{item:!0,xs:2},u.a.createElement(g.a,{className:e.paper},u.a.createElement("h4",null,u.a.createElement(h.a,null)))),u.a.createElement(E.a,{item:!0,xs:10},u.a.createElement(g.a,{className:e.paper},u.a.createElement(p.a,null,u.a.createElement("h3",null,"1. Valid Parentheses"),"Given a string s containing just the characters '(', ')', '",", ","', '[' and ']', determine if the input string is valid.",u.a.createElement("br",null),"An input string is valid if:",u.a.createElement("br",null),u.a.createElement("ul",null,u.a.createElement("li",null,"Open brackets must be closed by the same type of brackets."),u.a.createElement("li",null,"Open brackets must be closed in the correct order.")),u.a.createElement("br",null),u.a.createElement("b",null,"Example 1: "),u.a.createElement("b",null,"Input: "),'s = "()"',u.a.createElement("br",null),u.a.createElement("b",null,"Output: "),"true",u.a.createElement("br",null),u.a.createElement("br",null),u.a.createElement("b",null,"Example 2: "),u.a.createElement("b",null,"Input: "),'s = "()[]','"',u.a.createElement("br",null),u.a.createElement("b",null,"Output: "),"true",u.a.createElement("br",null),u.a.createElement("br",null),u.a.createElement("b",null,"Example 3: "),u.a.createElement("b",null,"Input: "),'s = "(]"',u.a.createElement("br",null),u.a.createElement("b",null,"Output: "),"false",u.a.createElement("div",{style:d},u.a.createElement(f.a,{code:A,language:"js",plugins:["line-numbers"]})),u.a.createElement("br",null),u.a.createElement("h3",null,"2. Generate Parentheses."),"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",u.a.createElement("br",null),u.a.createElement("b",null,"Ex. ")," given n = 3, a solution set is: ",u.a.createElement("br",null),"[",u.a.createElement("br",null),'"((()))", ',u.a.createElement("br",null),'"(()())", ',u.a.createElement("br",null),'"(())()", ',u.a.createElement("br",null),'"()(())", ',u.a.createElement("br",null),'"()()()" ',u.a.createElement("br",null),"]",u.a.createElement("div",{style:d},u.a.createElement(f.a,{code:v,language:"js",plugins:["line-numbers"]})),u.a.createElement("br",null),u.a.createElement("h3",null,"3. Largest Perimeter Triangle."),"Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.",u.a.createElement("br",null),"If it is impossible to form any triangle of non-zero area, return 0.",u.a.createElement("div",{style:d},u.a.createElement(f.a,{code:y,language:"js",plugins:["line-numbers"]})),u.a.createElement("br",null),u.a.createElement("h3",null,"4. Pascal's Triangle"),"Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.",u.a.createElement("br",null),"In Pascal's triangle, each number is the sum of the two numbers directly above it.",u.a.createElement("div",{style:d},u.a.createElement(f.a,{code:N,language:"js",plugins:["line-numbers"]})),u.a.createElement("br",null),u.a.createElement("h3",null,"5. Rectangle Area."),"Find the total area covered by two rectilinear rectangles in a 2D plane.",u.a.createElement("br",null),"Each rectangle is defined by its bottom left corner and top right corner.",u.a.createElement("div",{style:d},u.a.createElement(f.a,{code:j,language:"js",plugins:["line-numbers"]})),u.a.createElement("br",null),u.a.createElement("h3",null),u.a.createElement("div",{style:d},u.a.createElement(f.a,{code:k,language:"js",plugins:["line-numbers"]}))))))}}]),n}(s.Component);n.default=Object(b.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(x)}}]);
//# sourceMappingURL=34.7c80c1e0.chunk.js.map