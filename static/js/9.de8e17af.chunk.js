(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[9],{140:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n(45),r=n(28),l=n(136),i=n(137),o=n(139),s=n(0),c=n.n(s),m=n(138),u=n.n(m),p=(n(59),function(e){function t(e){var n;return Object(a.a)(this,t),(n=Object(l.a)(this,Object(i.a)(t).call(this,e))).highlight=function(){n.ref&&n.ref.current&&u.a.highlightElement(n.ref.current)},n.ref=c.a.createRef(),n}return Object(o.a)(t,e),Object(r.a)(t,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,t=e.code,n=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(n)},t.trim()))}}]),t}(c.a.Component))},141:function(e,t,n){},152:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var a=n(0),r=n.n(a),l=n(26),i=n(297),o=n(295),s=n(114),c=Object(s.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function m(){var e=c();return r.a.createElement("div",{className:e.root},r.a.createElement(o.a,null,r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/introAlgo",className:e.line},"Deadlock")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/Stack",className:e.line},"Stack")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/Queue",className:e.line},"Queue")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/linkedList",className:e.line},"LinkedList")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/heap",className:e.line},"Heap")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/trees",className:e.line},"Tree")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/graph",className:e.line},"Graph")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/sort",className:e.line},"QuickSort")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/searchAlgo",className:e.line},"Search")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/topTech",className:e.line},"TopTech")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/stringAlgo",className:e.line},"String")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/arrayAlgo",className:e.line},"Array")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/nestingArrAlgo",className:e.line},"Nesting Array")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/numbersAlgo",className:e.line},"Numbers")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/gameAlgo",className:e.line},"Game")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/arrayStrAlgo",className:e.line},"ArrayStr")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/arrayNumAlgo",className:e.line},"ArrayNum")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/dslogic8",className:e.line},"Logic8"))),r.a.createElement("div",null))}},192:function(e,t,n){e.exports=n.p+"static/media/sort_1.fbb19f97.png"},193:function(e,t,n){e.exports=n.p+"static/media/sort_2.5b288ce9.png"},194:function(e,t,n){e.exports=n.p+"static/media/insertion_sort.3b05e5d1.png"},195:function(e,t,n){e.exports=n.p+"static/media/selection_short.df78534b.png"},196:function(e,t,n){e.exports=n.p+"static/media/bubble_short.45f1eb10.png"},435:function(e,t,n){"use strict";n.r(t);var a=n(45),r=n(28),l=n(136),i=n(137),o=n(139),s=n(0),c=n.n(s),m=n(138),u=n.n(m),p=n(120),g=n(57),h=n(296),f=n(5),E=(n(141),n(152)),b=n(140),d=n(192),v=n.n(d),y=n(193),_=n.n(y),j=n(194),x=n.n(j),A=n(195),S=n.n(A),N=n(196),k=n.n(N),w={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},O={height:500},F='function quick_Sort(origArray) {\n\tif (origArray.length <= 1) { \n\t\treturn origArray;\n\t} else {\n\n\t\tvar left = [];\n\t\tvar right = [];\n\t\tvar newArray = [];\n\t\tvar pivot = origArray.pop();\n\t\tvar length = origArray.length;\n\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tif (origArray[i] <= pivot) {\n\t\t\t\tleft.push(origArray[i]);\n\t\t\t} else {\n\t\t\t\tright.push(origArray[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn newArray.concat(quick_Sort(left), pivot, quick_Sort(right));\n\t}\n}\n\nvar myArray = [3, 0, 2, 5, -1, 4, 1 ];\n\nconsole.log("Original array: " + myArray);\nvar sortedArray = quick_Sort(myArray);\nconsole.log("Sorted array: " + sortedArray);'.trim(),I="\nfunction merge_sort(left_part,right_part) \n{\n\tvar i = 0;\n\tvar j = 0;\n\tvar results = [];\n\n\twhile (i < left_part.length || j < right_part.length) {\n\t\tif (i === left_part.length) {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t} \n      else if (j === right_part.length || left_part[i] <= right_part[j]) {\n\t\t\tresults.push(left_part[i]);\n\t\t\ti++;\n\t\t} else {\n\t\t\tresults.push(right_part[j]);\n\t\t\tj++;\n\t\t}\n\t}\n\treturn results;\n}\n\nconsole.log(merge_sort([1,3,4], [3,7,9]));".trim(),J="\nvar array_length;\n/* to create MAX  array */  \nfunction heap_root(input, i) {\n    var left = 2 * i + 1;\n    var right = 2 * i + 2;\n    var max = i;\n\n    if (left < array_length && input[left] > input[max]) {\n        max = left;\n    }\n\n    if (right < array_length && input[right] > input[max])     {\n        max = right;\n    }\n\n    if (max != i) {\n        swap(input, i, max);\n        heap_root(input, max);\n    }\n}\n\nfunction swap(input, index_A, index_B) {\n    var temp = input[index_A];\n\n    input[index_A] = input[index_B];\n    input[index_B] = temp;\n}\n\nfunction heapSort(input) {\n    \n    array_length = input.length;\n\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\n        heap_root(input, i);\n      }\n\n    for (i = input.length - 1; i > 0; i--) {\n        swap(input, 0, i);\n        array_length--;\n      \n      \n        heap_root(input, 0);\n    }\n}\n\nvar arr = [3, 0, 2, 5, -1, 4, 1];\nheapSort(arr);\nconsole.log(arr);".trim(),D="\nconst insertion_Sort = (nums) => {\n  for (let i = 1; i < nums.length; i++) {\n    let j = i - 1\n    let temp = nums[i]\n    while (j >= 0 && nums[j] > temp) {\n      nums[j + 1] = nums[j]\n      j--\n    }\n    nums[j+1] = temp\n  }\n  return nums\n}\nconsole.log(insertion_Sort([3, 0, 2, 5, -1, 4, 1]));\nconsole.log(insertion_Sort([2,6,5,12,-1,3,8,7,1,-4,0,23,1,-55,20,37,54,210,-23]));".trim(),M="\nfunction Selection_Sort(arr, compare_Function) {\n\n  function compare(a, b) {\n   return a - b;\n   } \n  var min = 0;\n  var index = 0;\n  var temp = 0;\n\n //{Function} compare_Function Compare function\n  compare_Function = compare_Function || compare;\n\n  for (var i = 0; i < arr.length; i += 1) {\n    index = i;\n    min = arr[i];\n\n    for (var j = i + 1; j < arr.length; j += 1) {\n      if (compare_Function(min, arr[j]) > 0) {\n        min = arr[j];\n        index = j;\n      }\n    }\n\n    temp = arr[i];\n    arr[i] = min;\n    arr[index] = temp;\n  }\n\n  //return sorted arr\n  return arr;\n}\n\nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return a - b; })); \nconsole.log(Selection_Sort([3, 0, 2, 5, -1, 4, 1], function(a, b) { return b - a; }));".trim(),T="\nfunction swap(arr, first_Index, second_Index){\n  var temp = arr[first_Index];\n  arr[first_Index] = arr[second_Index];\n  arr[second_Index] = temp;\n}\n\nfunction bubble_Sort(arr){\n\n  var len = arr.length,\n      i, j, stop;\n\n  for (i=0; i < len; i++){\n      for (j=0, stop=len-i; j < stop; j++){\n          if (arr[j] > arr[j+1]){\n              swap(arr, j, j+1);\n          }\n      }\n  }\n\n  return arr;\n}\nconsole.log(bubble_Sort([3, 0, 2, 5, -1, 4, 1]));".trim(),W=function(e){function t(){return Object(a.a)(this,t),Object(l.a)(this,Object(i.a)(t).apply(this,arguments))}return Object(o.a)(t,e),Object(r.a)(t,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(p.a,{container:!0},c.a.createElement(p.a,{item:!0,xs:2},c.a.createElement(g.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(E.a,null)))),c.a.createElement(p.a,{item:!0,xs:10},c.a.createElement(g.a,{className:e.paper},c.a.createElement(h.a,null,c.a.createElement("h3",null,"Write a JavaScript program to sort a list of elements using Quick sort."),c.a.createElement("i",null,'Quick sort is a comparison sort, meaning that it can sort items of any type for which a "less-than" relation is defined.'),c.a.createElement("br",null),c.a.createElement("img",{src:v.a,alt:"",className:"responsive",style:O}),c.a.createElement("img",{src:_.a,alt:"",className:"responsive",style:O}),c.a.createElement("br",null),c.a.createElement("div",{style:w},c.a.createElement(b.a,{code:F,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("h2",null,"Write a JavaScript program to sort a list of elements using Merge sort."),c.a.createElement("i",null,"Merge sort is an O (n log n) comparison-based sorting algorithm.",c.a.createElement("br",null),"Divide the unsorted list into n sublists, each containing 1 element.",c.a.createElement("br",null),"Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list"),c.a.createElement("div",{style:w},c.a.createElement(b.a,{code:I,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("h3",null,"Write a JavaScript program to sort a list of elements using Heap sort."),"Worst-case O(n log n) runtime",c.a.createElement("div",{style:w},c.a.createElement(b.a,{code:J,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("h3",null,"Write a JavaScript program to sort a list of elements using Insertion sort."),c.a.createElement("div",{style:w},c.a.createElement("img",{src:x.a,alt:"",className:"responsive"}),c.a.createElement(b.a,{code:D,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("h3",null,"Write a JavaScript program to sort a list of elements using the Selection sort."),c.a.createElement("i",null,"The selection sort improves on the bubble sort by making only one exchange for every pass through the list"),c.a.createElement("div",{style:w},c.a.createElement("img",{src:S.a,alt:"",className:"responsive",style:O}),c.a.createElement(b.a,{code:M,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("h3",null,"Write a JavaScript program to sort a list of elements using Bubble sort."),c.a.createElement("i",null,"It is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order"),c.a.createElement("div",{style:w},c.a.createElement("img",{src:k.a,alt:"",className:"responsive"}),c.a.createElement(b.a,{code:T,language:"js",plugins:["line-numbers"]}))))))}}]),t}(s.Component);t.default=Object(f.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(W)}}]);
//# sourceMappingURL=9.de8e17af.chunk.js.map