{"version":3,"sources":["components/ReactJs/prismCode.js","components/Redux/sidebar.js","components/Redux/deep/contactKeeperApi.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","useSelector","reducers","components","reducersCurd","actions","ContctHooks","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/85.5765d394.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introRedux' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/counter' className={classes.line}>Counter Select</Link></MenuItem>\n        <MenuItem><Link to='/reduxState' className={classes.line}>Redux State-Curd</Link></MenuItem>\n        <MenuItem><Link to='/reduxMethods' className={classes.line}>Redux Methods</Link></MenuItem>\n        <MenuItem><Link to='/react_redux' className={classes.line}>Filter</Link></MenuItem>\n        <MenuItem><Link to='/reduxCurd' className={classes.line}>Redux Curd</Link></MenuItem>\n        <MenuItem><Link to='/expenseTraMern' className={classes.line}>ReactCurdPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/contactKeeperApi' className={classes.line}>ReactReduxCurdPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/mernRedux' className={classes.line}>Mern Redux</Link></MenuItem>\n        <MenuItem><Link to='/signUp' className={classes.line}>SignUP</Link></MenuItem>\n        <MenuItem><Link to='/git' className={classes.line}>Git</Link></MenuItem>\n        <MenuItem><Link to='/gitConcepts' className={classes.line}>Git Concepts</Link></MenuItem>\n        <MenuItem><Link to='/skills' className={classes.line}>Skills</Link></MenuItem>\n        <MenuItem><Link to='/comskills' className={classes.line}>Comskills</Link></MenuItem>\n        <MenuItem><Link to='/techskills' className={classes.line}>Techskills</Link></MenuItem>\n        <MenuItem><Link to='/techinto' className={classes.line}>TechsInto</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useSelector = `\n//components/getPosts.js\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postData';\n\nconst Posts  = (props) => {\n  useEffect(() => {\n    props.fetchPosts();\n  })\n  \n  const getItems = () => {\n    return props.data.map(post => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ))\n  }\n\n    return (\n      <div>{getItems()}</div>\n    );\n  }\n\nconst mapStateToProps = state => ({\n  data: state.object.items\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);`.trim();\n\nconst reducers = `\n//actions/types.js\nexport const GET_DATA = 'GET_DATA';\n\n\n//actions/postActions.js\nimport { GET_DATA } from './types';\n\nexport const fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.json())\n    .then(posts =>\n      dispatch({\n        type: GET_DATA,\n        payload: posts\n      })\n    );\n};\n\n\n//reducers/mapList.js\nimport { GET_DATA } from '../actions/types';\n\nconst initialState = {\n  items: [],\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_DATA:\n      return {\n        ...state,\n        items: action.payload\n      };\n    \n    default:\n      return state;\n  }\n}\n`.trim();\n\nconst components = `\n//AddContact.js\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../actions/contactAction\";\nimport shortid from \"shortid\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AddContact = () => {\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  const createContact = (e) => {\n    e.preventDefault();\n    const new_contact = {\n      id: shortid.generate(),\n      name: name,\n      phone: phone,\n      email: email,\n    };\n    dispatch(addContact(new_contact));\n    history.push(\"/\");\n  };\n\n  return (\n    <form onSubmit={(e) => createContact(e)}>\n      <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n      <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n      <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <button type=\"submit\"> Create Contact </button>\n    </form>\n  );\n};\n\n\n\n//Contact.js\nimport { Link } from \"react-router-dom\";\nimport { deleteContact } from \"../actions/contactAction\";\nimport { useDispatch } from \"react-redux\";\nconst Contact = ({ contact, selectAll }) => {\n\n  const dispatch = useDispatch();\n  const { name, phone, email, id } = contact;\n  return (\n    <tr>\n      <input type=\"checkbox\" checked={selectAll} />\n      <td>{name}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td>\n        <Link to={'/contacts/edit/'$'{id}'}>E</Link>\n        <span onClick={() => dispatch(deleteContact(id))}>X</span>\n      </td>\n    </tr>\n  );\n};\n\n\n\n//Contacts.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  clearAllContact,\n  selectAllContact,\n  deleteAllContact,\n} from \"../actions/contactAction\";\nimport Contact from \"./Contact\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const [selectAll, setSelectAll] = useState(false);\n  const contacts = useSelector((state) => state.contact.contacts);\n  const selectedContact = useSelector(\n    (state) => state.contact.selectedContacts\n  );\n\n  console.log(contacts);\n\n  useEffect(() => {\n    if (selectAll) {\n      dispatch(selectAllContact(contacts.map((contact) => contact.id)));\n    } else {\n      dispatch(clearAllContact());\n    }\n  }, [selectAll]);\n  return (\n    <div>\n      {selectedContact.length > 0 ? (\n        <button\n          onClick={() => deleteAllContact()}\n        >\n          delete all\n        </button>\n      ) : null}\n      <table>\n        <tr>\n          <th>\n            <input type=\"checkbox\" id=\"selectAll\" value={selectAll}\n              onClick={() => setSelectAll(!selectAll)} />\n          </th>\n          <th>Name</th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>Actions</th>\n        </tr>\n        <tbody>\n          {contacts.map((contact) => (\n            <Contact\n              contact={contact}\n              key={contact.id}\n              selectAll={setSelectAll}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\n\n//EditContact.js\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContact, updateContact } from \"../actions/contactAction\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\n\nconst EditContact = () => {\n  let { id } = useParams();\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const contact = useSelector((state) => state.contact.contact);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  useEffect(() => {\n    if (contact != null) {\n      setName(contact.name);\n      setPhone(contact.phone);\n      setEmail(contact.email);\n    }\n    dispatch(getContact(id));\n  }, [contact]);\n\n  const onUpdateContact = (e) => {\n    e.preventDefault();\n\n    const update_contact = Object.assign(contact, {\n      name: name,\n      phone: phone,\n      email: email,\n    });\n    dispatch(updateContact(update_contact));\n    history.push(\"/\");\n  };\n  return (\n    <div>\n      <h3>Add Contacts</h3>\n      <div>\n        <form onSubmit={(e) => onUpdateContact(e)}>\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n          <input type=\"text\" value={phone} onChange={(e) => setPhone(e.target.value)} />\n          <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <button type=\"submit\">Update</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\n\n\n//App.js\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Contacts from \"./components/Contacts\";\nimport AddContact from \"./components/AddContact\";\nimport EditContact from \"./components/EditContact\";\n\nconst App = () => {\n  return (\n\n    <Router>\n      <div>\n        <Link to=\"/contacts/add\"> Add Records</Link>\n        <Switch>\n          <Route exact path=\"/\" component={Contacts} />\n          <Route exact path=\"/contacts/add\" component={AddContact} />\n          <Route exact path=\"/contacts/edit/:id\" component={EditContact} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};`.trim();\n\nconst reducersCurd = `\n//contactReducer.js\nimport Contact from \"../components/Contact\";\nimport {\n  GET_CONTACT,\n  CREATE_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"../actions/types\";\n\nconst initialState = {\n  contacts: [\n    {\n      id: 1,\n      name: \"Leanne Graham\",\n      email: \"Sincere@april.biz\",\n      phone: \"1-770-736-8031 x56442\",\n    },\n    {\n      id: 2,\n      name: \"Ervin Howell\",\n      email: \"Shanna@melissa.tv\",\n      phone: \"010-692-6593 x09125\",\n    }\n  ],\n  contact: null,\n  selectedContacts: [],\n};\nconst contactReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case GET_CONTACT:\n      let arr = state.contacts.filter(\n        (contact) => contact.id == action.payload\n      );\n      arr = arr.values();\n      for (let val of arr) {\n        arr = val;\n      }\n      return {\n        ...state,\n        contact: arr,\n      };\n\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          Contact.id == action.payload.id ? action.payload : contact\n        ),\n      };\n\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id != action.payload\n        ),\n      };\n\n    case SELECT_CONTACT:\n      return {\n        ...state,\n        selectedContacts: action.payload,\n      };\n\n    case DELETE_SELECTED_CONTACT:\n      return {\n        ...state,\n        contacts: [],\n      };\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        selectedContacts: [],\n      };\n\n    default:\n      return state;\n  }\n};\nexport default contactReducer;\n`.trim();\n\nconst actions = `\n//types.js\nexport const CREATE_CONTACT = \"CREATE_CONTACT\";\nexport const GET_CONTACT = \"GET_CONTACT\";\nexport const UPDATE_CONTACT = \"UPDATE_CONTACT\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const SELECT_CONTACT = \"SELECT_CONTACT\";\nexport const CLEAR_CONTACT = \"CLEAR_CONTACT\";\nexport const DELETE_SELECTED_CONTACT = \"DELETE_SELECTED_CONTACT\";\n\n\n\n//contactAction.js\nimport {\n  CREATE_CONTACT,\n  GET_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"./types\";\n\nexport const addContact = (contact) => ({\n  type: CREATE_CONTACT,\n  payload: contact,\n});\n\nexport const getContact = (id) => ({\n  type: GET_CONTACT,\n  payload: id,\n});\n\nexport const updateContact = (contact) => ({\n  type: UPDATE_CONTACT,\n  payload: contact,\n});\n\nexport const deleteContact = (id) => ({\n  type: DELETE_CONTACT,\n  payload: id,\n});\n\nexport const selectAllContact = (id) => ({\n  type: SELECT_CONTACT,\n  payload: id,\n});\n\nexport const clearAllContact = () => ({\n  type: CLEAR_CONTACT,\n});\n\n//delete selected contacts\nexport const deleteAllContact = () => ({\n  type: DELETE_SELECTED_CONTACT,\n});\n`.trim();\n\n\n\nclass ContctHooks extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Jsonplaceholder</h3>\n              <b>App.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={useSelector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Reducers</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Curd(components)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={components}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>reducers</b>\n              <div style={titles}>\n                <PrismCode\n                  code={reducersCurd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>actions</b>\n              <div style={titles}>\n                <PrismCode\n                  code={actions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ContctHooks));\n"],"sourceRoot":""}