{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","components/ml/deepMl/pandas.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","Series","dataFrames","readJson","cleanData","wrongs","fixings","correlations","Plotting","data_","preadicting","dataFramesd","sheets","interpolate","windspeed","groupby","temperature","concatenation","ignore","crosstab","specifics","mergeDataframes","sqlalchemes","pandasMethods","pandasCopy","addRows","Pandas","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"mPAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACN,EAAKC,KAAO,EAAKA,IAAIC,SACvBC,IAAMC,iBAAiB,EAAKH,IAAIC,UAblC,EAAKD,IAAMI,IAAMC,YAFA,E,iFAMjBC,KAAKP,c,2CAILO,KAAKP,c,+BASG,IAAD,EAC6BO,KAAKR,MAAjCS,EADD,EACCA,KAAeC,GADhB,EACOC,QADP,EACgBD,UACvB,OACE,yBAAKE,UAAU,cACb,0BAAMV,IAAKM,KAAKN,IAAKU,UAAS,mBAAcF,IACzCD,EAAKI,a,GAzBuBP,IAAMQ,a,uDCJ7C,yFAMMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,MAAO,CACLC,YAAaJ,EAAMK,QAAQ,IAE7BC,KAAM,CACJC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,yBAAKH,UAAWc,EAAQR,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMS,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,oBAAoBf,UAAWc,EAAQH,MAAhD,qBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,YAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,oBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,QAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,qBAAqBf,UAAWc,EAAQH,MAAjD,uBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,wBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,OAAOf,UAAWc,EAAQH,MAAnC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,OAAOf,UAAWc,EAAQH,MAAnC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,kBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,kBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,QAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,sBAAsBf,UAAWc,EAAQH,MAAlD,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,YACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,eACV,6BA9BF,gBAiCE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,eAEZ,iC,qLCjDAK,EAAS,CAAEC,gBAAiB,UAAWC,QAAS,MAAOC,SAAU,QAejEC,EAAS,wDAIDnB,OAERoB,EAAa,kcAajBpB,OAEIqB,EAAW,+DAIfrB,OAEIsB,EAAY,igBAOhBtB,OAEIuB,EAAS,kOAGbvB,OAEIwB,EAAU,uMAOdxB,OAEIyB,EAAe,kHAEnBzB,OAEI0B,EAAW,4LAQf1B,OAEI2B,EAAQ,kGAKZ3B,OAEI4B,EAAc,qTAclB5B,OAEI6B,EAAc,61CAsBlB7B,OAEI8B,EAAS,sfAkBb9B,OAEI+B,EAAc,2yDAmClB/B,OAEIgC,EAAY,2XAWhBhC,OAEIiC,EAAU,qIASdjC,OAEIkC,EAAc,6UAalBlC,OAEImC,EAAgB,+gBAsBpBnC,OAEIoC,EAAS,kxBAyBbpC,OAEIqC,EAAW,uQAKfrC,OAEIsC,EAAY,ueAkBhBtC,OAEIuC,EAAkB,oYAetBvC,OAEIwC,EAAc,2wCAwClBxC,OAEIyC,EAAgB,qZAepBzC,OAEI0C,EAAa,mHAOjB1C,OAEI2C,EAAU,0vBAoCd3C,OAGI4C,E,4LAEFC,YAAW,kBAAMtD,IAAMuD,iBAAgB,K,+BAE/B,IACAjC,EAAYlB,KAAKR,MAAjB0B,QACR,OACE,kBAAC,IAAD,CAAMkC,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAOlD,UAAWc,EAAQN,OACxB,4BAAI,kBAAC,IAAD,SAGR,kBAAC,IAAD,CAAMyC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAOlD,UAAWc,EAAQN,OACxB,kBAAC,IAAD,KACE,sDACA,4BACE,8HACA,wHACA,6EACA,kFACA,gGACA,6LACA,2JAEF,6BAEA,6BACA,4BACE,4BAAI,6DAAJ,0GACA,6BAEA,4BAAI,6DAAJ,2CAEF,6BAEA,yCAtBF,wCAwBE,4BACE,yCACA,2CACA,sDACA,mDACA,0DAEF,6BAEA,2FACA,4BACE,8CACA,8CACA,gDACA,2CACA,0CAEF,6BAEA,mEACA,4BACE,qMAEA,iHACA,oKAGF,6BAEA,2CACA,6BAEA,yBAAK2C,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMiC,EACNhC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BACA,uCACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM6C,EACN5C,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,mFACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMkC,EACNjC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,mDACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMmC,EACNlC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,gDAhGF,IAiGE,4BACE,4BAAI,uCAAJ,uHACA,6BACA,4BAAI,0CAAJ,8NAEA,6BACA,4BAAI,sCAAJ,gFAEF,6BAEA,sCACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMuB,EACNtB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,0CAEA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMwB,EACNvB,SAAS,KACTC,QAAS,CAAC,mBAId,6BAEA,2EAjIF,qIAoIE,6BApIF,mIAuIE,6BACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM8C,EACN7C,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,mGACA,4BACE,4BAAI,wCAAJ,mBACA,4BAAI,yCAAJ,kBACA,4BAAI,sCAAJ,iCACA,6BACA,iGAEF,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM+C,EACN9C,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,gDACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMyB,EACNxB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,oDACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM0B,EACNzB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,6DACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM2B,EACN1B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,0DACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM4B,EACN3B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,iDA1MF,qFA4ME,6BACA,6BACA,8DACA,4BACE,yMAEA,yIACA,+IAEA,wIAGF,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM6B,EACN5B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,wCAjOF,6CAmOE,6BACA,6BApOF,+DAsOE,6BAtOF,mBAwOE,6BAxOF,2CA0OE,6BA1OF,oEA4OE,6BA5OF,2CA8OE,6BA9OF,iCAgPE,6BACA,6BAEA,wCACA,6BApPF,8DAsPE,6BACA,6BAvPF,gBAyPE,6BAzPF,qCA2PE,6BA3PF,gHA6PE,6BA7PF,0DA+PE,6BAEA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM8B,EACN7B,SAAS,KACTC,QAAS,CAAC,mBAId,kDACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM+B,EACN9B,SAAS,KACTC,QAAS,CAAC,mBAId,uDACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMgC,EACN/B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,qCA5RF,uEA8RE,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMoC,EACNnC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,uEACA,6BACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMqC,EACNpC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,gEAnTF,+GAqTE,4BACE,8EACA,qEACA,kEAEF,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMsC,EACNrC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,mDACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMuC,EACNtC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,4CACA,sCA9UF,qCA+UE,6BA/UF,oEAiVE,6BACA,6BACA,oCAnVF,mCAoVE,6BACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMwC,EACNvC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,wCACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAMyC,EACNxC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,oDAxWF,6DA0WE,6BACA,6BACA,yDACA,4BACE,kFACA,qDAEF,6BACA,6BACA,gEACA,4BACE,gFAEF,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM0C,EACNzC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,+CACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM2C,EACN1C,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,0CACA,yBAAKoD,MAAOnC,GACV,kBAAC,IAAD,CACEnB,KAAM4C,EACN3C,SAAS,KACTC,QAAS,CAAC,2B,GA9ZPG,aAyaLkD,uBA/0BD,SAAA/C,GAAK,MAAK,CACvBG,MAAO,CACL6C,OAAQhD,EAAMK,QAAQ,GACtBQ,QAASb,EAAMK,QAAQ,IAEzB4C,SAAU,CACRD,OAAQhD,EAAMK,QAAQ,IAExB6C,UAAW,CACTC,UAAW,aAs0BCJ,CAAmBP","file":"static/js/191.44bda9b9.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst Series = `\na = [1, 7, 2]\n\nmyvar = pd.Series(a)\nprint(myvar)`.trim();\n\nconst dataFrames = `\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\ndf.loc[0]                                                                             #refer to the row index.\ndf = pd.DataFrame(data, index = [\"day1\", \"day2\", \"day3\"])                             #name your own indexes.\ndf.loc[\"day2\"]                                                                        #refer to the named index:\n`.trim();\n\nconst readJson = `\ndf = pd.read_json('data.json')\n\nprint(df.to_string()) \n`.trim();\n\nconst cleanData = `\ndf.dropna()                                                             //Remove rows that contain empty cells.\ndf.fillna(130, inplace = True)                                          //Replace NULL values with the number 130.\ndf[\"Calories\"].fillna(130, inplace = True)                              //Replace Only For Specified Columns.\n\nx = df[\"Calories\"].mean()                                               //Find MEAN, and replace any empty values with it.\ndf[\"Calories\"].fillna(x, inplace = True)\n`.trim();\n\nconst wrongs = `\ndf['Date'] = pd.to_datetime(df['Date'])                                 //Convert to date.\ndf.dropna(subset=['Date'], inplace = True)                              //Remove rows with a NULL value in the \"Date\" column.\n`.trim();\n\nconst fixings = `\nfor x in df.index:\n  if df.loc[x, \"Duration\"] > 120:\n    df.loc[x, \"Duration\"] = 120\n\n    \ndf.drop_duplicates(inplace = True)                                      //Remove all duplicates.\n`.trim();\n\nconst correlations = `\ndf.corr()                                                               //Relationship between the columns.\n`.trim();\n\nconst Plotting = `\ndf.plot()\nplt.show()                                                         \n\n\ndf.plot(kind = 'scatter', x = 'Duration', y = 'Calories')\n\ndf[\"Duration\"].plot(kind = 'hist')\n`.trim();\n\nconst data_ = `\nimport pandas as pd\nX = music_data = pd.read_csv('music.csv')\nX \ny = music_data['genre']\n`.trim()\n\nconst preadicting = `\nimport pandas as pd \nfrom sklearn.tree import DecisionTreeClassifier\n\nmusic_data = pd.read_csv('music.csv')\nx = music_data.drop(columns=['genre'])\ny = music_data['genre']\n\nmodel = DecisionTreeClassifier()\nmodel.fit(x, y)\nmusic_data\n\npredictions = model.predict([21, 1], [22, 0])\npredictions\n`.trim()\n\nconst dataFramesd = `\ndf = pd.read_csv(\"pandas.csv\")\npd.read_csv(\"pandas.csv\", skiprows=1)\npd.read_csv('pandas.csv', nrows=2)\npd.read_csv(\"pandas.csv\", header=1)                                                       #skiprows and header are same\npd.read_csv(\"pandas.csv\", na_values=[\"n.a.\", \"not available\"])\npd.read_csv(\"pandas.csv\", header=None, names = [\"ticker\",\"eps\",\"revenue\",\"people\"])\npd.read_csv('pandas.csv',header=0, parse_dates=[0], index_col=0, squeeze=True)\npd.read_csv('pandas.csv',  na_values={'eps': ['not available'],'revenue': [-1],'people': ['not available','n.a.']})\n    \n    \ndf.to_csv(\"new.csv\", index=False)                                                             #Write to CSV\ndf.to_csv(\"new.csv\", columns=[\"tickers\",\"price\"], index=False)\n\npd.read_excel(\"stock_data.xlsx\",\"Sheet1\")                                                     #Read Excel\ndf.to_excel(\"new.xlsx\", sheet_name=\"stocks\", index=False, startrow=2, startcol=1)             #Write to Excel\n\n\ndf.to_string()                                                                                #Print the entire DataFrame.\ndf=pd.options.display.max_rows                                                                #Maximum returned rows\ndf=pd.options.display.max_rows = 9999                       #Increase max. number of rows to display the entire DataFrame\n\n`.trim();\n\nconst sheets = `\ndf_stocks = pd.DataFrame({\n    'tickers': ['GOOGL', 'WMT', 'MSFT'],\n    'price': [845, 65, 64 ],\n    'pe': [30.37, 14.26, 30.97],\n    'eps': [27.82, 4.61, 2.12]\n})\n\ndf_weather =  pd.DataFrame({\n    'day': ['1/1/2017','1/2/2017','1/3/2017'],\n    'temperature': [32,35,28],\n    'event': ['Rain', 'Sunny', 'Snow']\n})\n\n\nwith pd.ExcelWriter('stocks_weather.xlsx') as writer:\n    df_stocks.to_excel(writer, sheet_name=\"stocks\")\n    df_weather.to_excel(writer, sheet_name=\"weather\")\n`.trim();\n\nconst interpolate = `\ndf.fillna(0)                                                                          #fillna\ndf.fillna(130, inplace = True)                                                        #Replace NULL values with the 130.\ndf[\"Calories\"].fillna(130, inplace = True)                                            #Replace Only For Specified Columns.\n\n\nnew_df = df.fillna(method=\"ffill\")                                                    #determine how to fill na values.\nnew_df = df.fillna(method=\"bfill\")\n\n\n#Use of axis\ndf.fillna(method=\"bfill\", axis=\"columns\")                                             # axis is either \"index\" or \"columns\"\ndf.fillna(method=\"ffill\",limit=1)                                                     #limit parameter\ndf.interpolate()                                                                      #interpolate\ndf.interpolate(method=\"time\")\n\ndf.dropna()                                                                           #dropna\ndf.drop_duplicates()\n\n\n#Inserting Missing Dates\ndt = pd.date_range(\"01-01-2017\",\"01-11-2017\")\nidx = pd.DatetimeIndex(dt)\ndf.reindex(idx)\n\n\ndf.replace(-99999, value=np.NaN)                                                      #Handling Missing Data-replace method\ndf.replace(to_replace=[-99999,-88888], value=0)                                       #Replacing list with single value\ndf.replace({'temperature': -99999,'windspeed': -99999,'event': '0'}, np.nan)          #Replacing per column\n          \nnew_df = df.replace({-99999: np.nan, 'no event': 'Sunny', })                          #Replacing by using mapping\ndf['area'][0] = 50                                                                    #Update data.\n\ndf=pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])                       #reindex\n\n`.trim();\n\nconst windspeed = `\ndf.replace({'temperature': '[A-Za-z]', 'windspeed': '[a-z]'},'', regex=True) \n\n\n3Replacing list with another list\n    df = pd.DataFrame({\n    'score': ['exceptional','average', 'good', 'poor', 'average', 'exceptional'],\n    'student': ['rob', 'maya', 'parthiv', 'tom', 'julian', 'erica']\n  })\n\n    df.replace(['poor', 'average', 'good', 'exceptional'], [1,2,3,4])\n`.trim();\n\nconst groupby = `\n    g.get_group('mumbai')\n    g.max()\n    g.min()\n    g.mean()\n    g.describe()\n    g.size()\n    g.count()\n    g.plot()\n`.trim();\n\nconst temperature = `\ndef grouper(df, idx, col):\n    if 80 <= df[col].loc[idx] <= 90:\n        return '80-90'\n    elif 50 <= df[col].loc[idx] <= 60:\n        return '50-60'\n    else:\n        return 'others'\n        \ng = df.groupby(lambda x: grouper(df, x, 'temperature'))\nfor key, d in g:\nprint(\"Group by Key: {}\\n\".format(key))\nprint(d)\n`.trim();\n\nconst concatenation = `\nindia_weather = pd.DataFrame({\n  \"city\": [\"mumbai\",\"delhi\",\"banglore\"],\n  \"temperature\": [32,45,30],\n  \"humidity\": [80, 60, 78]\n})\n\ndf = pd.concat([india_weather, us_weather])\n\n\n#Concatenation Using Index.\ntemperature_df = pd.DataFrame({\n  \"city\": [\"mumbai\",\"delhi\",\"banglore\"],\n  \"temperature\": [32,45,30],\n}, index=[0,1,2])\n\npd.concat([temperature_df,windspeed_df],axis=1)\n\n\n#Concatenate dataframe with series\ns = pd.Series([\"Humid\",\"Dry\",\"Rain\"], name=\"event\")\npd.concat([temperature_df,s],axis=1)\n`.trim();\n\nconst ignore = `\npd.concat([india_weather, us_weather], ignore_index=True)\n\n\n#pivot\ndf.pivot(index='city',columns='date')\ndf.pivot(index='city',columns='date',values=\"humidity\")\n\nf.pivot_table(index=\"city\",columns=\"date\", margins=True,aggfunc=np.sum)                                 #margins\ndf.pivot_table(index=pd.Grouper(freq='M',key='date'),columns='city')                                    #grouper\n\n\n#Melt\npd.melt(df, id_vars=[\"day\"], var_name='city', value_name='temperature')\n\n\n#Reshape dataframe using stack/unstack\ndf = pd.read_excel(\"stocks.xlsx\",header=[0,1])\ndf.stack()\ndf.stack(level=0)\ndf_stacked.unstack()\n\n\npd.read_excel(\"stocks_3_levels.xlsx\",header=[0,1,2])                                      #3 levels of column headers\ndf2.stack(level=1)\n`.trim();\n\nconst crosstab = `\npd.crosstab(df.Nationality,df.Handedness)\nMargins: pd.crosstab(df.Sex,df.Handedness, margins=True)\nNormalize: pd.crosstab(df.Sex, df.Handedness, normalize='index')\nAggfunc and Values: pd.crosstab(df.Sex, df.Handedness, values=df.Age, aggfunc=np.average)\n`.trim();\n\nconst specifics = `\n#Partial Date Index\ndf['2017-06-30']\ndf['2017-06'].Close.mean() \n\n\n#Date Range\ndf['2017-01-08':'2017-01-03']\n\ndf['Close'].resample('M').mean().head()                                                       #Resampling\n\n#Finding missing dates from datetimeindex\ndaily_index = pd.date_range(start=\"6/1/2016\",end=\"6/30/2016\",freq='D')\ndaily_index.difference(df.index)\n\n\n#generating DatetimeIndex with periods argument\npd.date_range('1/1/2011', periods=72, freq='H')\n`.trim();\n\nconst mergeDataframes = `\ndf1 = pd.DataFrame({\n  \"city\": [\"new york\",\"chicago\",\"orlando\"],\n  \"temperature\": [21,14,35],\n})\n\ndf2 = pd.DataFrame({\n  \"city\": [\"chicago\",\"new york\",\"orlando\"],\n  \"humidity\": [65,68,75],\n})\n\ndf3 = pd.merge(df1, df2, on=\"city\")\n\ndf3=pd.merge(df1,df2,on=\"city\",how=\"outer\",indicator=True)\ndf3= pd.merge(df1,df2,on=\"city\",how=\"outer\", suffixes=('_first','_second'))\n`.trim();\n\nconst sqlalchemes = `\nimport pandas as pd\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('mysql+pymysql://root:@localhost:3306/application')\n\ndf = pd.read_sql_table('customers',engine)\n\ndf = pd.read_sql_table('customers', engine, columns=[\"name\"])       #Read only selected columns\n\n\n#Join two tables and read them in a dataframe using read_sql_query\ndf = pd.read_sql_query(\"select id,name from customers\",engine)      \n\n\nquery = '''\n SELECT customers.name, customers.phone_number, orders.name, orders.amount\n FROM customers INNER JOIN orders\n ON customers.id=orders.customer_id\n'''\npd.read_sql(query,engine)                           #read_sql is a wrapper around read_sql_query and read_sql_table\n\ndf = pd.read_csv(\"customers.csv\")                   #Write to mysql database using to_sql\n\ndf = pd.read_csv(\"customers.csv\")\n\ndf.rename(columns={\n    'Customer Name': 'name',\n    'Customer Phone': 'phone_number'\n}, inplace=True)\n\n\n\n#to_sql has different parameters such as chunksize which allows to write data in chunks. Useful when size is huge\ndf.to_sql(\n    name='customers', # database table name\n    con=engine,\n    if_exists='append',\n    index=False                                                             \n)                                   \n`.trim();\n\nconst pandasMethods = `\ndf.shape\ndf.values\ndf.head(10)\ndf.describe()\ndf.memory_usage()\ndf.memory_usage(deep=True)\ndf.loc[1:3]\ndf.drop_duplicates()\ndf.count()\ndf.tail() \ndf.info()\ndf.sort_index()\ndf.isna()                            #Returns a dataframe filled with boolean values with true indicating missing values.\ndf.isnull().sum()                    #Calculate the number of missing values in each column.\n`.trim();\n\nconst pandasCopy = `\nimport numpy as np\n\nseries = pd.Series([1,2,np.nan,4])\n\nseries_2=series.copy(deep=True)\nprint(series_2)\n`.trim();\n\nconst addRows = `\n#Add rows\ndict = {'Name':['Martha', 'Tim', 'Rob', 'Georgia'],\n        'Maths':[87, 91, 97, 95],\n        'Science':[83, 99, 84, 76]\n       }\n  \ndf = pd.DataFrame(dict)\n  \ndf2 = {'Name': 'Amy', 'Maths': 89, 'Science': 93}\ndf = df.append(df2, ignore_index = True)\ndf\n\ndf.reset_index()\n\n\n\n#add columns\ndata = {'Name':['Martha', 'Tim', 'Rob', 'Georgia'],\n        'Maths':[87, 91, 97, 95],\n        'Science':[83, 99, 84, 76]\n       }\n\ndf = pd.DataFrame(data)\n\naddress = ['Delhi', 'Bangalore', 'Chennai', 'Patna']\n\ndf['Address'] = address\ndf\n\n\n\n#Add An Index\ndata = pd.read_csv(\"areas.csv\")\ndata.set_index(\"area\", inplace = True)                                                      #Setting area as index column\ndata.head()\n`.trim();\n\n\nclass Pandas extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Pandas (Data analysis)</h3>\n              <ul>\n                <li>Provides functions to make working with structured or tabular data fast, easy, and expressive.</li>\n                <li>Pandas allows us to analyze big data and make conclusions based on statistical theories.</li>\n                <li>Primary objects is DataFrame and data.Series.</li>\n                <li>Pandas find correlation between two/ more columns.</li>\n                <li>Pandas is designed for working with tabular/ heterogeneous data.</li>\n                <li>Pandas blends the high-performance, array-computing ideas of NumPy with the flexible data manipulation capabilities of spreadsheets and relational databases.</li>\n                <li>Pandas has a special Categorical type for holding data that uses the integer-based categorical representation or encoding.</li>\n              </ul>\n              <br />\n\n              <br />\n              <ul>\n                <li><b>Data Science/ Data Analytics: </b>Is a process of analyzing large set of data point to get answer on questions releted to that data set.</li>\n                <br />\n\n                <li><b>Data Munging/ Data Wrangling: </b>It's a Process of cleaning messy data.</li>\n              </ul>\n              <br />\n\n              <h3>Dataframe</h3>\n              Different ways of creating dataframe:\n              <ul>\n                <li>Using CSV</li>\n                <li>Using excel</li>\n                <li>From python dictionary</li>\n                <li>From list of tuples</li>\n                <li>From list of dictionaries</li>\n              </ul>\n              <br />\n\n              <h3>What Are The Most Important Features Of The Pandas Library?</h3>\n              <ul>\n                <li>Data Alignment</li>\n                <li>Merge and join</li>\n                <li>Memory Efficient</li>\n                <li>Time series</li>\n                <li>Reshaping</li>\n              </ul>\n              <br />\n\n              <h3>Explain Categorical Data in Pandas?</h3>\n              <ul>\n                <li>Categorical data refers to real-time data that can be repetitive for instance, data values under\n                  categories such as country, gender, codes will always be repetitive.</li>\n                <li>Categorical values also take only a limited and fixed number of possible values. </li>\n                <li>Numerical operations cannot be performed on such data. All values of categorical data in pandas\n                  are either in categories or np.nan.</li>\n              </ul>\n              <br />\n\n              <b>Import file.</b>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={dataFramesd}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Methods:</b>\n              <div style={titles}>\n                <PrismCode\n                  code={pandasMethods}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Write two dataframes to two separate sheets in excel</b>\n              <div style={titles}>\n                <PrismCode\n                  code={sheets}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Handle Missing Data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={interpolate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Data Structures: </b>2\n              <ul>\n                <li><b>Series: </b>Is a 1D array-like object containing a sequence of values and an associated array of data labels, called its index.</li>\n                <br />\n                <li><b>DataFrame: </b>A DataFrame represents a rectangular table of data and contains an ordered collection of columns, each of which can be\n                  a different value type (numeric, string, boolean, etc.). DataFrame has both a row and column index.</li>\n                <br />\n                <li><b>Panel: </b>Is a 3-dimensional DS and includes items such as major_axis and minor_axis.</li>\n              </ul>\n              <br />\n\n              <h3>Series</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Series}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>DataFrames</h3>\n\n              <div style={titles}>\n                <PrismCode\n                  code={dataFrames}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <br />\n\n              <h3>How can we create copy of series in Pandas?</h3>\n              copy() Make a deep copy, including a copy of the data and the indices. With deep=False neither the\n              indices or the data are copied.\n              <br />\n              Note that when deep=True data is copied, actual python objects will not be copied\n              recursively, only the reference to the object.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pandasCopy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>How Will You Add An Index, Row, Or Column To A Dataframe In Pandas?</h3>\n              <ul>\n                <li><b>.loc (): </b>Is label based.</li>\n                <li><b>.iloc (): </b>Integer based.</li>\n                <li><b>.ix(): </b>Both label and integer based.</li>\n                <br />\n                <li>To add columns to the DataFrame, we can use .loc () or .iloc ().</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={addRows}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Pandas Read JSON</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={readJson}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Cleaning Empty Cells</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={cleanData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Cleaning Data of Wrong Format</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={wrongs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Pandas - Fixing Wrong Data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={fixings}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Data Correlations</h3>\n              The corr() method calculates the relationship between each column in our data set.\n              <br />\n              <br />\n              <b>The number varies from -1 to 1.</b>\n              <ul>\n                <li>1 means that there is a 1 to 1 relationship (a perfect correlation), and for this data set, each\n                  time a value went up in the first column, the other one went up as well.</li>\n                <li>0.9 is also a good relationship, and if you increase one value, the other will probably increase as well.</li>\n                <li>-0.9 would be just as good relationship as 0.9, but if you increase one value, the other will\n                  probably go down.</li>\n                <li>0.2 means NOT a good relationship, meaning that if one value goes up does not mean that the\n                  other will.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={correlations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Plotting</h3>\n              Uses the plot() method to create diagrams.\n              <br />\n              <br />\n              Specify that you want a scatter plot with the kind argument:\n              <br />\n              kind = 'scatter'\n              <br />\n              A scatter plot needs an x- and a y-axis.\n              <br />\n              Will use \"Duration\" for the x-axis and \"Calories\" for the y-axis.\n              <br />\n              Include the x and y arguments like this:\n              <br />\n              x = 'Duration', y = 'Calories'\n              <br />\n              <br />\n\n              <b>Histogram</b>\n              <br />\n              Use the kind argument to specify that you want a histogram:\n              <br />\n              <br />\n              kind = 'hist'\n              <br />\n              A histogram needs only one column.\n              <br />\n              A histogram shows us the frequency of each interval, e.g. how many workouts lasted between 50 and 60 minutes?\n              <br />\n              Will use the \"Duration\" column to create the histogram.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={Plotting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>Preparing the Data</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={data_}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <h3>Learning and Predicting</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={preadicting}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Regex</h3>\n              when windspeed is 6 mph, 7 mph etc. & temperature is 32 F, 28 F etc.\n              <div style={titles}>\n                <PrismCode\n                  code={windspeed}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>SELECT * from weather_data GROUP BY city</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={groupby}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Group data using custom function</h3>\n              Let's say you want to group your data using custom function. Here the requirement is to create three groups.\n              <ul>\n                <li>1.Days when temperature was between 80 and 90.</li>\n                <li>2.Days when it was between 50 and 60.</li>\n                <li>3.Days when it was anything else.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={temperature}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Basic Concatenation</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={concatenation}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Ignore Index</h3>\n              <b>Pivot: </b>Allows to Transform/ reshape data.\n              <br />\n              Pivot table used tosummarize and aggregate data inside dataframe.\n              <br />\n              <br />\n              <b>Melt:</b>Used to transform/ reshape data.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ignore}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Crosstab</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={crosstab}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Time Series Analysis</h3>\n              Time Series is a set of data points indexed in time order.\n              <br />\n              <br />\n              <b>Benefits of DatetimeIndex:</b>\n              <ul>\n                <li>1.Partial Date Index: Select Specific Months Data.</li>\n                <li>2.Select Date Range.</li>\n              </ul>\n              <br />\n              <br />\n              <b>Benefits of having DatetimeIndex:</b>\n              <ul>\n                <li>Generating DatetimeIndex with periods argument.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={specifics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Merge DataFrame</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={mergeDataframes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>sqlalchemy</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sqlalchemes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Pandas));\n"],"sourceRoot":""}