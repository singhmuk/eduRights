{"version":3,"sources":["components/ReactJs/prismCode.js","components/mern/sidebar.js","components/mern/projects/paginationsMern.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","serverComp","appComponents","serverPush","worker","clientApp","indexApp","PaginationsMerns","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"mPAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACN,EAAKC,KAAO,EAAKA,IAAIC,SACvBC,IAAMC,iBAAiB,EAAKH,IAAIC,UAblC,EAAKD,IAAMI,IAAMC,YAFA,E,iFAMjBC,KAAKP,c,2CAILO,KAAKP,c,+BASG,IAAD,EAC6BO,KAAKR,MAAjCS,EADD,EACCA,KAAeC,GADhB,EACOC,QADP,EACgBD,UACvB,OACE,yBAAKE,UAAU,cACb,0BAAMV,IAAKM,KAAKN,IAAKU,UAAS,mBAAcF,IACzCD,EAAKI,a,GAzBuBP,IAAMQ,a,uDCJ7C,yFAMMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,MAAO,CACLC,YAAaJ,EAAMK,QAAQ,IAE7BC,KAAM,CACJC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,yBAAKH,UAAWc,EAAQR,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMS,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,iBAAiBf,UAAWc,EAAQH,MAA7C,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,oBAAoBf,UAAWc,EAAQH,MAAhD,qBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,6BACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,0BACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,4BACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,6BACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,cACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,cACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,oBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,gBAEZ,iC,qLC/BAK,EAAS,CAAEC,gBAAiB,UAAWC,QAAS,MAAOC,SAAU,QAgBjEC,EAAa,61BAuCjBnB,OAEIoB,EAAgB,q0CAmDpBpB,OAEIqB,EAAa,28BAsCjBrB,OAEIsB,EAAS,uTAWbtB,OAEIuB,EAAY,gsCA8ChBvB,OAEIwB,EAAW,oXAgBRxB,OAGHyB,E,4LAEFC,YAAW,kBAAMnC,IAAMoC,iBAAgB,K,+BAE/B,IACAd,EAAYlB,KAAKR,MAAjB0B,QACR,OACE,kBAAC,IAAD,CAAMe,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAO/B,UAAWc,EAAQN,OACxB,4BAAI,kBAAC,IAAD,SAGR,kBAAC,IAAD,CAAMsB,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAO/B,UAAWc,EAAQN,OACxB,kBAAC,IAAD,KACE,0CACA,+CACA,6BACA,yBAAKwB,MAAOhB,GACV,kBAAC,IAAD,CACEnB,KAAMuB,EACNtB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,4CACA,6BACA,yBAAKiC,MAAOhB,GACV,kBAAC,IAAD,CACEnB,KAAMwB,EACNvB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,yDACA,+CACA,yBAAKiC,MAAOhB,GACV,kBAAC,IAAD,CACEnB,KAAMyB,EACNxB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,sCACA,+CACA,6BACA,yBAAKiC,MAAOhB,GACV,kBAAC,IAAD,CACEnB,KAAM0B,EACNzB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,+CACA,6BACA,yBAAKiC,MAAOhB,GACV,kBAAC,IAAD,CACEnB,KAAM2B,EACN1B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,gDACA,6BACA,yBAAKiC,MAAOhB,GACV,kBAAC,IAAD,CACEnB,KAAM4B,EACN3B,SAAS,KACTC,QAAS,CAAC,2B,GAjFGG,aA4Ff+B,uBAhUD,SAAA5B,GAAK,MAAK,CACvBG,MAAO,CACL0B,OAAQ7B,EAAMK,QAAQ,GACtBQ,QAASb,EAAMK,QAAQ,IAEzByB,SAAU,CACRD,OAAQ7B,EAAMK,QAAQ,IAExB0B,UAAW,CACTC,UAAW,aAuTCJ,CAAmBP","file":"static/js/173.0c544605.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/setUpFiles' className={classes.line}>SetUp</Link></MenuItem>\n        <MenuItem><Link to='/javaScript' className={classes.line}>JavaScript</Link></MenuItem>\n        <MenuItem><Link to='/reactCurdMern' className={classes.line}>Mern React</Link></MenuItem>\n        <MenuItem><Link to='/4_reactCurdHooks' className={classes.line}>Mern React Hooks</Link></MenuItem>\n        <MenuItem><Link to='/pagination' className={classes.line}>Sea Sort Pagi Auth_Token</Link></MenuItem>\n        <MenuItem><Link to='/propsModel' className={classes.line}>SS pagination-Captcha</Link></MenuItem>\n        <MenuItem><Link to='/imageGallery' className={classes.line}>ImageGallery</Link></MenuItem>\n        <MenuItem><Link to='/stripes' className={classes.line}>Stripes-Signin with gfb</Link></MenuItem>\n        <MenuItem><Link to='/paginationsMern' className={classes.line}>Paginations-push_notifis</Link></MenuItem>\n        <MenuItem><Link to='/googleMap' className={classes.line}>GoogleMap</Link></MenuItem>\n        <MenuItem><Link to='/videoChat' className={classes.line}>VideoChat</Link></MenuItem>\n        <MenuItem><Link to='/qrSccaners' className={classes.line}>QrCode-reCapcha</Link></MenuItem>\n        <MenuItem><Link to='/react_share' className={classes.line}>Share-Stripe</Link></MenuItem>\n        <MenuItem><Link to='/socialSignUp' className={classes.line}>SocialSignUp</Link></MenuItem>\n        <MenuItem><Link to='/mernSocial' className={classes.line}>MernSocial</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst serverComp = `\nconst express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\n\nmongoose.connect(\"mongodb://localhost/pagination\", {\n  useUnifiedTopology: true,\n  useNewUrlParser: true,\n});\n\nconst postSchema = new mongoose.Schema({\n  text: String,\n  title: String,\n});\n\nconst Post = mongoose.model(\"Post\", postSchema);\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/posts\", async (req, res) => {\n  const PAGE_SIZE = 3;\n  const page = parseInt(req.query.page || \"0\");\n  const total = await Post.countDocuments({});\n  const posts = await Post.find({})\n    .limit(PAGE_SIZE)\n    .skip(PAGE_SIZE * page);\n  res.json({\n    totalPages: Math.ceil(total / PAGE_SIZE),\n    posts,\n  });\n});\n\nconst db = mongoose.connection;\n\ndb.once(\"open\", () => {\n  app.listen(4000);\n});\n`.trim();\n\nconst appComponents = `\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(0);\n  const [numberOfPages, setNumberOfPages] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  const pages = new Array(numberOfPages).fill(null).map((v, i) => i);\n\n  useEffect(() => {\n    fetch('http://localhost:4000/posts?page='$'{pageNumber}')\n      .then((response) => response.json())\n      .then(({ totalPages, posts }) => {\n        setPosts(posts);\n        setNumberOfPages(totalPages);\n      });\n  }, [pageNumber]);\n\n  const gotoPrevious = () => {\n    setPageNumber(Math.max(0, pageNumber - 1));\n  };\n\n  const gotoNext = () => {\n    setPageNumber(Math.min(numberOfPages - 1, pageNumber + 1));\n  };\n\n  return (\n    <div className=\"App\">\n      <h3>Page of {pageNumber + 1}</h3>\n\n      {posts.map((post) => (\n        <div key={post._id} className=\"post\">\n          <h4>{post.title}</h4>\n          <p>{post.text}</p>\n        </div>\n      ))}\n\n      <button onClick={gotoPrevious}>Previous</button>\n      {pages.map((pageIndex) => (\n        <button key={pageIndex} onClick={() => setPageNumber(pageIndex)}>\n          {pageIndex + 1}\n        </button>\n      ))}\n      <button onClick={gotoNext}>Next</button>\n    </div>\n  );\n}\n\nexport default App;\n`.trim();\n\nconst serverPush = `\nconst express = require(\"express\");\nconst webpush = require(\"web-push\");\nconst bodyParser = require(\"body-parser\");\nconst path = require(\"path\");\n\nconst app = express();\n\napp.use(express.static(path.join(__dirname, \"client\")));\n\napp.use(bodyParser.json());\n\nconst publicVapidKey =\n  \"BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo\";\nconst privateVapidKey = \"3KzvKasA2SoCxsp0iIG_o9B0Ozvl1XDwI63JRKNIWBM\";\n\nwebpush.setVapidDetails(\n  \"mailto:test@test.com\",\n  publicVapidKey,\n  privateVapidKey\n);\n\napp.post(\"/subscribe\", (req, res) => {\n  const subscription = req.body;\n\n  res.status(201).json({});\n\n  const payload = JSON.stringify({ title: \"Push Test\" });\n\n  // Pass object into sendNotification\n  webpush\n    .sendNotification(subscription, payload)\n    .catch(err => console.error(err));\n});\n\nconst port = 5000;\n\napp.listen(port, () => console.log(Server started on port '$'{port}));\n`.trim();\n\nconst worker = `\nconsole.log(\"Service Worker Loaded...\");\n\nself.addEventListener(\"push\", e => {\n  const data = e.data.json();\n  console.log(\"Push Recieved...\");\n  self.registration.showNotification(data.title, {\n    body: \"Notified by Traversy Media!\",\n    icon: \"http://image.ibb.co/frYOFd/tmlogo.png\"\n  });\n});\n`.trim();\n\nconst clientApp = `\nconst publicVapidKey =\n  \"BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo\";\n\n// Check for service worker\nif (\"serviceWorker\" in navigator) {\n  send().catch(err => console.error(err));\n}\n\nasync function send() {\n  // Register Service Worker\n  console.log(\"Registering service worker...\");\n  const register = await navigator.serviceWorker.register(\"/worker.js\", {\n    scope: \"/\"\n  });\n\n  \n  const subscription = await register.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n  });\n\n  \n  await fetch(\"/subscribe\", {\n    method: \"POST\",\n    body: JSON.stringify(subscription),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, \"+\")\n    .replace(/_/g, \"/\");\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n`.trim();\n\nconst indexApp = `\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Push Notifications Using Node</title>\n</head>\n\n<body>\n  <h1>Push Notifications Using Node</h1>\n  <script src=\"client.js\"></script>\n</body>\n\n</html>`.trim();\n\n\nclass PaginationsMerns extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Pagination</h3>\n              <b>server/server.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={serverComp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>client/App.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={appComponents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>2.node_push_notifications</h3>\n              <b>server/server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverPush}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Client</h3>\n              <b>client/worker.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={worker}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>client/client.js</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={clientApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>client/index.html</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={indexApp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(PaginationsMerns));\n"],"sourceRoot":""}