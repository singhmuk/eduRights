{"version":3,"sources":["components/ReactJs/prismCode.js","components/mongoDB/sidebar.js","components/mongoDB/deepMongodb/curdOp.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","insert","finding","updating","CurdOp","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/196.e188bb45.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMD' className={classes.line}>IntroMD</Link></MenuItem>\n        <MenuItem><Link to='/intro' className={classes.line}>Queries</Link></MenuItem>\n        <MenuItem><Link to='/mongodbMethods' className={classes.line}>mongodbMethods</Link></MenuItem>\n        <MenuItem><Link to='/mongoCurd' className={classes.line}>MongoCurd-Ref</Link></MenuItem>\n        <MenuItem><Link to='/mongoQueries' className={classes.line}>Mongo Queries</Link></MenuItem>\n        <MenuItem><Link to='/searchErrorHandling' className={classes.line}>searchErrorHandling</Link></MenuItem>\n        <MenuItem><Link to='/bulkRight' className={classes.line}>BulkWright</Link></MenuItem>\n        <MenuItem><Link to='/mysql' className={classes.line}>Mysql</Link></MenuItem>\n        <MenuItem><Link to='/mysqlCurd' className={classes.line}>MysqlCurd</Link></MenuItem>\n        <MenuItem><Link to='/joinOp' className={classes.line}>JoinOp</Link></MenuItem>\n        <MenuItem><Link to='/sortOp' className={classes.line}>Sort</Link></MenuItem>\n        <MenuItem><Link to='/curdOp' className={classes.line}>CurdOp</Link></MenuItem>\n        <MenuItem><Link to='/gridFs' className={classes.line}>gridFs</Link></MenuItem>\n        <MenuItem><Link to='/postgressql' className={classes.line}>PostgreSql</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst code = `\n// Add operation\ndb.users.insertOne({\n    name: \"sue\",\n    age: 26,\n    status: \"pending\"\n  })\n  \n  \n  // Read operation\n  Read operations retrieve documents from a collection.\n  db.collection.find()\n  \n  db.users.find(\n    {age : { $gt: 18 }},\n    {name: 1, address:1}\n  ).limit(5)\n  \n  \n  // Update Operations\n  Update operations modify existing documents in a collection.\n  db.collection.updateOne() \n  db.collection.updateMany() \n  db.collection.replaceOne() \n  \n  db.users.updateMany(\n    {age : { $lt: 18 }},\n    {$set:  {status: \"reject\"}}\n  )\n  \n  //Delete Operations\n  Delete operations remove documents from a collection. \n  db.collection.deleteOne() \n  db.collection.deleteMany()\n  \n  db.users.deleteMany(\n      {status: \"reject\"}\n  )`.trim();\n  \n  \n  const insert = `\n  db.inventory.insertMany([\n    { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n    { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n    { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n ])`.trim();\n \n \n const finding = `\n // Find all students\ndb.students.find( {} )\n\n// Find the first 3 students\ndb.stuents.find( {} ).limit(3)\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {name: 1} )\n\n// Find all students and sort by name in ascending order\ndb.students.find( {} ).sort( {gpa: -1, name: 1} )\n\n// Find all biology majors\ndb.students.find( {major: \"Biology\"} )\n\n// Find all student's with a phone number 333-3333\ndb.students.find( {contact: {phone: \"333-3333\", email: \"student@school.edu\"} } )\n\n// Find all biology majors named Jack\ndb.students.find( {name: \"Jack\", major: \"Biology\"} )\n\n// Final all students who are chemistry majors or named Jack\ndb.students.find( { $or: [ {name: \"Jack\"}, {major: \"Chemistry\"} ] } )\n\n// Final all students with a gpa above 3.5\ndb.students.find( {gpa: {$gt: 3.5} } )\n\n// Find all students with a gpa less than or equal to 3.2\ndb.students.find( {gpa: {$lte: 3.2} } ).sort({gpa: -1})         // $eq, $ne, $lt, $lte, $gt, $gte\n\n// Find all students with names in the array\ndb.students.find( {name: {$in: [\"Kate\", \"Claire\"]} } )   // $in, $nin\n\n// Find all students who have awards\ndb.students.find( {awards: {$exists: true} } )           // false\n\n// Find all db entries where the name is a string\ndb.students.find({name: {$type: 2} })\n\n// Find all students who's first grade is a 90\ndb.students.find( {\"grades.0\": 90 } )\n\n// Find all students who have a grade greater than 80\ndb.students.find( {grades: {$elemMatch: { $gte: 80} } } )\n\n// Find all students who have 4 grades recorded\ndb.students.find( {grades: {$size: 4 } } )`.trim();\n\n\nconst updating = `\n// same filters as inserting\ndb.stuents.updateOne(<filter>, <update>, <options>)\n\n// Do this twice so we can change it back with updateMany\ndb.students.updateOne(\n     {major: \"Biology\"},\n     {  $set: {major: \"Bio\"}}\n  )\n\ndb.students.updateMany(\n     {major: \"Bio\"},\n     { $set: {major: \"Biology\"} }\n  )\n\n// replaceMany()\ndb.students.replaceOne(\n     {major: \"Bio\"},\n     {name: \"new name\", major: \"new major\", gpa: 4.0}\n  )\n\n// Delete all documents\ndb.students.deleteMany({})\n\ndb.students.deleteOne({major: \"Biology\"})\n\ndb.students.deleteMany({gpa: {$gte: 3.5}})`.trim();\n\n\nclass CurdOp extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n              <Paper className={classes.paper}>\n                <List>\n                 <b>Curd Operations</b>\n                 <br/>\n                 <br/>\n                 Create or insert operations add new documents to a collection. If the collection does not currently exist, insert operations will create the collection.<br/>\n                 MongoDB provides the following methods to insert documents into a collection:<br/><br/>\n                 <i><li>db.collection.insertOne() </li>\n                     <li>db.collection.insertMany()</li></i>\n                     <br/>\n                     In MongoDB, insert operations target a single collection. All write operations in MongoDB are atomic on the level of a single document\n                   <div style={titles}>\n                      <PrismCode\n                        code={code}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Insert Multiple Documents</h3>\n                    db.collection.insertMany()\n                    <div style={titles}>\n                      <PrismCode\n                        code={insert}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Finding Documents</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={finding}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Updating & Deleting Documents</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={updating}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    </List>\n                </Paper>\n              </Grid>\n            </Grid>\n          )\n        }\n      }\n\nexport default (withStyles(styles)(CurdOp));\n"],"sourceRoot":""}