{"version":3,"sources":["components/ReactJs/prismCode.js","components/angularjs/sidebar.js","components/angularjs/deepAngularjs/introAngular.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","approach","sigmoid","cost","entropy","piplines","childsFile","IntroAngular","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/104.d10604de.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAngular' className={classes.line}>AI</Link></MenuItem>\n        <MenuItem><Link to='/tensorflow' className={classes.line}>Tensorflow</Link></MenuItem>\n        <MenuItem><Link to='/tensors' className={classes.line}>Tensorboards</Link></MenuItem>\n        <MenuItem><Link to='/angCompiler' className={classes.line}>Compiler</Link></MenuItem>\n        <MenuItem><Link to='/neural' className={classes.line}>NeuralKeras</Link></MenuItem>\n        <MenuItem><Link to='/activationFunctions' className={classes.line}>activationFuncs</Link></MenuItem>\n        <MenuItem><Link to='/loss' className={classes.line}>Loss</Link></MenuItem>\n        <MenuItem><Link to='/gradientNeural' className={classes.line}>GradientNeural</Link></MenuItem>\n        <MenuItem><Link to='/stochastic' className={classes.line}>Stochastic</Link></MenuItem>\n        <MenuItem><Link to='/benchmarking' className={classes.line}>Benchmarking</Link></MenuItem>\n        <MenuItem><Link to='/customer' className={classes.line}>Customer</Link></MenuItem>\n        <MenuItem><Link to='/regularizationDeep' className={classes.line}>Regularization Deep</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced' className={classes.line}>Imbalanced</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced2' className={classes.line}>Imbalanced2</Link></MenuItem>\n        <MenuItem><Link to='/convolutionals' className={classes.line}>Convolutionals</Link></MenuItem>\n        <MenuItem><Link to='/data_augmentation' className={classes.line}>data Augmentation</Link></MenuItem>\n        <MenuItem><Link to='/transfer' className={classes.line}>Transfer</Link></MenuItem>\n        <MenuItem><Link to='/word_embedding' className={classes.line}>Embedding</Link></MenuItem>\n        <MenuItem><Link to='/datatypests' className={classes.line}>Datatypes</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_2' className={classes.line}>TS Function</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_4' className={classes.line}>Type Assertion</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst approach = `\nf(x) = b0 + {n(sigma)n=0 (bi * wi)}  \nwhere bi = input\n      wi = weighteg\n      b0 = bias\n`.trim();\n\nconst sigmoid = `\nf(x) = 1/ 1+ e(-x)\n                \nHyperbolic Tengent range(1,-1)\nHyperbolic Tengent tanh(z): cosh x = e(x) + e(-x)/ 2\n                            sinh x = e(x) - e(-x)/ 2\n                            tanh x = sinh x/ cosh x\n                          \nRectified Linear Unit(reLU): Most useful and relatiely simple function, max(0,z)\n`.trim();\n\nconst cost = `\nc = sigma(y - a)O2/ n \ny = mx + c \n`.trim();\n\nconst entropy = `\nCross Entropy: c =-1/n * n(sigma)n=0 (y * ln(a) + (1 - y) * ln(1 - a))\n`.trim();\n\nconst piplines = `\ntf_dataset = tf.data.Dataset.list_files('images/*').map(process_img).flter(filter_fun).map(lambda x:x/255)\n\n      where images = Load images from folder.\n            process_img = Convert image content to numpy array. Extract label from folder.\n            filter_fun = Filter Blurred images\n            map = Scaling\n`.trim();\n\nconst childsFile = ``.trim();\n\n// const pipes = ``.trim();\n\n\nclass IntroAngular extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>What is intelligent.</h3>\n              <ul>\n                <li>Capacity for learning, reasoning, understanding and similar forms of mental activity.</li>\n              </ul>\n              <br />\n              <b>AI: What is the natural of Intelligent Thought.</b>\n              <br />\n\n              <b>Ablity to perceive and act in the world.</b>\n              <ul>\n                <li><b>Reasoning: </b>Proving theorems, medical diagnosis.</li>\n                <li><b>Planning: </b>Take decision.</li>\n                <li><b>Learning and Adaptation: </b>Recommend movies, learn traffic patterns.</li>\n                <li><b>Understanding: </b>text, speech, visual scene.</li>\n              </ul>\n              Or System that act rationaly.\n              <br />\n\n              <h3>Weak AI Hypothesis vs. Strong AI Hypothesis.</h3>\n              <ul>\n                <li><b>Weak Hyp: </b>Machines could act as if they are intelligent.</li>\n                <li><b>Strong Hyp: </b>Machines that act intelligent hae to think intelligently too.</li>\n              </ul>\n              <br />\n\n              <h3>What is State?</h3>\n              All information necessary to make a decision for the task at hand.\n              <br />\n              <b>state type:</b>\n              <br />\n              <ul>\n                <li>Atomic</li>\n                <li>Propositional</li>\n                <li>Relational</li>\n                <li>First-Order</li>\n              </ul>\n              <br />\n\n              <table>\n                <tr>\n                  <th>State Type</th>\n                  <th>Description</th>\n                  <th>Focus</th>\n                </tr>\n                <tr>\n                  <td>Atomic</td>\n                  <td>State are indivisible. No internal structure.</td>\n                  <td>Search on atomic state.</td>\n                </tr>\n                <tr>\n                  <td>Propositional</td>\n                  <td>State are made of state variables that take values.</td>\n                  <td><b>Search</b> + <b>Inference</b> in logic and probabilistic representations.</td>\n                </tr>\n                <tr>\n                  <td>Relational</td>\n                  <td>State describe the objects in the world and their inter-relation.</td>\n                  <td><b>Search</b> + <b>Inference</b> in predicate logic.</td>\n                </tr>\n                <tr>\n                  <td>First-Order</td>\n                  <td><b>+function</b> over objects.</td>\n                  <td><b>Search</b> + <b>Inference</b> in first order logic.</td>\n                </tr>\n              </table>\n              <br />\n\n              <h3>DFS</h3>\n              <ul>\n                <li><b>Time complexity of tree: </b>O(bpm)</li>\n                <li><b>Space complexity of tree: </b>O(bm)</li>\n              </ul>\n              <br />\n\n              <h3>BFS</h3>\n              <ul>\n                <li><b>Time complexity of tree: </b>O(bpm)</li>\n                <li><b>Space complexity of tree: </b>O(bpm)</li>\n                <li>Not optimal because, lest cost and sortest path are not same.</li>\n              </ul>\n              <br />\n\n              <h3>Uniform cost Search</h3>\n              <ul>\n                <li>Cheapest first.</li>\n                <li><b>Time complexity of tree: </b></li>\n                <li><b>space complexity of tree:</b></li>\n                <li>optimal</li>\n              </ul>\n              <br />\n\n              <b>Slope: </b>\n              <ul>\n                <li>Used for linear equation.</li>\n                <li>It is a constant.</li>\n              </ul>\n              <br />\n\n              <b>Derivation:</b>\n              <ul>\n                <li>Used for non linear equation.</li>\n                <li>It is a function.</li>\n              </ul>\n              why we use log loss for Logistic regression.\n              <br />\n\n              <h3>Neural Networks</h3>\n              <ul>\n                <li><b>Neurons/ Perceptron's: </b>\n                  <ul>\n                    <li>Neurons is also known as Perceptron. Artificial Neurons Networks are based on Neural biological systems.</li>\n                    <li>ANN is a s/w based approach to replicate these biological Neurons.</li>\n                    <li><b>Perceptron mathematical model: </b>also called regression Function.\n                      <br />\n                      <div style={titles}>\n                        <PrismCode\n                          code={approach}\n                          language=\"js\"\n                          plugins={[\"line-numbers\"]}\n                        />\n                      </div>\n                    </li>\n                  </ul>\n                </li>\n                <br />\n                <li><b>Activation Function: </b>This is known as sigmoid function.\n                  <br />\n                  <div style={titles}>\n                    <PrismCode\n                      code={sigmoid}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li><b>Cost Function: </b>\n                  <br />\n                  <div style={titles}>\n                    <PrismCode\n                      code={cost}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li><b>Cross Entropy: </b>\n                  <br />\n                  <div style={titles}>\n                    <PrismCode\n                      code={entropy}\n                      language=\"js\"\n                      plugins={[\"line-numbers\"]}\n                    />\n                  </div>\n                </li>\n                <br />\n                <li><b>Gradient descent: </b><ul>\n                  <li>Is an optimization algorithm for finding the minimum of a function.</li>\n                  <li>Gradient descent (in 1D)</li>\n                </ul>\n                </li>\n                <br />\n                <li><b>backpropagation: </b></li>\n              </ul>\n              <br />\n              <ul>\n                <li>Tensor is an array.</li>\n                <li><b>Data augmentation: </b>Generate new sample from available samples.</li>\n                <li><b>Transfer Learning: </b>It save lot of computation power.</li>\n              </ul>\n              <br />\n\n              <h3>Image Classification vs Object Detection vs Image Segmentation</h3>\n              <ul>\n                <li><b>Image Classification: </b>Entire image is one of the classes.</li>\n                <ul>\n                  <li>Process of assidning labels is called annotation.</li>\n                </ul>\n                <br />\n                <li><b>Object Detection: </b>What is there in image and where.</li>\n                <ul>\n                  <li>When detect the object within an image with rectangular bounding boxes.</li>\n                </ul>\n                <br />\n                <li><b>Image Segmentation: </b>Which pixels belong to which object.</li>\n                <ul>\n                  <li>When classify each of the pixels as one of the classes.</li>\n                </ul>\n              </ul>\n\n              <h3>Popular datasets for computer vision</h3>\n              <ul>\n                <li><b>ImageNet: </b></li>\n                <ul>\n                  <li>14 million hand annotated images.</li>\n                  <li>Annotated bounding boxes for at least 1 million images.</li>\n                  <li>Annotated using crowdsourcing amazon mechanical turk.</li>\n                </ul>\n                <li><b>Coco: </b></li>\n                <li><b>Google Open images: </b></li>\n              </ul>\n              <br />\n\n              <h3>YOLO algorithm</h3>\n              <ul>\n                <li>Object detection algorithm.</li>\n                <li>So fast.</li>\n              </ul>\n              <br />\n\n              <h3>Recurrent Neural Network(RNN)</h3>\n              Mainly for NLP.\n              <br />\n              <b>RNN Applicatons:</b>\n              <ul>\n                <li>Email auto-computation.</li>\n                <li>text translation.</li>\n                <li>Named Entity Recognization (NER).</li>\n                <li>Sentiment Analysis.</li>\n              </ul>\n              <br />\n\n              <b>Issues using ANN for sequence problems.</b>\n              <ul>\n                <li>Variable size of i/o neurons.</li>\n                <li>Too much computation.</li>\n                <li>No Parameter Sharing.</li>\n              </ul>\n              <br />\n\n              <b>Types of RNN:</b>\n              <ul>\n                <li>Many to Many</li>\n                <li>Many yo One</li>\n                <li>One to Many</li>\n              </ul>\n\n              <h3>GRU (Gated Recurrent Units)</h3>\n              Bidirectional RNN\n              <br />\n\n              <h3>Technique to compute Word embedding</h3>\n              <ul>\n                <li><b>Using Supervised Learning:</b> Take an NLP problem and try to solve it. In that pursuit as a side effect, we got word embedding.</li>\n                <li>Self-Supervised learning.</li>\n              </ul>\n              <br />\n\n              <h3>Word2Vec</h3>\n              <ul>\n                <li>embeddings are not hand crafted. Instead, they are learnt during neural network training.</li>\n                <li>Meaning of word can be inferred by surrounding words. This surrounding words also called context.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li>1.Take a fake problem.</li>\n                <ul>\n                  <li><b>Fake problem: </b>Fill in a missing word in a sentence.</li>\n                </ul>\n                <li>2.Solve it using neural network.</li>\n                <li>3.You get word embeddings as a side effect.</li>\n                <li><b>COBW (Continuous Bag Of Words): </b>Given context words predict target word.</li>\n                <li><b>Skip Gram: </b>Given the target predict context words.</li>\n              </ul>\n              <br />\n\n              <h3>Tensorflow Input Pipeline</h3>\n              In this case use special DS that is tf.data.Dataset.\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={piplines}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <b>tf.data i/p Pipeline: </b>ETL: Extract, Transform, Load.\n              <br />\n              <br />\n\n              <b>Tensorflow i/p Pipeline Benifits: </b>\n              <ul>\n                <li>1.Handling huge datasets by streaming them from disk using batching.</li>\n                <li>2.Apply tranformations to make dataset ready for model training.</li>\n              </ul>\n              <br />\n\n              <h3>BERT</h3>\n              <ul>\n                <li>Bidirectional Encoding Representations from Transformers.</li>\n                <li>Can generate contextualized embeddings.</li>\n                <li>How can we capture similarities b/w two words.</li>\n              </ul>\n              <br />\n              <br />\n              <b>tf serving: </b>Makes model version management and model serving very easy.\n              <br />\n\n              <h3>Quantization</h3>\n              Is a process of reducing model size So that can run on EDGE devices.\n              <br />\n              <br />\n              <b>Benifits of Quantization:</b>\n              <ul>\n                <li>Run ML models efficient on EDGE devices.</li>\n                <li>Faster interference.</li>\n              </ul>\n              <br />\n\n              <b>Two ways to perform quantization:</b>\n              <ul>\n                <li>Post training Quantization.</li>\n                <ul>\n                  <li><b>tf.lite convert</b></li>\n                </ul>\n                <br />\n\n                <li>Quantization aware training.</li>\n                <ul>\n                  <li><b>q_model = quantize_model(tf_model)</b></li>\n                </ul>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(IntroAngular));\n"],"sourceRoot":""}