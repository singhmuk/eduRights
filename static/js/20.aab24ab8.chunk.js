(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[20],{140:function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var a=n(45),r=n(28),i=n(136),l=n(137),s=n(139),c=n(0),h=n.n(c),o=n(138),u=n.n(o),m=(n(59),function(e){function t(e){var n;return Object(a.a)(this,t),(n=Object(i.a)(this,Object(l.a)(t).call(this,e))).highlight=function(){n.ref&&n.ref.current&&u.a.highlightElement(n.ref.current)},n.ref=h.a.createRef(),n}return Object(s.a)(t,e),Object(r.a)(t,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,t=e.code,n=(e.plugins,e.language);return h.a.createElement("pre",{className:"code-prism"},h.a.createElement("code",{ref:this.ref,className:"language-".concat(n)},t.trim()))}}]),t}(h.a.Component))},141:function(e,t,n){},152:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(0),r=n.n(a),i=n(26),l=n(297),s=n(295),c=n(114),h=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function o(){var e=h();return r.a.createElement("div",{className:e.root},r.a.createElement(s.a,null,r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/introAlgo",className:e.line},"Deadlock")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/Stack",className:e.line},"Stack")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/Queue",className:e.line},"Queue")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/linkedList",className:e.line},"LinkedList")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/heap",className:e.line},"Heap")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/trees",className:e.line},"Tree")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/graph",className:e.line},"Graph")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/sort",className:e.line},"QuickSort")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/searchAlgo",className:e.line},"Search")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/topTech",className:e.line},"TopTech")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/stringAlgo",className:e.line},"String")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/arrayAlgo",className:e.line},"Array")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/nestingArrAlgo",className:e.line},"Nesting Array")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/numbersAlgo",className:e.line},"Numbers")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/gameAlgo",className:e.line},"Game")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/arrayStrAlgo",className:e.line},"ArrayStr")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/arrayNumAlgo",className:e.line},"ArrayNum")),r.a.createElement(l.a,null,r.a.createElement(i.b,{to:"/dslogic8",className:e.line},"Logic8"))),r.a.createElement("div",null))}},197:function(e,t,n){e.exports=n.p+"static/media/hash.de3c44a6.png"},198:function(e,t,n){e.exports=n.p+"static/media/maxhip.7ef8339a.png"},437:function(e,t,n){"use strict";n.r(t);var a=n(45),r=n(28),i=n(136),l=n(137),s=n(139),c=n(0),h=n.n(c),o=n(138),u=n.n(o),m=n(120),p=n(57),d=n(296),k=n(5),E=(n(141),n(152)),f=n(140),g=n(197),b=n.n(g),y=n(198),v=n.n(y),N={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},x={height:200,width:500},A="class MinPriorityQueue {\n  constructor(c) {\n    this.heap = [];\n    this.capacity = c;\n    this.size = 0;\n  }\n\n  \n  insert(key) {                               //inserts key at end and rearranges, so the binary heap in appropriate order.\n    if (this.isFull()) return;\n    this.heap[this.size + 1] = key;\n    let k = this.size + 1;\n    \n    while (k > 1) {\n      if (this.heap[k] < this.heap[Math.floor(k / 2)]) {\n        let temp = this.heap[k];\n        this.heap[k] = this.heap[Math.floor(k / 2)];\n        this.heap[Math.floor(k / 2)] = temp;\n      }\n      k = Math.floor(k / 2);\n    }\n    this.size++;\n  }\n\n  \n  peek() {                                                            // returns the highest priority value.\n    return this.heap[1];\n  }\n\n  \n  isEmpty() {                                                        \n    if (0 == this.size) return true;\n    return false;\n  }\n\n  \n  isFull() {                                                          \n    if (this.size == this.capacity) return true;\n    return false;\n  }\n\n\n  print() {                                                          \n    console.log(this.heap.slice(1));\n  }\n                                                                       \n  heapSort() {                                                        // heap sorting done by delete function to the \n    for (let i = 1; i < this.capacity; i++) {                         //number of times of the size of the heap it returns\n      this.delete();                                                  //reverse sort because it is a min priority queue.\n    }\n  }\n\n\n  sink() {                                                            // this function reorders the heap after every delete.\n    let k = 1;\n    while (2 * k <= this.size || 2 * k + 1 <= this.size) {\n      let minIndex;\n      if (this.heap[2 * k] >= this.heap[k]) {\n        if (2 * k + 1 <= this.size && this.heap[2*k+1] >= this.heap[k]) {\n          break;\n        }\n        else if(2*k+1 > this.size){\n          break;\n        }\n      }\n      if (2 * k + 1 > this.size) {\n        minIndex = this.heap[2 * k] < this.heap[k] ? 2 * k : k;\n      } else {\n        if (\n          this.heap[k] > this.heap[2 * k] ||\n          this.heap[k] > this.heap[2 * k + 1]\n        ) {\n          minIndex =\n            this.heap[2 * k] < this.heap[2 * k + 1] ? 2 * k : 2 * k + 1;\n        } else {\n          minIndex = k;\n        }\n      }\n      let temp = this.heap[k];\n      this.heap[k] = this.heap[minIndex];\n      this.heap[minIndex] = temp;\n      k = minIndex;\n    }\n  }\n\n  \n  delete() {                                                            // deletes the highest priority value from the heap.\n    let min = this.heap[1];\n    this.heap[1] = this.heap[this.size];\n    this.heap[this.size] = min;\n    this.size--;\n    this.sink();\n    return min;\n  }\n}\n\n\nq = new MinPriorityQueue(8);\n\nq.insert(5);\nq.insert(2);\nq.insert(4);\nq.insert(1);\nq.insert(7);\n\nq.print();                                                              // [ 1, 2, 3, 5, 7, 6, 4, 8 ]\nq.heapSort();\nq.print();                                                              // [ 8, 7, 6, 5, 4, 3, 2, 1 ]\n".trim(),z=function(e){function t(){return Object(a.a)(this,t),Object(i.a)(this,Object(l.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(r.a)(t,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return h.a.createElement(m.a,{container:!0},h.a.createElement(m.a,{item:!0,xs:2},h.a.createElement(p.a,{className:e.paper},h.a.createElement("h4",null,h.a.createElement(E.a,null)))),h.a.createElement(m.a,{item:!0,xs:10},h.a.createElement(p.a,{className:e.paper},h.a.createElement(d.a,null,h.a.createElement("h3",null,"Hash Table"),h.a.createElement("img",{src:b.a,alt:"DeadLock",className:"responsive",style:x}),h.a.createElement("ul",null,h.a.createElement("li",null,"A Hash Table is a dictionary-like structure that pairs keys/ values. The location in memory of each pair is determined by a hash function, which accepts a key and returns the address where the value should be inserted and retrieved. Collisions can result if two/ more keys convert to the same address. For robustness, getters and setters should anticipate these events to ensure that all data can be recovered and no data is overwritten."),h.a.createElement("br",null),h.a.createElement("li",null,"If we know our addresses will be in integer sequences, we can simply use Arrays to store our key-value pairs. For more complex address mappings, we can use Maps or Objects. Hash tables have insertion and lookup of constant time on average. Because of collisions and resizing.")),h.a.createElement("br",null),h.a.createElement("h3",null,"Heap"),h.a.createElement("img",{src:v.a,alt:"DeadLock",className:"responsive",style:x}),h.a.createElement("br",null),h.a.createElement("b",null,"Minimum Priority Queue: "),h.a.createElement("ul",null,h.a.createElement("li",null,"It is a part of heap data structure"),h.a.createElement("li",null,"A heap is a specific tree based data structure in which all the nodes of tree are in a specific order. that is the children are arranged in some  respect of their parents, can either be greater/ less than the parent. This makes it a min priority queue or max priority queue."),h.a.createElement("br",null)),h.a.createElement("b",null,"Functions: "),"insert, delete, peek, isEmpty, print, heapSort, sink etc.",h.a.createElement("br",null),h.a.createElement("br",null),h.a.createElement("div",{style:N},h.a.createElement(f.a,{code:A,language:"js",plugins:["line-numbers"]}))))))}}]),t}(c.Component);t.default=Object(k.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(z)}}]);
//# sourceMappingURL=20.aab24ab8.chunk.js.map