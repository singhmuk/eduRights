(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[160],{140:function(n,e,t){"use strict";t.d(e,"a",(function(){return g}));var r=t(45),a=t(28),l=t(136),i=t(137),s=t(139),o=t(0),c=t.n(o),m=t(138),u=t.n(m),g=(t(59),function(n){function e(n){var t;return Object(r.a)(this,e),(t=Object(l.a)(this,Object(i.a)(e).call(this,n))).highlight=function(){t.ref&&t.ref.current&&u.a.highlightElement(t.ref.current)},t.ref=c.a.createRef(),t}return Object(s.a)(e,n),Object(a.a)(e,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var n=this.props,e=n.code,t=(n.plugins,n.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},e.trim()))}}]),e}(c.a.Component))},141:function(n,e,t){},154:function(n,e,t){"use strict";t.d(e,"a",(function(){return m}));var r=t(0),a=t.n(r),l=t(26),i=t(297),s=t(295),o=t(114),c=Object(o.a)((function(n){return{root:{display:"flex"},paper:{marginRight:n.spacing(2)},line:{textDecoration:"none"}}}));function m(){var n=c();return a.a.createElement("div",{className:n.root},a.a.createElement(s.a,null,a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/introJs",className:n.line},"IntroJs-Proxies")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/prototypes",className:n.line},"Prototypes-Defa. Param")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/JsObjects",className:n.line},"JsObject")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/array",className:n.line},"String")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/this",className:n.line},"This-call(), apply(), bind()")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/clousers",className:n.line},"Clousers")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/oops",className:n.line},"Oops-GetSet")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/regular",className:n.line},"Regular")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/keyedCollections",className:n.line},"Keyed Collections")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/arrayApi",className:n.line},"Indexed colle-Arr Obj")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/logic",className:n.line},"Logic")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/findOutput",className:n.line},"findOutput")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/mcqjs",className:n.line},"McqJs")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/hackerRank",className:n.line},"HackerRank1")),a.a.createElement(i.a,null,a.a.createElement(l.b,{to:"/hackerRank6",className:n.line},"HackerRank2"))),a.a.createElement("div",null))}},352:function(n,e,t){"use strict";t.r(e);var r=t(45),a=t(28),l=t(136),i=t(137),s=t(139),o=t(0),c=t.n(o),m=t(138),u=t.n(m),g=t(120),f=t(57),h=t(296),p=t(5),E=(t(141),t(154)),d=t(140),j={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},b='\n// *\n// **\n// ***\nfunction star(){\n  var start="";\n  for(let i=0; i<3; i++){\n    for(let j=1; j<=(i+1); j++){\n      start += "*"\n    }\n    start +="newLine";\n  }\n  console.log(start);\n}\nstar();\n\n//   *\n//  **\n// ***\nfunction star(){\n  let n = 3;\n  let str = "";\n  for (let i = 1; i <= n; i++){\n    for (let j=0; j<(n-i); j++){\n      str += " ";\n    }\n    for (let k=0; k<i; k++){\n      str += "*";\n    }\n    str += "newLine";\n  }\nconsole.log(str);\n}\nstar();\n\n// ***\n// **\n// *\nfunction star(){\n  var start="";\n  for(let i=3; i>0; i--){\n    for(let j=(i+1); j>1; j--){\n      start += "*"\n    }\n    start +="newLine";\n  }\n  console.log(start);\n}\nstar();\n\n// ***\n//  **\n//   *\nfunction star(){\n  let n = 3;\n  let str = "";\n  for (let i = n; i >= 1; i--){\n    for (let j=0; j<(n-i); j++){\n      str += " ";\n    }\n    for (let k=0; k<i; k++){\n      str += "*";\n    }\n    str += "newLine";\n  }\nconsole.log(str);\n}\nstar();\n'.trim(),v=' \n// Upside pyramid.\nfunction pyraminds() {\n  let i, j, k, str = "";\n\n  for (i=0; i<5; i++) {\n    for (j=1; j<(5 - i); j++) {\n      str += " ";\n    }\n    for (k=1; k<=(2 * i +1); k++) {\n      str += "*";\n    }\n\n    str += \'newLine\';\n  }\n  console.log(str)\n}\n\npyraminds();\n\n\n// downside pyramid.\nfor (i=1; i<5; i++) {\n  for (j=0; j<i; j++) {\n    str += " ";\n  }\n  for (k=(5 - i)*2; k>1; k--) {\n    str += "*";\n  }\n\n  str += \'newLine\';\n}\nconsole.log(str)\n '.trim(),y="\nvar insersionSort = function(array){\n  for(var i =1; i< array.length; i++){\n    for(var j=0;j<i;j++){\n      if(array[i] < array[j]){\n        var temp = array.splice(i, 1);\n        array.splice(j,0,temp[0]);\n      }\n    }\n  }\n  \nconsole.log(array)\nreturn array;\n}\n\ninsersionSort([3,5,1,9,6,2,1])\n".trim(),k="\nfunction mergeSort(arr){\n    if(arr.length < 2) return arr;\n    var middle = Math.floor(arr.length/2);\n    var left = arr.slice(0, middle);\n    var right = arr.slice(middle, arr.length);\n    return merge(mergeSort(left), mergeSort(right));\n }\n \n function merge(left, right){\n  var result = [];\n    while(left.length && right.length){\n      if(left[0] == right[0]){\n        result.push(left.shift());\n      }\n  else{\n    result.push(right.shift());}\n  }\n  \n  while(left.length) result.push(left.shift());\n  while(right.length) result.push(right.shift());\n  console.log(result)\n  return result;\n }\n mergeSort([3,2,1])".trim(),C="\nfunction QuickSort(arr){\n    if(arr.length <= 1) return arr;\n        var pivot = arr[arr.length -1];\n        var left = [];\n        var right = [];\n        for(var i=0;i<arr.length-1;i++){\n        if(arr[i] < pivot){\n        left.push(arr[i])\n      }\n    else right.push(arr[i])\n    }\n    return [...QuickSort(left), pivot, ...QuickSort(right)]\n }\n console.log(QuickSort([5,4,2,7,9]))\n ".trim(),N="function selectionSort(arr){\n  var minIdx, temp,\n  len = arr.length;\n    for(var i = 0; i < len; i++){\n    minIdx = i;\n      for(var j = i+1; j<len; j++){\n        if(arr[j]<arr[minIdx]){\n        minIdx = j;\n      }\n    }\n    \n    temp = arr[i];\n    arr[i] = arr[minIdx];\n    arr[minIdx] = temp;\n   }\n \n console.log(arr)\n return arr;\n }\n \n selectionSort([7,5,2,4,3,9]);".trim(),S="\nfunction arm(str){\n  let currentChar = [];\n  let remaingChar = [];\n  let result = [];\n\n  if(str.length === 0) return \"\";\n  if(str.length === 1) return str;\n\n  for(let i=0; i<str.length; i++){\n    currentChar = str[i];\n    remaingChar = str.slice(0,i) + str.slice(i+1);\n    for(let j=0; j<remaingChar.length; j++){\n      result.push(currentChar + arm(remaingChar)[j]);\n    }\n  }\n  return result;\n}\n\nconsole.log(arm('abc'));\n  ".trim(),w='\nlet i,j, str="";                                                                    //Square pattern.\nfor(i=1; i<=5; i++){\n  for(j=0; j<5; j++){\n    str += "*";\n  }\n  str += "newLine";\n}\n\nconsole.log(str);\n\n\nlet i, j, str = "";                                                               //Right pascal star pattern.\nfor (i=1; i<=5; i++) {\n  for (j=0; j<i; j++) {\n    str += "*";\n  }\n  str += "newLine";\n}\n\nfor (i=1; i<=(5-1); i++) {\n  for (j=0; j<(5-i); j++) {\n    str += "*";\n  }\n  str += "newLine";\n}\n\nconsole.log(str);\n'.trim(),O="\nfunction minCoinChange(coins, amount) {\n  const minCoins = new Array(amount + 1).fill(Infinity); \n  minCoins[0] = 0;                            // there are 0 ways to make amount 0 with positive coin values\n \n  for(let coin of coins) {                    // look at one coin at a time\n    for(let i = 0; i <= amount; i += 1) {\n     \n      if((i - coin) >= 0) minCoins[i] = Math.min(minCoins[i], minCoins[i - coin] + 1);\n    }\n  }\n  \n                        // if the value remains Infinity, it means that no coin combination can make that amount\n  return minCoins[amount] !== Infinity ? minCoins[amount] : -1;\n}\n\nconsole.log(minCoinChange([1,2,3],13));".trim(),x="\n  function arm() {\n    const num = prompt('Enter a three-digit positive integer: ');\n    let sum=0,  remainder=0;\n    let temp=num;\n  \n    while(temp>0){\n      remainder = temp%10;\n      sum += remainder*remainder*remainder;\n      temp = parseInt(temp/10)\n    }\n  \n    if(sum == num){\n      console.log('Armstrong', num);\n    }\n    else{\n      console.log('Not an Armstrong', num);\n    }\n  }\n  \n  arm()".trim(),I=function(n){function e(){return Object(r.a)(this,e),Object(l.a)(this,Object(i.a)(e).apply(this,arguments))}return Object(s.a)(e,n),Object(a.a)(e,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var n=this.props.classes;return c.a.createElement(g.a,{container:!0},c.a.createElement(g.a,{item:!0,xs:2},c.a.createElement(f.a,{className:n.paper},c.a.createElement("h4",null,c.a.createElement(E.a,null)))),c.a.createElement(g.a,{item:!0,xs:10},c.a.createElement(f.a,{className:n.paper},c.a.createElement(h.a,null,c.a.createElement("h3",null,"1. Star"),"newLine = \\n",c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:b,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"2. Pyramind"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:v,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"3. Pattern"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:w,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"4. Armstrong Number"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:x,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"5. Permutations"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:S,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("b",null,"6. Given an amount of money, return the minimum number of coins needed to make that change."),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:O,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"7. Insersion Sort"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:y,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"8. Merg Sort"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:k,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"9. Quick Sort"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:C,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"10. Selection Sort"),c.a.createElement("div",{style:j},c.a.createElement(d.a,{code:N,language:"js",plugins:["line-numbers"]}))))))}}]),e}(o.Component);e.default=Object(p.a)((function(n){return{paper:{margin:n.spacing(1),padding:n.spacing(1)},smMargin:{margin:n.spacing(1)},actionDiv:{textAlign:"center"}}}))(I)}}]);
//# sourceMappingURL=160.65dde48a.chunk.js.map