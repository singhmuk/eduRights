{"version":3,"sources":["components/ReactJs/prismCode.js","components/angularjs/sidebar.js","assets/AI/hp.jpg","components/angularjs/deepAngularjs/stochastic.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","childsFile","batch","predictions","stochastics","Stochastic","setTimeout","highlightAll","container","item","xs","style","src","Neural","alt","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/48.88abeced.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAngular' className={classes.line}>AI</Link></MenuItem>\n        <MenuItem><Link to='/tensorflow' className={classes.line}>Tensorflow</Link></MenuItem>\n        <MenuItem><Link to='/tensors' className={classes.line}>Tensorboards</Link></MenuItem>\n        <MenuItem><Link to='/angCompiler' className={classes.line}>Compiler</Link></MenuItem>\n        <MenuItem><Link to='/neural' className={classes.line}>NeuralKeras</Link></MenuItem>\n        <MenuItem><Link to='/activationFunctions' className={classes.line}>activationFuncs</Link></MenuItem>\n        <MenuItem><Link to='/loss' className={classes.line}>Loss</Link></MenuItem>\n        <MenuItem><Link to='/gradientNeural' className={classes.line}>GradientNeural</Link></MenuItem>\n        <MenuItem><Link to='/stochastic' className={classes.line}>Stochastic</Link></MenuItem>\n        <MenuItem><Link to='/benchmarking' className={classes.line}>Benchmarking</Link></MenuItem>\n        <MenuItem><Link to='/customer' className={classes.line}>Customer</Link></MenuItem>\n        <MenuItem><Link to='/regularizationDeep' className={classes.line}>Regularization Deep</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced' className={classes.line}>Imbalanced</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced2' className={classes.line}>Imbalanced2</Link></MenuItem>\n        <MenuItem><Link to='/convolutionals' className={classes.line}>Convolutionals</Link></MenuItem>\n        <MenuItem><Link to='/data_augmentation' className={classes.line}>data Augmentation</Link></MenuItem>\n        <MenuItem><Link to='/transfer' className={classes.line}>Transfer</Link></MenuItem>\n        <MenuItem><Link to='/word_embedding' className={classes.line}>Embedding</Link></MenuItem>\n        <MenuItem><Link to='/datatypests' className={classes.line}>Datatypes</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_2' className={classes.line}>TS Function</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_4' className={classes.line}>Type Assertion</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/hp.2e354048.jpg\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Neural from '../../../assets/AI/hp.jpg'\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\ndf = pd.read_csv(\"homeprices_banglore.csv\")\n\nsx = preprocessing.MinMaxScaler()\nsy = preprocessing.MinMaxScaler()\n\nscaled_X = sx.fit_transform(df.drop('price',axis='columns'))\nscaled_y = sy.fit_transform(df['price'].values.reshape(df.shape[0],1))\n\nscaled_y.reshape(20,)\n`.trim();\n\nconst batch = `\ndef batch_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n    number_of_features = X.shape[1]\n    w = np.ones(shape=(number_of_features)) \n    b = 0\n    total_samples = X.shape[0]                                                  # number of rows in X\n    cost_list = []\n    epoch_list = []\n    \n    for i in range(epochs):        \n        y_predicted = np.dot(w, X.T) + b\n\n        w_grad = -(2/total_samples)*(X.T.dot(y_true-y_predicted))\n        b_grad = -(2/total_samples)*np.sum(y_true-y_predicted)\n        \n        w = w - learning_rate * w_grad\n        b = b - learning_rate * b_grad\n        \n        cost = np.mean(np.square(y_true-y_predicted))                          # MSE (Mean Squared Error)\n        \n        if i%10==0:\n            cost_list.append(cost)\n            epoch_list.append(i)\n    return w, b, cost, cost_list, epoch_list\n\nw, b, cost, cost_list, epoch_list = batch_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),500)\nw, b, cost\n\nplt.xlabel(\"epoch\")\nplt.ylabel(\"cost\")\nplt.plot(epoch_list,cost_list)\n\n`.trim();\n\nconst predictions = `\ndef predict(area,bedrooms,w,b):\n    scaled_X = sx.transform([[area, bedrooms]])[0]\n    scaled_price = w[0] * scaled_X[0] + w[1] * scaled_X[1] + b\n    return sy.inverse_transform([[scaled_price]])[0][0]\n\npredict(2600,4,w,b)\npredict(1000,2,w,b)\npredict(1500,3,w,b)\n`.trim();\n\nconst stochastics = `\nimport random\nrandom.randint(0,6)                              # randit gives random number between two numbers specified in the argument.\n\ndef stochastic_gradient_descent(X, y_true, epochs, learning_rate = 0.01):\n    number_of_features = X.shape[1]\n    w = np.ones(shape=(number_of_features)) \n    b = 0\n    total_samples = X.shape[0]\n    \n    cost_list = []\n    epoch_list = []\n    \n    for i in range(epochs):    \n        random_index = random.randint(0,total_samples-1) # random index from total samples\n        sample_x = X[random_index]\n        sample_y = y_true[random_index]\n        y_predicted = np.dot(w, sample_x.T) + b\n    \n        w_grad = -(2/total_samples)*(sample_x.T.dot(sample_y-y_predicted))\n        b_grad = -(2/total_samples)*(sample_y-y_predicted)\n        \n        w = w - learning_rate * w_grad\n        b = b - learning_rate * b_grad\n        cost = np.square(sample_y-y_predicted)\n        \n        if i%100==0: # at every 100th iteration record the cost and epoch value\n            cost_list.append(cost)\n            epoch_list.append(i)\n    return w, b, cost, cost_list, epoch_list\n\nw_sgd, b_sgd, cost_sgd, cost_list_sgd, epoch_list_sgd = SGD(scaled_X,scaled_y.reshape(scaled_y.shape[0],),10000)\nw_sgd, b_sgd, cost_sgd\n\nw , b \nplt.xlabel(\"epoch\")\nplt.ylabel(\"cost\")\nplt.plot(epoch_list_sgd,cost_list_sgd)\n\npredict(2600,4,w_sgd, b_sgd) \npredict(1000,2,w_sgd, b_sgd)\npredict(1500,3,w_sgd, b_sgd)\n`.trim();\n\n// const pipes = ``.trim();\n\n\n\nclass Stochastic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Implementation of stochastic and batch grandient descent in python.</h3>\n\n              <i>We will use home prices data set to implement batch and stochastic gradient descent in\n                python. Batch gradient descent uses <b>all</b> training samples in forward pass to calculate cumulitive\n                error and than we adjust weights using derivaties. In stochastic GD, we <b>randomly pick one</b> training\n                sample, perform forward pass, compute the error and immidiately adjust weights.</i>\n              <br />\n              <br />\n              <ul>\n                <li><b>Preprocessing/ Scaling: </b>Since our columns are on different sacle it is important to perform scaling on them.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>We should convert target column (price) into one dimensional array. It has become 2D due to\n                scaling that we did above but now we should change to 1D</i>\n              <br />\n              <img src={Neural} alt=\"Theata\" className=\"responsive2\" style={redesign} />\n\n              <h3>Now implement mini batch gradient descent. </h3>\n              <ul>\n                <li>numpy array with 1 row and columns equal to number of features. In\n                  our case number_of_features = 2 (area, bedroom).</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={batch}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Lets do some predictions now. </h3>\n              <ul>\n                <li>Here w1 = w[0] , w2 = w[1], w3 = w[2] and bias is b.</li>\n                <li>Equation for price is w1*area + w2*bedrooms + w3*age + bias.</li>\n                <li>scaled_X[0] is area.</li>\n                <li>scaled_X[1] is bedrooms.</li>\n                <li>scaled_X[2] is age.</li>\n                <li>Once we get price prediction we need to to rescal it back to original value also since it returns 2D array, to get single value we need to do value[0][0].</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={predictions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Stochastic Gradient Descent Implementation</h3>\n              <i>Stochastic GD will use randomly picked single training sample to calculate error and using this error we backpropage to adjust weights.</i>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={stochastics}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>Compare this with weights and bias that we got using gradient descent. They both of quite similar.</i>\n              {/* <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div> */}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(Stochastic));\n"],"sourceRoot":""}