(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[78],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return d}));var a=t(45),r=t(28),l=t(136),i=t(137),s=t(139),o=t(0),m=t.n(o),u=t(138),c=t.n(u),d=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(l.a)(this,Object(i.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&c.a.highlightElement(t.ref.current)},t.ref=m.a.createRef(),t}return Object(s.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return m.a.createElement("pre",{className:"code-prism"},m.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(m.a.Component))},141:function(e,n,t){},148:function(e,n,t){"use strict";t.d(n,"a",(function(){return u}));var a=t(0),r=t.n(a),l=t(26),i=t(297),s=t(295),o=t(114),m=Object(o.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function u(){var e=m();return r.a.createElement("div",{className:e.root},r.a.createElement(s.a,null,r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/introReact",className:e.line},"Intro-Lazy-Children")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/reactInter",className:e.line},"Intro")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/codingInter",className:e.line},"CodesPro")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/mainCompo",className:e.line},"Event-hoc-form",r.a.createElement("br",null),"curd-slider")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/pureComp",className:e.line},"PureComp-conComp")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/useStates",className:e.line},"useMultiState")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/contextHooks",className:e.line},"Context Hooks")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/customHooks",className:e.line},"CustomHooks-memo")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/useReducersSta",className:e.line},"UseReducers")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/contextMethods",className:e.line},"Curd Hooks")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/jsonPlaceholder",className:e.line},"JsonPlaceholder")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/async_await",className:e.line},"Async-await-sideMenu",r.a.createElement("br",null),"Mouse hover")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/ticGame",className:e.line},"Share-maxMinDate",r.a.createElement("br",null),"moveBtn-slideshow")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/linkGet",className:e.line},"LinkGet")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/numberFormats",className:e.line},"Random NumFor-biToDe",r.a.createElement("br",null)," Validations Step DateTimw")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/models",className:e.line},"Models-chidData-csv",r.a.createElement("br",null),"Icon-router")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/like",className:e.line},"Like-checkbox-radio",r.a.createElement("br",null),"select-scroll")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/textEditors",className:e.line},"TextEditors-paginations",r.a.createElement("br",null),"translator-sortCheck")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/sortItems",className:e.line},"IncOnClick-pushBtn-fizzBuzz",r.a.createElement("br",null),"show-addDocs-ratings")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/serverSideRend",className:e.line},"Jwt-multiSel")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/dropdownSelect",className:e.line},"SelectFtr-checkFtr-updtCrd")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/kanban",className:e.line},"Kanban")),r.a.createElement(i.a,null,r.a.createElement(l.b,{to:"/hackeRank",className:e.line},"HackeRank"))),r.a.createElement("div",null))}},309:function(e,n,t){"use strict";t.r(n);var a=t(45),r=t(28),l=t(136),i=t(137),s=t(139),o=t(0),m=t.n(o),u=t(138),c=t.n(u),d=t(120),p=t(57),h=t(296),b=t(5),E=(t(141),t(148)),v=t(140),g={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},y='\nclass App extends Component {\n  state = {\n      min: 1,\n      max: 10,\n      number: 1\n    }\n\n  componentDidMount() {\n   this.setState({ number: this.generateNumber(this.state.min, this.state.max)})\n  }\n  \n  minChange = (event) => {\n    this.setState({ min: event.target.value})\n  }\n  \n  maxChange = (event) => {\n    this.setState({ max: event.target.value})\n  }\n  \n  generateNumber = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n  \n  getInputs = () => {\n    if(this.state.min > this.state.max ){\n      const minTemp = this.state.min\n      const maxTemp = this.state.max\n      this.setState({ \n        min: maxTemp,\n        max: minTemp\n      }, () =>\n        this.setState({\n          number: this.generateNumber(this.state.min, this.state.max)  \n        })\n      );\n    } else {\n      this.setState({\n        number: this.generateNumber(this.state.min, this.state.max)  \n      })\n    }\n  }\n  \n  render() {\n    return (\n      <div >\n        <p>{ this.state.number }</p>\n          <div id="inputs">\n            <input type="number" min="-9999999999" max="9999999999" value={this.state.min} onChange={this.minChange} />\n            <input type="number" min="-9999999999" max="9999999999" value={this.state.max} onChange={this.maxChange} />\n            <input type="submit" value="Generate Number" onClick={ this.getInputs }/>\n          </div>\n      </div>\n    );\n  }\n}'.trim(),f="\nimport NumberFormat from 'react-number-format';\n\nfunction limit(val, max) {\n    if (val.length === 1 && val[0] > max[0]) {\n      val = '0' + val;\n    }\n  \n    if (val.length === 2) {\n      if (Number(val) === 0) {\n        val = '01';\n  \n    } else if (val > max) {\n        val = max;\n      }\n    }\n  \n    return val;\n  }\n  \n  function cardExpiry(val) {\n    let month = limit(val.substring(0, 2), '12');\n    let date = limit(val.substring(2, 4), '31');\n  \n    return month + (date.length ? '/' + date : '');\n  }\n  \n  class App extends Component {\n    constructor() {\n      super();\n      this.state = {};\n    }\n    render(){\n      return (\n        <div>\n              Prefix and thousand separator : Format currency in input\n            <NumberFormat thousandSeparator={true} prefix={'$'} className=\"some\" inputmode=\"numeric\" />\n          <br/>\n              Custom thousand separator : Format currency in input\n            <NumberFormat thousandSeparator={'.'} decimalSeparator={','} prefix={'$'} />\n            <br/>\n              Format with pattern : Format credit card in an input\n            <NumberFormat format=\"#### #### #### ####\" />\n          \n              Custom format method  : Format credit card expiry time\n            <NumberFormat format={cardExpiry}/>\n            <br/>\n              Format phone number\n            <NumberFormat format=\"+1 (###) ###-####\" mask=\"_\"/>\n            <br/>\n          <NumberFormat thousandSeparator={true} prefix={'$'} decimalScale={2} />\n        </div>\n      )\n    }\n  }".trim(),C="\nclass Currency extends Component {\n  formatCurrency(x, decimalPlaces, decimalSeparator, groupSeparator) {\n    var zeros = '00000000000';\n    var parts = x.toString().split('.');\n    parts[0] = parts[0].replace(/B(?=(d{3})+(?!d))/g, groupSeparator);\n    \n    if(parts.length > 1) {\n      parts[1] = parts[1] + zeros;\n      parts[1] = parts[1].substring(0, decimalPlaces);\n    } \n    else {\n      parts[1] = zeros.substring(0, decimalPlaces);\n    }\n    return parts.join(decimalSeparator);\n  }\n\n  render() {\n    var amount = this.props.amount;    \n    var decimalPlaces = this.props.decimalPlaces;\n    var currencyCode = this.props.currencyCode;\n    var decimalSeparator = ',';\n    var groupSeparator = ' ';\n    \n    if(currencyCode.match(/USD|GBP|THB/i) !== null) {\n      decimalSeparator = '.';\n      groupSeparator = ',';\n    }\n    var amountFormatted = this.formatCurrency(amount, decimalPlaces, decimalSeparator, groupSeparator);\n    if(currencyCode !== '') {\n      amountFormatted = amountFormatted + ' ' + currencyCode;\n    } \n    return <span>{amountFormatted}</span>\n  }\n}\n\n\nCurrency.defaultProps = {\n  amount: '0.00000000',\n  currencyCode: '',\n  decimalPlaces: 2\n};\n\n\nclass App extends Component {\n  render() {\n    return <div>\n      <p>\n        <ul>\n          <li>No amount: <Currency/></li>\n          <li>Only amount: <Currency amount=\"1234.5\"/></li>\n          <li>With currencyCode: <Currency amount=\"1234\" currencyCode=\"EUR\"/></li>\n          <li>Use decimalPlaces if other than the default 2: <Currency amount=\"1234\" decimalPlaces=\"3\"/></li>\n          <li>USD/UK decimal and group separator: <Currency amount=\"1234\" currencyCode=\"USD\"/></li>\n        </ul>\n      </p>  \n    </div>;\n  }\n}".trim(),S="\n// func.js\nexport const toBinary = (number) => {\n  let result = 0;\n  let i = 0;\n\n\n  while(number >= 1) {                                                  // dividing number by 2 until we reach 1 or below.\n    let reminder = number % 2;\n    if (reminder) {\n \n                            //If the reminder is 1 we add it to the power of 10 to get the  place value. ie. 100, 1000 ... \n      result += Math.pow(10, i);\n    }\n    \n    i++;\n    number = Math.floor(number / 2);                                  //Reduce the number by dividing it by 2.\n  }\n\n  return result;\n}\n\n\nexport const toDecimal = (number) => {\n  let result = 0;\n  let i = 0;\n\n                                                  // Loop through the number by dividing it by 10 until we reach 0 or below.\n  while(number > 0) {\n    let reminder = number % 10;\n    if (reminder) {\n      result += Math.pow(2, i);                   //Get the last digit of the binary number and if it is 1,\n    }                                             //then add it to the result by 2 to the power of the i.\n\n    i++;\n    number = Math.floor(number / 10);\n  }\n  return result;\n}\n\n\n// converts.js\nimport { toBinary, toDecimal } from './func';\n\n\nconst App = () => {\n  const [binary, setBinary] = useState('');\n  const [decimal, setDecimal] = useState('');\n  const [binaryError, setBinaryError] = useState(false);\n  const [numberError, setNumberError] = useState(false);\n\n  const handleBinaryChange = (e) => {\n    const binaryValue = e.target.value;\n    setNumberError(false);\n    if (isNaN(binaryValue)) {\n      setNumberError(true);\n      return;\n    }\n    \n    setBinaryError(!/^[0-1]+$/g.test(binaryValue) && binaryValue !== '');\n    if (binaryValue !== '') {\n      setBinary(binaryValue);\n      setDecimal(toDecimal(binaryValue));\n    } else {\n      setBinary('');\n      setDecimal('');\n    }\n  };\n\n  const handleDecimalChange = (e) => {\n    const decimalValue = e.target.value;\n    setNumberError(false);\n    if (isNaN(decimalValue)) {\n      setNumberError(true);\n      return;\n    }\n    if (decimalValue !== '') {\n      setDecimal(decimalValue);\n      setBinary(toBinary(decimalValue));\n    } else {\n      setDecimal('');\n      setBinary('');\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setDecimal(toDecimal(binary));\n  };\n\n  let binaryErrorMessage = 'Enter only Binary value (either 0 or 1)';\n  let numberErrorMessage = 'Enter only Numbers';\n\n  return (\n    <div className=\"converter\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Binary\"\n          onChange={handleBinaryChange}\n          value={binary}\n        />\n        {/* <input type=\"submit\" value=\"Convert\" disabled={binaryError} /> */}\n        <input type=\"text\" placeholder=\"Decimal\" onChange={handleDecimalChange} value={binaryError ? '' : decimal}\n          disabled={binaryError}\n        />\n        <span className={error-msg '$'{binaryError || numberError ? 'fadeIn' : ''} }>\n          {binaryError && binaryErrorMessage}\n          {numberError && numberErrorMessage}\n        </span>\n      </form>\n    </div>\n  );\n};\n".trim(),N='\n//1 form validation\nconst initialState = {\n  name: \'\',\n  email: \'\',\n  password: \'\',\n  nameError: \'\',\n  emailError: \'\',\n  passwordError: \'\',\n}\n\nclass App extends Component{\n  state = initialState;\n  \n  handleChange = (e) => {\n     const isCheched = e.target.type === "checkText";\n     this.setState({\n        [e.target.name]: isCheched ? e.target.checked : e.target.value\n     })\n  };\n  \n  validate = () => {\n     let nameError = \'\';\n     let emailError = \'\';\n     let passwordError = \'\';\n     \n     if(!this.state.name){\n        nameError = "Name Canot be blank";\n     }\n     \n     if(!this.state.email.includes("@")){\n        emailError = "Invalid email";\n     }\n     \n     if(!this.state.password){\n        passwordError = "Password not be too small";\n     }\n     \n     if(emailError || nameError || passwordError){\n        this.setState({emailError, nameError, passwordError})\n        return false;\n     }\n     return true;\n  }\n  \n  handleSubmit = (e) => {\n     e.preventDefault();\n     const isValid = this.validate();\n     if(isValid){\n     console.log(this.state);\n     this.setState({initialState});\n     }\n  }\n  \n  render(){\n     return(\n        <>\n           <form onSubmit={this.handleSubmit}>\n              <input name="name" value={this.state.name} onChange={this.handleChange} />\n              <div style={{color:\'red\'}}>{this.state.nameError}</div>\n              <br/>\n              <input name="email" value={this.state.email} onChange={this.handleChange} />\n              <div style={{color:\'red\'}}>{this.state.emailError}</div>\n              <br/>\n              <input name="password" value={this.state.password} onChange={this.handleChange} />\n              <div style={{color:\'red\'}}>{this.state.passwordError}</div>\n              <br/>\n              <br/>\n              <button type="submit">Submit</button>\n           </form>\n        </>\n     );\n  }\n}\n\n\n//2 Verify on input\nimport validateInput from \'./validateInput\';\n\n\nclass Props extends Component {\n  state = {\n      name: "",\n      nameError: "",\n      email: "",\n      emailError: ""\n      };\n\n  handleInputChange = e => {\n        let input = e.target;\n        let errors = validateInput(input);\n        this.setState({ ...this.state, [input.name]: input.value, ...errors });\n    };\n\n    onBlur = e => {\n      let input = e.target;\n      this.setState({ ...this.state, [input.name]: input.value });\n\n      setTimeout(() => { \n          if (!input.contains(document.activeElement)) {\n            let errors = validateInput(input); \n            this.setState({ ...this.state, ...errors });\n          }\n      }, 0);\n  };\n\n  handleSubmit = (e) => {\n      e.preventDefault();\n\n      console.log(e.target.name.value);\n      let errors = validateInput(e.target.name, e.target.email); \n      this.setState({ ...this.state, ...errors }); \n\n      let nameError = this.state.nameError;\n      let emailError = this.state.emailError;\n\n      if (nameError !== "" || typeof nameError !== \'undefined\'  || emailError !== "" || typeof emailError !== \'undefined\')\n       {}\n  }\n\n  render() {\n      return (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <div> \n                <label htmlFor="name">Name</label>\n                <p>{this.state.nameError}</p>\n                <input type="text" value={this.state.name} name="name" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder="bob" data-validation-type="name" required />\n              </div>\n              <div>\n                <label htmlFor="email">Email</label>\n                <p>{this.state.emailError}</p>\n                <input type="email" value={this.state.email} name="email" onChange={this.handleInputChange} \n                  onBlur={this.onBlur} placeholder="bob@bobsplace.com" data-validation-type="email" required />\n              </div>\n\n                <p>Recieve notifications by (wip)</p>\n\n                <label>\n                    <input onChange={this.handleInputChange} name="notificationRadio" type="radio" value="email" />\n                    Email\n                </label>\n\n                <label>\n                    <input onChange={this.handleInputChange} name="notificationRadio" type="radio" value="text" />\n                    Text\n                </label>\n\n                <button type="submit">Sumbit</button>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td colSpan="2"> <b>current state</b> </td>\n                        </tr>\n                        <tr>\n                            <td>name</td>\n                            <td> {this.state.name}</td>\n                        </tr>\n                        <tr>\n                            <td>nameError</td>\n                            <td> {this.state.nameError}</td>\n                        </tr>\n                        <tr>\n                            <td>email</td>\n                            <td> {this.state.email}</td>\n                        </tr>\n                        <tr>\n                            <td>emailError</td>\n                            <td> {this.state.emailError}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </form>\n          </div>\n      );\n  }\n}\n\n\n//validateInput.js\nvar emailRegex = /^S+@S+.S+$/;\nvar nameRegex = /^[a-zA-Z]/;\nvar mobileRegex = /^07[0-9]{9,10}$/;\n\n\nfunction validateInput() {\n    let errors = {};\n    \n    for (var i = 0 ; i < arguments.length ; i += 1) {       \n        let input = arguments[i];\n        let validationType = input.getAttribute("data-validation-type");\n        if (validationType === null) validationType = input.type;\n        let errorName = input.name + "Error";\n        console.log("input validation attr:", input.getAttribute("data-validation-type"), "input.value:", input.value);\n\n        errors[errorName] = "";\n\n        if (input.value === "" || input.value.length === 0) {\n            errors[errorName] = "please fill this in";\n        } \n        else if (validationType === "name") {\n            if (input.value.match(nameRegex) === null || input.value.length < 3) {\n                errors[errorName] = "Name must be at least 3 characters";\n            }\n        } \n        else if (validationType === "email") {\n            if (input.value.match(emailRegex) === null) {\n                errors[errorName] = "Email must be a valid email";\n            }\n        }\n    }\n\n    return errors;\n}'.trim(),x='\nclass App extends Component {\n   state = { inputValue: "" };\n \n handleUpdate = (e) => {\n   if (e.target.validity.valid) {\n     this.setState({ inputValue: e.target.value }); \n   }\n }\n \n reset = () => {\n   this.setState({ inputValue: "" }); \n }\n \n render() {\n   return (\n     <div>\n       <input type="number" value={this.state.inputValue} onChange={this.handleUpdate} step="any" />\n       <button onClick={this.reset}>reset</button>\n     </div>\n   )\n }  \n }'.trim(),D='\n //1\n function date_time() {\n   return Date();\n }\n \n //2\n function formatDate(dayOfWeek, day, month, year) {\n   var daysOfWeek = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];\n   var months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];\n       return daysOfWeek[dayOfWeek] + " " + months[month] + " " + day + " " + year; }\n \n   var birthday = new Date(Date.UTC(2000,0,1)); \n   var birthDay = formatDate(birthday.getUTCDay(), birthday.getUTCDate(),     \n   birthday.getUTCMonth(), birthday.getUTCFullYear())\n \n \n export { date_time, birthDay }'.trim(),k=function(e){function n(){return Object(a.a)(this,n),Object(l.a)(this,Object(i.a)(n).apply(this,arguments))}return Object(s.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return c.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return m.a.createElement(d.a,{container:!0},m.a.createElement(d.a,{item:!0,xs:2},m.a.createElement(p.a,{className:e.paper},m.a.createElement("h4",null,m.a.createElement(E.a,null)))),m.a.createElement(d.a,{item:!0,xs:10},m.a.createElement(p.a,{className:e.paper},m.a.createElement(h.a,null,m.a.createElement("h3",null,"1. Random Number"),m.a.createElement("div",{style:g},m.a.createElement(v.a,{code:y,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"2. Number format"),m.a.createElement("div",{style:g},m.a.createElement(v.a,{code:f,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"3. Number format without lib"),m.a.createElement("div",{style:g},m.a.createElement(v.a,{code:C,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"4. Convert Binary to Decimal"),m.a.createElement("div",{style:g},m.a.createElement(v.a,{code:S,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"5. Form Validation"),m.a.createElement("div",{style:g},m.a.createElement(v.a,{code:N,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"6. Step Input"),m.a.createElement("div",{style:g},m.a.createElement(v.a,{code:x,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"7. Date_time"),m.a.createElement("div",{style:g},m.a.createElement(v.a,{code:D,language:"js",plugins:["line-numbers"]}))))))}}]),n}(o.Component);n.default=Object(b.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(k)}}]);
//# sourceMappingURL=78.4630fc95.chunk.js.map