(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[250],{140:function(e,n,a){"use strict";a.d(n,"a",(function(){return p}));var t=a(45),r=a(28),l=a(136),s=a(137),i=a(139),c=a(0),o=a.n(c),m=a(138),u=a.n(m),p=(a(59),function(e){function n(e){var a;return Object(t.a)(this,n),(a=Object(l.a)(this,Object(s.a)(n).call(this,e))).highlight=function(){a.ref&&a.ref.current&&u.a.highlightElement(a.ref.current)},a.ref=o.a.createRef(),a}return Object(i.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,a=(e.plugins,e.language);return o.a.createElement("pre",{className:"code-prism"},o.a.createElement("code",{ref:this.ref,className:"language-".concat(a)},n.trim()))}}]),n}(o.a.Component))},141:function(e,n,a){},147:function(e,n,a){"use strict";a.d(n,"a",(function(){return m}));var t=a(0),r=a.n(t),l=a(26),s=a(297),i=a(295),c=a(114),o=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function m(){var e=o();return r.a.createElement("div",{className:e.root},r.a.createElement(i.a,null,r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/introPython",className:e.line},"intro Python")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/tuples",className:e.line},"Tuples")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/stringPy",className:e.line},"Strings")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/iteratorsPy",className:e.line},"Iterators")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/json",className:e.line},"Json")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/mathematics",className:e.line},"Mathematics")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/oops_",className:e.line},"Oops")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/abstract",className:e.line},"Abstract")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/exceptionsPy",className:e.line},"ExceptionsHandling")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/pyIntro",className:e.line},"Pickle")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/threadings",className:e.line},"Thread")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/collections",className:e.line},"Collections")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/logging",className:e.line},"Logging")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/regex",className:e.line},"Regex")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/tkinter",className:e.line},"TKinter")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/logicalspy",className:e.line},"Logicals")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/pyLogic",className:e.line},"PyLogic")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/csv",className:e.line},"CsvPython")),r.a.createElement("br",null),"Flask",r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/conroutes",className:e.line},"routes")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/httpsMethods",className:e.line},"Https")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/flasksIn",className:e.line},"Interviews")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/flask_signUp",className:e.line},"Flask_signUp")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/get_search",className:e.line},"Get_Search")),r.a.createElement(s.a,null,r.a.createElement(l.b,{to:"/load_search",className:e.line},"Load_Search"))),r.a.createElement("div",null))}},414:function(e,n,a){"use strict";a.r(n);var t=a(45),r=a(28),l=a(136),s=a(137),i=a(139),c=a(0),o=a.n(c),m=a(138),u=a.n(m),p=a(120),h=a(57),d=a(296),b=a(5),g=(a(141),a(147)),E=a(140),f={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},w="\ndef password_check(passwd):\n    SpecialSym = ['$', '@', '#', '%']\n    val = True\n\n    if len(passwd) < 6:\n        print('length should be 6')\n        val = False\n\n    if len(passwd) > 20:\n        print('length should not > 20')\n        val = False\n\n    if not any(char.isdigit() for char in passwd):\n        print('Password should have at least one numeral')\n        val = False\n\n    if not any(char.isupper() for char in passwd):\n        print('Password should have at least one uppercase letter')\n        val = False\n\n    if not any(char.islower() for char in passwd):\n        print('Password should have at least one lowercase letter')\n        val = False\n\n    if not any(char in SpecialSym for char in passwd):\n        print('Password should have at least one of the symbols $@#')\n        val = False\n    if val:\n        return val\n\n\ndef main():\n    passwd = 'Geek12@'\n\n    if (password_check(passwd)):\n        print(\"Password is valid\")\n    else:\n        print(\"Invalid Password !!\")\n\n\nif __name__ == '__main__':\n    main()".trim(),y='\nimport re\n\ndef main():\n    passwd = \'Geek12@\'\n    reg = "^(?=.*[a-z])(?=.*[A-Z])(?=.*d)(?=.*[@$!%*#?&])[A-Za-zd@$!#%*?&]{6,20}$"\n    \n    pat = re.compile(reg)                                                                   # compiling regex\n    mat = re.search(pat, passwd)                                                            # searching regex\n\n    if mat:\n        print("Password is valid.")\n    else:\n        print("Password invalid !!")\n\n\nif __name__ == \'__main__\':\n    main()'.trim(),v="\nimport random\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', \n          'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', \n          'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nnumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nsymbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']\n\nprint(\"Welcome to the PyPassword Generator!\")\nnr_letters = int(input(\"How many letters would you like in your password?: \"))\nnr_symbols = int(input(f\"How many symbols would you like?: \"))\nnr_numbers = int(input(f\"How many numbers would you like?: \"))\n\n#Eazy Level\npassword = \"\"\n\nfor char in range(1, nr_letters + 1):\n  password += random.choice(letters)\n\nfor char in range(1, nr_symbols + 1):\n  password += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password += random.choice(numbers)\n\nprint(password)\n\n\n#Hard Level\npassword_list = []\n\nfor char in range(1, nr_letters + 1):\n  password_list.append(random.choice(letters))\n\nfor char in range(1, nr_symbols + 1):\n  password_list += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password_list += random.choice(numbers)\n\nrandom.shuffle(password_list)                                                         #print(password_list)\n\npassword = \"\"\nfor char in password_list:\n  password += char\n\nprint(f\"Your password is: {password}\")".trim(),_='\nimport re\n\nregex = r"([a-zA-Z]+) (d+)"\n\nmatch = re.search(regex, "I was born on June 24")\n\nif match != None:\n\tprint ("Match at index %s, %s" % (match.start(), match.end()))\n\tprint ("Full match: %s" % (match.group(0)))\n\tprint ("Month: %s" % (match.group(1)))\n\tprint ("Day: %s" % (match.group(2)))\n\nelse:\n\tprint ("The regex pattern does not match.")\n\n\n\n#2 \ndef findMonthAndDate(string):\n    regex = r"([a-zA-Z]+) (d+)"\n    match = re.match(regex, string)\n\n    if match == None:\n        print("Not a valid date")\n        return\n\n    print("Given Data: %s" % (match.group()))\n    print("Month: %s" % (match.group(1)))\n    print("Day: %s" % (match.group(2)))\n\nfindMonthAndDate("Jun 24")\nprint("")\nfindMonthAndDate("I was born on June 24")\n\n\n\n#3 \nstring = """Hello my Number is 123456789 and\n\t\t\tmy friend\'s number is 987654321"""\n\nregex = \'d+\'\n\nmatch = re.findall(regex, string)\nprint(match)'.trim(),N="\n[]  Represent a character class\n^   Matches the beginning\n$   Matches the end\n.   Matches any character except newline\n?   Matches zero or one occurrence.\n|   Means OR (Matches with any of the characters separated by it.\n*   Any number of occurrences (including 0 occurrences)\n+   One or more occurrences\n{}  Indicate number of occurrences of a preceding RE  to match.\n()  Enclose a group of REs\n\n\n#2\n# class [abcde] will match with string with 'a', 'b', 'c', 'd', 'e'.\np = re.compile('[a-e]')\n\n#3\nprint(p.findall(\"Aye, said Mr. Gibenson Stark\"))\n\n\n#4\np = re.compile('d')                                                           \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\np = re.compile('d+')                                             \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\n\n\n#5\np = re.compile('w')                                                 \nprint(p.findall(\"He said * in some_lang.\"))\n\np = re.compile('w+')                                                 \nprint(p.findall(\"I went to him at 11 A.M., he said *** in some_language.\"))\n\np = re.compile('W')                                                 \nprint(p.findall(\"he said *** in some_language.\"))\n\n\n#6\np = re.compile('ab*')                                              \nprint(p.findall(\"ababbaabbb\"))\n\n\n#7\nfrom re import split\n\nprint(split('W+', 'Words, words , Words'))            \nprint(split('W+', \"Word's words Words\"))\n\nprint(split('W+', 'On 12th Jan 2016, at 11:02 AM'))\nprint(split('d+', 'On 12th Jan 2016, at 11:02 AM'))              #Splitting occurs at '12', '2016', '11', '02' only\n\n\n#8\nFunction sub()\n\nprint(re.sub('ub', '~*' , 'Subject has Uber booked already', flags = re.IGNORECASE))\n                                    \nprint(re.sub('ub', '~*' , 'Subject has Uber booked already'))     # Case Sensitivity, 'Ub' in \"Uber\", will not be reaplced.\n                                    \nprint(re.sub('ub', '~*' , 'Subject', count=1, flags = re.IGNORECASE))      # count=1, maximum times replacement occurs is 1.\n                                    \nprint(re.sub(r'sANDs', ' & ', 'Baked', flags=re.IGNORECASE))        # 'r' before the patter denotes RE, s is for start \n                                                                    #and end of a String.\n\n\n#9\nFunction subn()\nprint(re.subn('ub', '~*' , 'Subject booked already'))\nt = re.subn('ub', '~*' , 'Subject booked already', flags = re.IGNORECASE)\nprint(t)\nprint(len(t))\n\nprint(t[0])\n\n\n#10 \nFunction escape()\n\nprint(re.escape(\"This is Awseome even 1 AM\"))\nprint(re.escape(\"I Asked what is this [a-9], he said \t ^WoW\"))".trim(),x=function(e){function n(){return Object(t.a)(this,n),Object(l.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return o.a.createElement(p.a,{container:!0},o.a.createElement(p.a,{item:!0,xs:2},o.a.createElement(h.a,{className:e.paper},o.a.createElement("h4",null,o.a.createElement(g.a,null)))),o.a.createElement(p.a,{item:!0,xs:10},o.a.createElement(h.a,{className:e.paper},o.a.createElement(d.a,null,o.a.createElement("h3",null,"Password validation Without using Regex"),o.a.createElement("div",{style:f},o.a.createElement(E.a,{code:w,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Using regex"),o.a.createElement("div",{style:f},o.a.createElement(E.a,{code:y,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Password Generator"),o.a.createElement("div",{style:f},o.a.createElement(E.a,{code:v,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Searching an occurrence of pattern"),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"re.search(): "),"either returns None (if the pattern doesn\u2019t match), or a ",o.a.createElement("b",null,"re.MatchObject")," that contains information about the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more than extracting data."),o.a.createElement("li",null,o.a.createElement("b",null,"re.match(): "),"Matching a Pattern with Text."),o.a.createElement("li",null,o.a.createElement("b",null,"re.findall(): "),"Finding all occurrences of a pattern. Return all non-overlapping matches of pattern in string.")),o.a.createElement("div",{style:f},o.a.createElement(E.a,{code:_,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null),o.a.createElement("h3",null,"Syntex"),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("b",null,"Function compile(): "),"Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions."),o.a.createElement("li",null,o.a.createElement("b",null,"compile(): "),"creates regular expression character class [a-e], which is equivalent to [abcde]."),o.a.createElement("li",null,o.a.createElement("b",null,"findall(): "),"searches for the Regular Expression and return a list upon finding."),o.a.createElement("li",null,"Set class [s,.] will match any whitespace character, \u2018,\u2019, or,\u2019.\u2019 ."),o.a.createElement("li",null,o.a.createElement("b",null,":d "),"is equivalent to [0-9]."),o.a.createElement("li",null,o.a.createElement("b",null,":d+ "),"match a group on [0-9], group of one or greater size."),o.a.createElement("li",null,o.a.createElement("b",null,"w: "),"equivalent to [a-zA-Z0-9_]."),o.a.createElement("li",null,o.a.createElement("b",null,"w+: "),"matches to group of alphanumeric character."),o.a.createElement("li",null,o.a.createElement("b",null,"W: "),"matches to non alphanumeric characters."),o.a.createElement("li",null,o.a.createElement("b",null,"W+: "),"denotes Non-Alphanumeric Characters or group of characters."),o.a.createElement("li",null,o.a.createElement("b",null,"ub: "),'matches the string at "Subject" and "Uber".'),o.a.createElement("li",null,o.a.createElement("b",null,"escape(): "),"returns a string with BackSlash '', before every Non-Alphanumeric Character."),o.a.createElement("li",null,o.a.createElement("b",null,"*: "),"replaces the no. of occurrence of a character.")),o.a.createElement("br",null),o.a.createElement("div",{style:f},o.a.createElement(E.a,{code:N,language:"js",plugins:["line-numbers"]})),o.a.createElement("br",null)))))}}]),n}(c.Component);n.default=Object(b.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(x)}}]);
//# sourceMappingURL=250.db1b2586.chunk.js.map