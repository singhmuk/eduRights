{"version":3,"sources":["components/ReactJs/prismCode.js","components/algorithams/sidebar.js","assets/stcks.png","components/algorithams/deepAlgorithams/nestingArrAlgo.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","rotate","groupAnagrams","binaryMatrix","spiralOrder","uniquePaths","addBinary","DSLogic3","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/36.2193a2f0.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAlgo' className={classes.line}>Deadlock</Link></MenuItem>\n        <MenuItem><Link to='/Stack' className={classes.line}>Stack</Link></MenuItem>\n        <MenuItem><Link to='/Queue' className={classes.line}>Queue</Link></MenuItem>\n        <MenuItem><Link to='/linkedList' className={classes.line}>LinkedList</Link></MenuItem>\n        <MenuItem><Link to='/heap' className={classes.line}>Heap</Link></MenuItem>\n        <MenuItem><Link to='/trees' className={classes.line}>Tree</Link></MenuItem>\n        <MenuItem><Link to='/graph' className={classes.line}>Graph</Link></MenuItem>\n        <MenuItem><Link to='/sort' className={classes.line}>QuickSort</Link></MenuItem>\n        <MenuItem><Link to='/searchAlgo' className={classes.line}>Search</Link></MenuItem>\n        <MenuItem><Link to='/topTech' className={classes.line}>TopTech</Link></MenuItem>\n        <MenuItem><Link to='/stringAlgo' className={classes.line}>String</Link></MenuItem>\n        <MenuItem><Link to='/arrayAlgo' className={classes.line}>Array</Link></MenuItem>\n        <MenuItem><Link to='/nestingArrAlgo' className={classes.line}>Nesting Array</Link></MenuItem>\n        <MenuItem><Link to='/numbersAlgo' className={classes.line}>Numbers</Link></MenuItem>\n        <MenuItem><Link to='/gameAlgo' className={classes.line}>Game</Link></MenuItem>\n        <MenuItem><Link to='/arrayStrAlgo' className={classes.line}>ArrayStr</Link></MenuItem>\n        <MenuItem><Link to='/arrayNumAlgo' className={classes.line}>ArrayNum</Link></MenuItem>\n        <MenuItem><Link to='/dslogic8' className={classes.line}>Logic8</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/stcks.7efa3b78.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst rotate = `\nfunction rotate (matrix = []){\n  const n = matrix.length\n\n  for (let i = 0; i < Math.floor(n / 2); i++) {\n    const temp = matrix[i]\n    matrix[i] = matrix[n - 1 - i]\n    matrix[n - 1 - i] = temp\n  }\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const temp = matrix[i][j]\n      matrix[i][j] = matrix[j][i]\n      matrix[j][i] = temp\n    }\n  }\n  return matrix\n}\n\nconsole.log(rotate([[1,2,3],[4,5,6],[7,8,9]]))\n`.trim();\n\nconst groupAnagrams = `\nfunction groupAnagrams(strs) {\n  const sortStr = str => str.split('').sort((a, b) => a.localeCompare(b)).join('')\n\n  const sortedMap = strs.map(sortStr).reduce((map, current, index) => {\n      if (map[current]) {\n        map[current].push(strs[index])\n      } \n      else {\n        map[current] = [strs[index]]\n      }\n      return map\n    },\n    {},\n  )\n\n  return Object.keys(sortedMap).map(key => sortedMap[key])\n}\n\nconsole.log(groupAnagrams([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]))\n`.trim();\n\nconst binaryMatrix = `\nfunction shorPath(grid) {\n  let n = grid.length - 1;\n  let q = [0]\n  \n  if (grid[0][0] || grid[n][n]) return -1\n  \n  grid[0][0] = 1\n  while (q.length) {\n      let curr = q.shift();\n      let i = curr & (1 << 7) - 1;\n      let j = curr >> 7;\n      \n      if (i === n && j === n) return grid[n][n]\n      for (let a = Math.max(i-1,0); a <= Math.min(i+1,n); a++){\n          for (let b = Math.max(j-1,0); b <= Math.min(j+1,n); b++){\n              if (grid[a][b] === 0){\n                  grid[a][b] = grid[i][j] + 1, q.push(a + (b << 7))\n                  }\n                }\n              }\n            }\n            return -1\n          };\n  \n  console.log(shorPath([[0,0,0],[1,1,0],[1,1,0]]));`.trim();\n\nconst spiralOrder = `\nfunction spiralOrder(matrix) {\n  let result = []\n  if(!matrix.length) return result;\n  \n  let rowMin = 0\n  let rowMax = matrix.length -1\n  let columnMin = 0\n  let columnMax = matrix[0].length - 1\n  \n  let i = 0\n  let j = 0\n  let direction = \"right\"\n\n  while(result.length < matrix.length * matrix[0].length) {\n    result.push(matrix[i][j])\n      if(direction === \"right\") {\n          if(j === columnMax) {\n              rowMin += 1\n              i = rowMin\n              direction = \"down\"\n          } else {\n              j++\n          }\n      } else if(direction === \"down\") {\n          if(i === rowMax) {\n              direction = \"left\"\n              columnMax -= 1\n              j = columnMax\n          } else {\n              i++\n          }\n      } else if(direction === \"left\") {\n\n          if(j === columnMin) {\n              direction = \"up\"\n              rowMax -= 1\n               i = rowMax\n          } else {\n              j--\n          }\n      } else {\n          if(i === rowMin) {\n              direction = \"right\"\n              columnMin += 1\n               j = columnMin\n          } else {\n              i--\n          }\n      }\n  }\n\n  return result \n};\n\n\nconsole.log(spiralOrder([\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n ]))\n`.trim();\n\nconst uniquePaths = `\nfunction uniquePaths(m, n){\n  const memo = {}\n\n  function aux(rowIndex, columnIndex){\n    if (memo[rowIndex] !== undefined && memo[rowIndex][columnIndex] !== undefined) {\n      return memo[rowIndex][columnIndex]\n    }\n\n    if (rowIndex >= m || columnIndex >= n) return 0\n    if (rowIndex === m - 1 && columnIndex === n - 1) return 1\n\n    memo[rowIndex] = memo[rowIndex] || {}\n    memo[rowIndex][columnIndex] = aux(rowIndex + 1, columnIndex) + aux(rowIndex, columnIndex + 1)\n    return memo[rowIndex][columnIndex]\n  }\n  \n  return aux(0, 0)\n}\n\nconsole.log(uniquePaths(7,3))\n`.trim();\n\n\n\nconst addBinary = `\nfunction addBinary(a, b) {\n  const reverse = x => x.split('').reverse()\n  \n  const { shorter, longer } = a.length > b.length\n                              ? { shorter: reverse(b), longer: reverse(a) }\n                              : { shorter: reverse(a), longer: reverse(b) }\n\n  let reminder = 0\n  const digits = longer.map((num1, index) => {\n    let res = parseInt(num1, 10) + reminder + (parseInt(shorter[index], 10) ? parseInt(shorter[index], 10) : 0)\n    if (res >= 2) {\n      res -= 2\n      reminder = 1\n    } else {\n      reminder = 0\n    }\n    return res\n  })\n  \n  if (reminder === 1) {\n    digits.push(reminder)\n  }\n  return digits.reverse().join('')\n}\n\nconsole.log(addBinary(\"1010\", \"1011\"))\n`.trim();\n\n\nclass DSLogic3 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. Rotate Image.</h3>\n              You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\n              <br/>\n              You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n              <br/><br/><b>Input: </b>matrix = [[1,2,3],[4,5,6],[7,8,9]]<br/>\n              <b>Output: </b>[[7,4,1],[8,5,2],[9,6,3]]\n              <div style={titles}>\n                <PrismCode\n                  code={rotate}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>2. Group Anagrams.</h3>\n              Given an array of strings strs, group the anagrams together. You can return the answer in any order.\n              <br/>\n              An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n              <br/> <br/>\n              <b>Input: </b>strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]<br/>\n              <b>Output: </b>[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n              <div style={titles}>\n                <PrismCode\n                  code={groupAnagrams}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>3. Shortest Path in Binary Matrix</h3>\n              <ul>\n                <li>In an N by N square grid, each cell is either empty (0) or blocked (1).</li>\n                <li>A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:</li>\n                1.Adjacent cells C_i and C_i+1 are connected 8-directionally (ie., they are different and share an edge or corner)\n                <br />\n                2.C_1 is at location (0, 0) (ie. has value grid[0][0])<br />\n                3.C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])<br />\n                4.If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).\n                <li>Return the length of the shortest such clear path from top-left to bottom-right. If such a path does not exist, return -1.</li>\n              </ul>\n              <b>Input: </b>[[0,1],[1,0]], [[0,0,0],[1,1,0],[1,1,0]]\n              <br />\n              <b>Output: </b>2, 4\n              <div style={titles}>\n                <PrismCode\n                  code={binaryMatrix}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />              \n\n              <h3>4. Spiral Matrix.</h3>\n              <b>Input: </b>\n                [\n                [ 1, 2, 3 ],<br/>\n                [ 4, 5, 6 ],<br/>\n                [ 7, 8, 9 ]\n                ]<br/><br/>\n                <b>Output: </b>[1,2,3,6,9,8,7,4,5]\n              <div style={titles}>\n                <PrismCode\n                  code={spiralOrder}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>5. Unique Paths.</h3>\n              A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n              <br/>\n              The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n              <br/>\n              How many possible unique paths are there? <br/> <br/>\n              <b>Input: </b>m = 7, n = 3<br/>\n              <b>Output: </b>28\n              <div style={titles}>\n                <PrismCode\n                  code={uniquePaths}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n\n              <h3>6. Add Binary</h3>\n              Given two binary strings, return their sum (also a binary string).\n              <br/>\n              The input strings are both non-empty and contains only characters 1 or 0.<br/>\n              <b>Input: </b>a = \"1010\", b = \"1011\"<br/>\n              <b>Output: </b>\"10101\"\n              <div style={titles}>\n                <PrismCode\n                  code={addBinary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(DSLogic3));\n"],"sourceRoot":""}