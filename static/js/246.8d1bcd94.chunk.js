(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[246],{140:function(e,n,a){"use strict";a.d(n,"a",(function(){return d}));var t=a(45),r=a(28),l=a(136),m=a(137),i=a(139),s=a(0),c=a.n(s),u=a(138),o=a.n(u),d=(a(59),function(e){function n(e){var a;return Object(t.a)(this,n),(a=Object(l.a)(this,Object(m.a)(n).call(this,e))).highlight=function(){a.ref&&a.ref.current&&o.a.highlightElement(a.ref.current)},a.ref=c.a.createRef(),a}return Object(i.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,a=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(a)},n.trim()))}}]),n}(c.a.Component))},141:function(e,n,a){},147:function(e,n,a){"use strict";a.d(n,"a",(function(){return u}));var t=a(0),r=a.n(t),l=a(26),m=a(297),i=a(295),s=a(114),c=Object(s.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function u(){var e=c();return r.a.createElement("div",{className:e.root},r.a.createElement(i.a,null,r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/introPython",className:e.line},"intro Python")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/tuples",className:e.line},"Tuples")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/stringPy",className:e.line},"Strings")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/iteratorsPy",className:e.line},"Iterators")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/json",className:e.line},"Json")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/mathematics",className:e.line},"Mathematics")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/oops_",className:e.line},"Oops")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/abstract",className:e.line},"Abstract")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/exceptionsPy",className:e.line},"ExceptionsHandling")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/pyIntro",className:e.line},"Pickle")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/threadings",className:e.line},"Thread")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/collections",className:e.line},"Collections")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/logging",className:e.line},"Logging")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/regex",className:e.line},"Regex")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/tkinter",className:e.line},"TKinter")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/logicalspy",className:e.line},"Logicals")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/pyLogic",className:e.line},"PyLogic")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/csv",className:e.line},"CsvPython")),r.a.createElement("br",null),"Flask",r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/conroutes",className:e.line},"routes")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/httpsMethods",className:e.line},"Https")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/flasksIn",className:e.line},"Interviews")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/flask_signUp",className:e.line},"Flask_signUp")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/get_search",className:e.line},"Get_Search")),r.a.createElement(m.a,null,r.a.createElement(l.b,{to:"/load_search",className:e.line},"Load_Search"))),r.a.createElement("div",null))}},412:function(e,n,a){"use strict";a.r(n);var t=a(45),r=a(28),l=a(136),m=a(137),i=a(139),s=a(0),c=a.n(s),u=a(138),o=a.n(u),d=a(120),p=a(57),E=a(296),h=a(5),b=(a(141),a(147)),g=a(140),f={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},y="\ndef simple_interest(p,t,r):\n    si = (p * t * r)/100\n    \n    print('The Simple Interest is', si)\n    return si\n\nsimple_interest(8, 6, 8)\n ".trim(),v='\ndef compound_interest(principle, rate, time):\n\n    CI = principle * (pow((1 + rate / 100), time))\n    print("Compound interest is", CI)\n\ncompound_interest(10000, 10.25, 5) '.trim(),N='\ndef convert24(str1):\n\n    if str1[-2:] == "AM" and str1[:2] == "12":\n        return "00" + str1[2:-2]\n\n    elif str1[-2:] == "AM":\n        return str1[:-2]\n\n    elif str1[-2:] == "PM" and str1[:2] == "12":\n        return str1[:-2]\n\n    else:\n\n        return str(int(str1[:2]) + 12) + str1[2:8]\n\nprint(convert24("08:05:45 PM"))'.trim(),j="\nprint(bin(25))\nprint(oct(0b11001))\nprint(hex(0b11001))\nprint(int('052', 8))\n\n\n#2\nimport math as m\n\nx=m.sqrt(25)\nprint(x)\n\n\n#3\nx=m.sqrt(15)\nprint(m.floor(x))\nprint(m.ceil(x))".trim(),x="\nimport math\n\nprint(3**2)\nprint(math.pow(3,2))\nprint(math.pi)\n\n\n#2\nfrom math import sqrt, pow\n\nprint(pow(4,5))".trim(),w="\na = 5\nb = 6\nc = 7\n\ns = (a + b + c) / 2                                                         # calculate the semi-perimeter\n\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' %area)".trim(),k='\ndef hcf(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller + 1):\n        if ((x % i == 0) and (y % i == 0)):\n            hcf = i\n    return hcf\n\n\nnum1 = int(input("Enter first number: "))\nnum2 = int(input("Enter second number: "))\nprint("The H.C.F. of", num1, "and", num2, "is", hcf(num1, num2))'.trim(),C='\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint("The largest number is", largest)'.trim(),T='\ndef lcm(x, y):\n    if x > y:\n        greater = y\n    else:\n        greater = x\n    for i in range(1, greater + 1):\n        if ((x % i == 0) and (y % i == 0)):\n            lcm = i\n    return lcm\n\n\nnum1 = int(input("Enter first number: "))\nnum2 = int(input("Enter second number: "))\nprint("The L.C.M. of", num1, "and", num2, "is", lcm(num1, num2))'.trim(),I='\n\n# Random Number\nimport random\n\nprint(random.randint(0,9))\n\n\n#2 Sum 2 Numbers\nnumber1 = input("First number: ")\nnumber2 = input("Second number: ")\n\nsum = float(number1) + float(number2)\nprint("The sum of {0} and {1} is {2}" .format(number1, number2, sum))'.trim(),P="\nimport cmath\n\na = 1\nb = 5\nc = 6\n\nd = (b**2) - (4*a*c)                                                          # calculate the discriminant\n\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1,sol2))".trim(),F='\nimport random\n\na = random.random()                                                   # random float in [0,1]\na = random.uniform(1,10)                                              # random float in range [a,b]\na = random.randint(1,10)                                              # random integer in range [a,b]. b is included\na = random.randrange(1,10)                                            # random integer in range [a,b]. b is excluded\n\na = random.normalvariate(0, 1)                               \na = random.choice(list("ABCDEFGHI"))                          \na = random.sample(list("ABCDEFGHI"), 3)                       \na = random.choices(list("ABCDEFGHI"),k=3)                     \n\nprint(a)\n\n\na = list("ABCDEFGHI")\nrandom.shuffle(a)                                                  \nprint(a)'.trim(),_="\nimport random\n\nrandom.seed(1)\nprint(random.random())\nprint(random.uniform(1,10))\nprint(random.choice(list(\"ABCDEFGHI\")))\n\nprint('Re-seeding with 42...')\nrandom.seed(42)                                                                     # Re-seed\n".trim(),M='\nimport secrets\n\na = secrets.randbelow(10)                                             \na = secrets.randbits(5)                                               # return an integer with k random bits.\na = secrets.choice(list("ABCDEFGHI"))\n\nprint(a)'.trim(),O="\nimport numpy as np\n\nnp.random.seed(1)                                        # rand(d0,d1,\u2026,dn)\n\nprint(np.random.rand(3))                                 # generate an array with random floats, arrays has size (d0,d1,\u2026,dn)\nnp.random.seed(1)\nprint(np.random.rand(3))\n\nvalues = np.random.randint(0, 10, (5,3))                # generate an array with random integers in range [a,b) with size n\nprint(values)\n                                        # generate an array with Gaussian values, array has size (d0,d1,\u2026,dn)\n                                        # values from standard normal distribution with mean 0.0 and standard deviation 1.0\nvalues = np.random.randn(5)\nprint(values)\n                                        # randomly shuffle an array.\n                                        # only shuffles the array along the first axis of a multi-dimensional array\narr = np.array([[1,2,3], [4,5,6], [7,8,9]])\nnp.random.shuffle(arr)\nprint(arr)".trim(),A=function(e){function n(){return Object(t.a)(this,n),Object(l.a)(this,Object(m.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return o.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(d.a,{container:!0},c.a.createElement(d.a,{item:!0,xs:2},c.a.createElement(p.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(b.a,null)))),c.a.createElement(d.a,{item:!0,xs:10},c.a.createElement(p.a,{className:e.paper},c.a.createElement(E.a,null,c.a.createElement("h3",null,"Simple interest"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:y,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Compound interest"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:v,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"conver_12_to_24_hour_format"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:N,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Sqrt"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:j,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Pows"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:x,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Area of triangle"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:w,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"HCF"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:k,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Largest number"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:C,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"LCM"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:T,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Math Function"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:I,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Quadratic Equation"),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:P,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Random Numbers"),"Python defines a set of functions that are used to generate or manipulate random numbers.",c.a.createElement("ul",null,c.a.createElement("li",null,"the random module"),c.a.createElement("li",null,"reproduce numbers with random.seed()"),c.a.createElement("li",null,"create cryptographically strong random numbers with the secrets module"),c.a.createElement("li",null,"create random and arrays with numpy.random")),c.a.createElement("br",null),c.a.createElement("h3",null,"The random module"),"This module implements pseudo-random number generators for various distributions. It uses the Mersenne Twister algorithm as its core generator. It is called pseudo-random, because the numbers seem random, but are reproducable.",c.a.createElement("br",null),c.a.createElement("br",null),c.a.createElement("ul",null,c.a.createElement("li",null,c.a.createElement("b",null,"normalvariate(): "),"random float from a normal distribution with mu and sigma."),c.a.createElement("li",null,c.a.createElement("b",null,"choice(): "),"choose a random element from a sequence."),c.a.createElement("li",null,c.a.createElement("b",null,"choices(): "),"choose k elements with replacement, and return k sized list."),c.a.createElement("li",null,c.a.createElement("b",null,"sample(): "),"choose k unique random elements from a sequence."),c.a.createElement("li",null,c.a.createElement("b",null,"shuffle(): "),"shuffle list in place.")),c.a.createElement("br",null),c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:F,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"The seed generator"),"With random.seed(), you can make results reproducible, and the chain of calls after random.seed() will produce the same trail of data. The sequence of random numbers becomes deterministic, or completely determined by the seed value.",c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:_,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"The secrets module"),"The secrets module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.",c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:M,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Random numbers with NumPy"),"Create random numbers for and arrays. The NumPy pseudorandom number generator is different from the Python standard library pseudorandom number generator. Importantly, seeding the Python pseudorandom number generator does not impact the NumPy pseudorandom number generator. It must be seeded and used separately.",c.a.createElement("div",{style:f},c.a.createElement(g.a,{code:O,language:"js",plugins:["line-numbers"]}))))))}}]),n}(s.Component);n.default=Object(h.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(A)}}]);
//# sourceMappingURL=246.8d1bcd94.chunk.js.map