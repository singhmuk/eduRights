{"version":3,"sources":["components/ReactJs/prismCode.js","components/pythone/sidebar.js","components/pythone/deeppy/regex.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","password","usingRegex","generators","searching","syntex","Regex","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/250.db1b2586.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introPython' className={classes.line}>intro Python</Link></MenuItem>\n        <MenuItem><Link to='/tuples' className={classes.line}>Tuples</Link></MenuItem>\n        <MenuItem><Link to='/stringPy' className={classes.line}>Strings</Link></MenuItem>\n        <MenuItem><Link to='/iteratorsPy' className={classes.line}>Iterators</Link></MenuItem>\n        <MenuItem><Link to='/json' className={classes.line}>Json</Link></MenuItem>\n        <MenuItem><Link to='/mathematics' className={classes.line}>Mathematics</Link></MenuItem>\n        <MenuItem><Link to='/oops_' className={classes.line}>Oops</Link></MenuItem>\n        <MenuItem><Link to='/abstract' className={classes.line}>Abstract</Link></MenuItem>\n        <MenuItem><Link to='/exceptionsPy' className={classes.line}>ExceptionsHandling</Link></MenuItem>\n\n        <MenuItem><Link to='/pyIntro' className={classes.line}>Pickle</Link></MenuItem>\n\n        <MenuItem><Link to='/threadings' className={classes.line}>Thread</Link></MenuItem>\n        <MenuItem><Link to='/collections' className={classes.line}>Collections</Link></MenuItem>\n        <MenuItem><Link to='/logging' className={classes.line}>Logging</Link></MenuItem>\n        <MenuItem><Link to='/regex' className={classes.line}>Regex</Link></MenuItem>\n        <MenuItem><Link to='/tkinter' className={classes.line}>TKinter</Link></MenuItem>\n\n        <MenuItem><Link to='/logicalspy' className={classes.line}>Logicals</Link></MenuItem>\n        <MenuItem><Link to='/pyLogic' className={classes.line}>PyLogic</Link></MenuItem>\n        <MenuItem><Link to='/csv' className={classes.line}>CsvPython</Link></MenuItem>\n        <br />\n        Flask\n        <MenuItem><Link to='/conroutes' className={classes.line}>routes</Link></MenuItem>\n        <MenuItem><Link to='/httpsMethods' className={classes.line}>Https</Link></MenuItem>\n        <MenuItem><Link to='/flasksIn' className={classes.line}>Interviews</Link></MenuItem>\n\n        <MenuItem><Link to='/flask_signUp' className={classes.line}>Flask_signUp</Link></MenuItem>\n        <MenuItem><Link to='/get_search' className={classes.line}>Get_Search</Link></MenuItem>\n        <MenuItem><Link to='/load_search' className={classes.line}>Load_Search</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst password = `\ndef password_check(passwd):\n    SpecialSym = ['$', '@', '#', '%']\n    val = True\n\n    if len(passwd) < 6:\n        print('length should be 6')\n        val = False\n\n    if len(passwd) > 20:\n        print('length should not > 20')\n        val = False\n\n    if not any(char.isdigit() for char in passwd):\n        print('Password should have at least one numeral')\n        val = False\n\n    if not any(char.isupper() for char in passwd):\n        print('Password should have at least one uppercase letter')\n        val = False\n\n    if not any(char.islower() for char in passwd):\n        print('Password should have at least one lowercase letter')\n        val = False\n\n    if not any(char in SpecialSym for char in passwd):\n        print('Password should have at least one of the symbols $@#')\n        val = False\n    if val:\n        return val\n\n\ndef main():\n    passwd = 'Geek12@'\n\n    if (password_check(passwd)):\n        print(\"Password is valid\")\n    else:\n        print(\"Invalid Password !!\")\n\n\nif __name__ == '__main__':\n    main()`.trim();\n\nconst usingRegex = `\nimport re\n\ndef main():\n    passwd = 'Geek12@'\n    reg = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{6,20}$\"\n    \n    pat = re.compile(reg)                                                                   # compiling regex\n    mat = re.search(pat, passwd)                                                            # searching regex\n\n    if mat:\n        print(\"Password is valid.\")\n    else:\n        print(\"Password invalid !!\")\n\n\nif __name__ == '__main__':\n    main()`.trim();\n\nconst generators = `\nimport random\nletters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', \n          'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', \n          'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nnumbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nsymbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']\n\nprint(\"Welcome to the PyPassword Generator!\")\nnr_letters = int(input(\"How many letters would you like in your password?: \"))\nnr_symbols = int(input(f\"How many symbols would you like?: \"))\nnr_numbers = int(input(f\"How many numbers would you like?: \"))\n\n#Eazy Level\npassword = \"\"\n\nfor char in range(1, nr_letters + 1):\n  password += random.choice(letters)\n\nfor char in range(1, nr_symbols + 1):\n  password += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password += random.choice(numbers)\n\nprint(password)\n\n\n#Hard Level\npassword_list = []\n\nfor char in range(1, nr_letters + 1):\n  password_list.append(random.choice(letters))\n\nfor char in range(1, nr_symbols + 1):\n  password_list += random.choice(symbols)\n\nfor char in range(1, nr_numbers + 1):\n  password_list += random.choice(numbers)\n\nrandom.shuffle(password_list)                                                         #print(password_list)\n\npassword = \"\"\nfor char in password_list:\n  password += char\n\nprint(f\"Your password is: {password}\")`.trim();\n\nconst searching = `\nimport re\n\nregex = r\"([a-zA-Z]+) (\\d+)\"\n\nmatch = re.search(regex, \"I was born on June 24\")\n\nif match != None:\n\tprint (\"Match at index %s, %s\" % (match.start(), match.end()))\n\tprint (\"Full match: %s\" % (match.group(0)))\n\tprint (\"Month: %s\" % (match.group(1)))\n\tprint (\"Day: %s\" % (match.group(2)))\n\nelse:\n\tprint (\"The regex pattern does not match.\")\n\n\n\n#2 \ndef findMonthAndDate(string):\n    regex = r\"([a-zA-Z]+) (\\d+)\"\n    match = re.match(regex, string)\n\n    if match == None:\n        print(\"Not a valid date\")\n        return\n\n    print(\"Given Data: %s\" % (match.group()))\n    print(\"Month: %s\" % (match.group(1)))\n    print(\"Day: %s\" % (match.group(2)))\n\nfindMonthAndDate(\"Jun 24\")\nprint(\"\")\nfindMonthAndDate(\"I was born on June 24\")\n\n\n\n#3 \nstring = \"\"\"Hello my Number is 123456789 and\n\t\t\tmy friend's number is 987654321\"\"\"\n\nregex = '\\d+'\n\nmatch = re.findall(regex, string)\nprint(match)`.trim();\n\nconst syntex = `\n[]  Represent a character class\n^   Matches the beginning\n$   Matches the end\n.   Matches any character except newline\n?   Matches zero or one occurrence.\n|   Means OR (Matches with any of the characters separated by it.\n*   Any number of occurrences (including 0 occurrences)\n+   One or more occurrences\n{}  Indicate number of occurrences of a preceding RE  to match.\n()  Enclose a group of REs\n\n\n#2\n# class [abcde] will match with string with 'a', 'b', 'c', 'd', 'e'.\np = re.compile('[a-e]')\n\n#3\nprint(p.findall(\"Aye, said Mr. Gibenson Stark\"))\n\n\n#4\np = re.compile('\\d')                                                           \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\np = re.compile('\\d+')                                             \nprint(p.findall(\"I went to him at 11 A.M. on 4th July 1886\"))\n\n\n\n#5\np = re.compile('\\w')                                                 \nprint(p.findall(\"He said * in some_lang.\"))\n\np = re.compile('\\w+')                                                 \nprint(p.findall(\"I went to him at 11 A.M., he said *** in some_language.\"))\n\np = re.compile('\\W')                                                 \nprint(p.findall(\"he said *** in some_language.\"))\n\n\n#6\np = re.compile('ab*')                                              \nprint(p.findall(\"ababbaabbb\"))\n\n\n#7\nfrom re import split\n\nprint(split('\\W+', 'Words, words , Words'))            \nprint(split('\\W+', \"Word's words Words\"))\n\nprint(split('\\W+', 'On 12th Jan 2016, at 11:02 AM'))\nprint(split('\\d+', 'On 12th Jan 2016, at 11:02 AM'))              #Splitting occurs at '12', '2016', '11', '02' only\n\n\n#8\nFunction sub()\n\nprint(re.sub('ub', '~*' , 'Subject has Uber booked already', flags = re.IGNORECASE))\n                                    \nprint(re.sub('ub', '~*' , 'Subject has Uber booked already'))     # Case Sensitivity, 'Ub' in \"Uber\", will not be reaplced.\n                                    \nprint(re.sub('ub', '~*' , 'Subject', count=1, flags = re.IGNORECASE))      # count=1, maximum times replacement occurs is 1.\n                                    \nprint(re.sub(r'\\sAND\\s', ' & ', 'Baked', flags=re.IGNORECASE))        # 'r' before the patter denotes RE, \\s is for start \n                                                                    #and end of a String.\n\n\n#9\nFunction subn()\nprint(re.subn('ub', '~*' , 'Subject booked already'))\nt = re.subn('ub', '~*' , 'Subject booked already', flags = re.IGNORECASE)\nprint(t)\nprint(len(t))\n\nprint(t[0])\n\n\n#10 \nFunction escape()\n\nprint(re.escape(\"This is Awseome even 1 AM\"))\nprint(re.escape(\"I Asked what is this [a-9], he said \\t ^WoW\"))`.trim();\n\n// const list = ``.trim();\n\n// const list = ``.trim();\n\n\nclass Regex extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Password validation Without using Regex</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={password}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Using regex</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={usingRegex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Password Generator</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={generators}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Searching an occurrence of pattern</h3>\n              <ul>\n                <li><b>re.search(): </b>either returns None (if the pattern doesn’t match), or a <b>re.MatchObject</b> that contains information about\n                  the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more\n                  than extracting data.</li>\n                <li><b>re.match(): </b>Matching a Pattern with Text.</li>\n                <li><b>re.findall(): </b>Finding all occurrences of a pattern. Return all non-overlapping matches of pattern in string.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={searching}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Syntex</h3>\n              <ul>\n                <li><b>Function compile(): </b>Regular expressions are compiled into pattern objects, which have methods for various\n                  operations such as searching for pattern matches or performing string substitutions.</li>\n                <li><b>compile(): </b>creates regular expression character class [a-e], which is equivalent to [abcde].</li>\n                <li><b>findall(): </b>searches for the Regular Expression and return a list upon finding.</li>\n                <li>Set class [s,.] will match any whitespace character, ‘,’, or,’.’ .</li>\n                <li><b>:d </b>is equivalent to [0-9].</li>\n                <li><b>:d+ </b>match a group on [0-9], group of one or greater size.</li>\n                <li><b>w: </b>equivalent to [a-zA-Z0-9_].</li>\n                <li><b>w+: </b>matches to group of alphanumeric character.</li>\n                <li><b>W: </b>matches to non alphanumeric characters.</li>\n                <li><b>W+: </b>denotes Non-Alphanumeric Characters or group of characters.</li>\n                <li><b>ub: </b>matches the string at \"Subject\" and \"Uber\".</li>\n                <li><b>escape(): </b>returns a string with BackSlash '', before every Non-Alphanumeric Character.</li>\n                <li><b>*: </b>replaces the no. of occurrence of a character.</li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={syntex}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              {/* <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={list}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={list}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div> */}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Regex));\n"],"sourceRoot":""}