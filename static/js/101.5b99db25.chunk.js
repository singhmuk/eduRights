(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[101],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return d}));var a=t(45),l=t(28),r=t(136),o=t(137),i=t(139),c=t(0),s=t.n(c),u=t(138),m=t.n(u),d=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(r.a)(this,Object(o.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&m.a.highlightElement(t.ref.current)},t.ref=s.a.createRef(),t}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return s.a.createElement("pre",{className:"code-prism"},s.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(s.a.Component))},141:function(e,n,t){},150:function(e,n,t){"use strict";t.d(n,"a",(function(){return u}));var a=t(0),l=t.n(a),r=t(26),o=t(297),i=t(295),c=t(114),s=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function u(){var e=s();return l.a.createElement("div",{className:e.root},l.a.createElement(i.a,null,l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/introAngular",className:e.line},"AI")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/tensorflow",className:e.line},"Tensorflow")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/tensors",className:e.line},"Tensorboards")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/angCompiler",className:e.line},"Compiler")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/neural",className:e.line},"NeuralKeras")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/activationFunctions",className:e.line},"activationFuncs")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/loss",className:e.line},"Loss")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/gradientNeural",className:e.line},"GradientNeural")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/stochastic",className:e.line},"Stochastic")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/benchmarking",className:e.line},"Benchmarking")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/customer",className:e.line},"Customer")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/regularizationDeep",className:e.line},"Regularization Deep")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/imbalanced",className:e.line},"Imbalanced")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/imbalanced2",className:e.line},"Imbalanced2")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/convolutionals",className:e.line},"Convolutionals")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/data_augmentation",className:e.line},"data Augmentation")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/transfer",className:e.line},"Transfer")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/word_embedding",className:e.line},"Embedding")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/datatypests",className:e.line},"Datatypes")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/typeScript_2",className:e.line},"TS Function")),l.a.createElement(o.a,null,l.a.createElement(r.b,{to:"/typeScript_4",className:e.line},"Type Assertion"))),l.a.createElement("div",null))}},460:function(e,n,t){"use strict";t.r(n);var a=t(45),l=t(28),r=t(136),o=t(137),i=t(139),c=t(0),s=t.n(c),u=t(138),m=t.n(u),d=t(120),p=t(57),g=t(296),f=t(5),h=(t(141),t(150)),b=t(140),E={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},_="\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\ndf = pd.read_csv(\"customer_churn.csv\")\n\ndf.drop('customerID',axis='columns',inplace=True)\ndf.dtypes\n".trim(),y="\ndf.TotalCharges.values\npd.to_numeric(df.TotalCharges)                                                   #string Convert it to numbers.\n\npd.to_numeric(df.TotalCharges,errors='coerce').isnull()                          #some values not numbers but blank string.\n\ndf[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()]\ndf.iloc[488].TotalCharges\ndf[df.TotalCharges!=' '].shape\n\ndf1 = df[df.TotalCharges!=' ']                                                   #Remove rows with space in TotalCharges.\ndf1.TotalCharges = pd.to_numeric(df1.TotalCharges)\ndf1.TotalCharges.values\ndf1[df1.Churn=='No']\n".trim(),N="\ntenure_churn_no = df1[df1.Churn=='No'].tenure\ntenure_churn_yes = df1[df1.Churn=='Yes'].tenure\n\nplt.xlabel(\"tenure\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([tenure_churn_yes, tenure_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n\n\nmc_churn_no = df1[df1.Churn=='No'].MonthlyCharges      \nmc_churn_yes = df1[df1.Churn=='Yes'].MonthlyCharges      \n\nplt.xlabel(\"Monthly Charges\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n".trim(),v="\ndef print_unique_col_values(df):\n       for column in df:\n            if df[column].dtypes=='object':\n                print(f'{column}: {df[column].unique()}') \n                \nprint_unique_col_values(df1)\n\n#Some columns have no internet service or no phone service, that can be replaced with No.\ndf1.replace('No internet service','No',inplace=True)\ndf1.replace('No phone service','No',inplace=True)\n\nprint_unique_col_values(df1)\n".trim(),C="\nyes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\n                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\n                  \nfor col in yes_no_columns:\n    df1[col].replace({'Yes': 1,'No': 0},inplace=True)\n    \nfor col in df1:\n    print(f'{col}: {df1[col].unique()}') \n    \ndf1['gender'].replace({'Female':1,'Male':0},inplace=True)\ndf1.gender.unique()\n".trim(),T="\nfrom sklearn.preprocessing import MinMaxScaler\n\ndf2 = pd.get_dummies(data=df1, columns=['InternetService','Contract','PaymentMethod'])\ndf2.columns\n\ncols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\n\nscaler = MinMaxScaler()\ndf2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])\n\nfor col in df2:\n    print(f'{col}: {df2[col].unique()}')\n".trim(),k="\nfrom sklearn.model_selection import train_test_split\n\nX = df2.drop('Churn',axis='columns')\ny = df2['Churn']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=5)\nlen(X_train.columns)\n".trim(),D="\nimport tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential([\n    keras.layers.Dense(26, input_shape=(26,), activation='relu'),\n    keras.layers.Dense(15, activation='relu'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# opt = keras.optimizers.Adam(learning_rate=0.01)\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=100)\n\nmodel.evaluate(X_test, y_test)\n\nyp = model.predict(X_test)\nyp[:5]\n".trim(),j=("\ny_pred = []\nfor element in yp:\n    if element > 0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)\n        \n        \ny_pred[:10]\ny_test[:10]\n\n\nfrom sklearn.metrics import confusion_matrix , classification_report\nprint(classification_report(y_test,y_pred))\n\nimport seaborn as sn\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')\n\ny_test.shape\nround((862+229)/(862+229+137+179),2)                      #Accuracy\n".trim(),"\nround(862/(862+179),2)\nround(229/(229+137),2)                             #Precision for 1 class. i.e.Precision for customers who actually churned.\n\nround(229/(229+137),2)\nround(862/(862+137),2)                             #Recall for 0 class.\n\nround(862/(862+137),2)\nround(229/(229+179),2)\n".trim()),w='\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import confusion_matrix , classification_report\nimport pandas as pd\n\ntruth = ["Dog","Not a dog","Dog","Dog", "Dog", "Not a dog", "Not a dog", "Dog", "Dog", "Not a dog"]\nprediction = ["Dog","Dog", "Dog","Not a dog","Dog", "Not a dog", "Dog", "Not a dog", "Dog", "Dog"]\n\ncm = confusion_matrix(truth,prediction)\nprint_confusion_matrix(cm,["Dog","Not a dog"])\n\nprint(classification_report(truth, prediction))\n\n2*(0.57*0.67/(0.57+0.67))                                                                 #f1 score for Dog class.\n2*(0.33*0.25/(0.33+0.25))                                                                 #f1 score for Not a dog class.\n'.trim(),P="\nPrecision =  True Positive(TP)/ (TP+FP)\n\nRecall = TP/ (TP + FN)\n".trim(),x=function(e){function n(){return Object(a.a)(this,n),Object(r.a)(this,Object(o.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return s.a.createElement(d.a,{container:!0},s.a.createElement(d.a,{item:!0,xs:2},s.a.createElement(p.a,{className:e.paper},s.a.createElement("h4",null,s.a.createElement(h.a,null)))),s.a.createElement(d.a,{item:!0,xs:10},s.a.createElement(p.a,{className:e.paper},s.a.createElement(g.a,null,s.a.createElement("h3",null,"Customer Churn Prediction Using Artificial Neural Network (ANN)"),"Neural networks/ ANNs/ simulated neural networks (SNNs), are a subset of ML and are at the heart of DL algorithms. Their name and structure are inspired by the human brain, mimicking the way that biological neurons signal to one another.",s.a.createElement("br",null),s.a.createElement("br",null),s.a.createElement("i",null,"Customer churn prediction is to measure why customers are leaving a business. we look customer churn in telecom business. We will build a deep learning model to predict the churn and use precision,recall, f1-score to measure performance of our model."),s.a.createElement("br",null),s.a.createElement("br",null),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:_,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("br",null),s.a.createElement("b",null,"Quick glance at above makes me realize that TotalCharges should be float but it is an object."),s.a.createElement("br",null),s.a.createElement("br",null),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:y,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null,"Data Visualization"),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:N,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null,"Many of the columns are yes, no etc. Print unique values in object columns to see data values"),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:v,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null,"Convert Yes and No to 1 or 0"),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:C,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null,"One hot encoding for categorical columns"),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:T,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null,"Train test split"),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:k,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null,"Build a model (ANN) in tensorflow/keras"),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:D,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("br",null),s.a.createElement("b",null,"Precision for 0 class. i.e. Precision for customers who did not churn."),s.a.createElement("br",null),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:j,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:D,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("h3",null,"Precision Recall"),s.a.createElement("ul",null,s.a.createElement("li",null,s.a.createElement("b",null,"Precision:"),"Is out of all Prediction how many got it right."),s.a.createElement("ul",null,s.a.createElement("li",null,"Think about Prediction as base.")),s.a.createElement("br",null),s.a.createElement("li",null,s.a.createElement("b",null,"Recall:"),"Is out of all True how many got it right."),s.a.createElement("ul",null,s.a.createElement("li",null,"Think about truth is base."))),s.a.createElement("br",null),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:P,language:"js",plugins:["line-numbers"]})),s.a.createElement("br",null),s.a.createElement("br",null),s.a.createElement("div",{style:E},s.a.createElement(b.a,{code:w,language:"js",plugins:["line-numbers"]}))))))}}]),n}(c.Component);n.default=Object(f.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(x)}}]);
//# sourceMappingURL=101.5b99db25.chunk.js.map