{"version":3,"sources":["components/ReactJs/prismCode.js","components/javaScripts/sidebar.js","components/javaScripts/deepJs/this.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","thisKey","thisBind","bind_2","default_this","not_call","this_bind","calls","applys","borrowing","Methods","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/165.db303102.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introJs' className={classes.line}>IntroJs-Proxies</Link></MenuItem>\n        <MenuItem><Link to='/prototypes' className={classes.line}>Prototypes-Defa. Param</Link></MenuItem>\n        <MenuItem><Link to='/JsObjects' className={classes.line}>JsObject</Link></MenuItem>\n        <MenuItem><Link to='/array' className={classes.line}>String</Link></MenuItem>\n\n        <MenuItem><Link to='/this' className={classes.line}>This-call(), apply(), bind()</Link></MenuItem>\n        <MenuItem><Link to='/clousers' className={classes.line}>Clousers</Link></MenuItem>\n        <MenuItem><Link to='/oops' className={classes.line}>Oops-GetSet</Link></MenuItem>\n        <MenuItem><Link to='/regular' className={classes.line}>Regular</Link></MenuItem>\n        <MenuItem><Link to='/keyedCollections' className={classes.line}>Keyed Collections</Link></MenuItem>\n\n        <MenuItem><Link to='/arrayApi' className={classes.line}>Indexed colle-Arr Obj</Link></MenuItem>\n        <MenuItem><Link to='/logic' className={classes.line}>Logic</Link></MenuItem>\n        <MenuItem><Link to='/findOutput' className={classes.line}>findOutput</Link></MenuItem>\n        <MenuItem><Link to='/mcqjs' className={classes.line}>McqJs</Link></MenuItem>\n\n        <MenuItem><Link to='/hackerRank' className={classes.line}>HackerRank1</Link></MenuItem>\n        <MenuItem><Link to='/hackerRank6' className={classes.line}>HackerRank2</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst thisKey = `function bike() {\n    console.log(this.name);\n}\n\nvar name = \"Ninja\";\nvar obj1 = { name: \"Pulsar\", bike: bike };\n\nbike();\nobj1.bike();\n`.trim();\n\nconst thisBind = `\nfunction bike() {\n  console.log(this.name);\n }\n\n  var name = \"Ninja\";\n  var obj = { name: \"Pulsar\" }\n  \n  bike.call(obj);`.trim();\n\nconst bind_2 = `\n //Bind in constructor\nclass Student {\n  constructor(fname, lname){\n    this.fname = fname;\n    this.lname = lname;\n\t\t\n    this.sayName = this.sayName.bind(this)\n  }\n\n  sayName(){\n    console.log(this.firstName)\n  }\n}\n\nvar muk = new Student('Muk', \"Sin\");\nvar greetStu = muk.sayName;\ngreetStu();\n\n\n\n//2\nvar names = {\n    fname:'Ritesh',\n    lname:\"Singh\"\n  }\n\n  let fullName = function(hometown, state){\n  return console.log(this.fname,\"---\",this.lname,\"---\",hometown,\"---\",state)\n}\n\n\nvar names2 = {\n    fname:'Nitesh',\n    lname:'Singh'\n  }\n\n  let printName = fullName.bind(names2, \"Ranchi\", \"Jharkhand\");\n  console.log(printName);\n  printName(); `.trim()\n\nconst default_this = `\nvar obj = { \n  name : \"ABC\", \n  printFunc: function(){ \n    return this.name;\n    } \n  } \n       \nvar objs = obj.printFunc();\n\nexport { objs }`.trim()\n\nconst not_call = `\n  var obj = { \n  name : \"ABC\", \n  printFunc: function(){ \n     document.write(this.name);} \n     } \n       \n    var printFunc2= obj.printFunc; \n    printFunc2();`.trim()\n\nconst this_bind = `\n  var obj = { \n  name : \"ABC\", \n  printFunc: function(){ \n     document.write(this.name);} \n     } \n       \n    var printFunc2= obj.printFunc.bind(obj); \n    printFunc2();`.trim()\n\n\nconst calls = `\n    //1\n    function foo(arg1, arg2){\n      console.log(this.name)\n      console.log(arg1)\n      console.log(arg2)\n    }\n    \n    foo.call({name:'Nitesh'}, \"ReactJs\", \"AngularJs\");\n    \n    \n    //In call method after assign to varriable than this value lost its binding.\n    \n    var student = {\n      name:\"Js\",\n      jsMethod: function(){\n        console.log(this.name)\n      }\n    }\n    \n    var greetStu = student.jsMethod;\n    greetStu();\t\n    \n    \n    //But with bind method we can use this value.\n    //In BInd we only set context of this.\n    \n    //2\n    var student = {\n      name:\"Js\",\n      jsMethod: function(){\n        console.log(this.name)\n      }\n    }\n    \n    var greetStu = student.jsMethod.bind({ name:'Hi' });\n    greetStu();\t\n    \n    \n    //3\n    var names = {\n      fname:'Ritesh',\n      lname:\"Singh\"\n    }\n    \n    let fullName = function(hometown, state){\n      return console.log(this.fname,\"---\",this.lname,\"---\",hometown,\"---\",state)\n    }\n    \n    fullName.apply(names, [\"Ranchi\", \"Jharkhand\"]);\n    \n    \n    var names2 = {\n      fname:'Nitesh',\n      lname:'Singh'\n    }\n    \n    fullName.apply(names2, [\"Ranchi\"]);\n    `.trim();\n\nconst applys = `\nfunction foo(arg1, arg2){\n  console.log(this.name)\n  console.log(arg1)\n  console.log(arg2)\n}\n\nfoo.apply({name:'Nitesh'}, [\"ReactJs\", \"AngularJs\"]);\n\n`.trim();\n\n\nconst borrowing = `\nvar names = {\n    fname:'Ritesh',\n    lname:\"Singh\",\n    fullName:function(){\n      return console.log(this.fname,\"---\",this.lname)\n    }\n  }\n\nvar names2 = {\n    fname:'Nitesh',\n    lname:'Singh'\n  }\n\n//function borrowing\nnames.fullName.call(names2);\n\n\n//2\nvar names = {\n    fname:'Ritesh',\n    lname:\"Singh\"\n  }\n\nlet fullName = function(hometown, state){\n  return console.log(this.fname,\"---\",this.lname,\"---\",hometown,\"---\",state)\n}\n\nfullName.call(names, \"Ranchi\", \"Jharkhand\");\n\n\nvar names2 = {\n    fname:'Nitesh',\n    lname:'Singh'\n  }\n\nfullName.call(names2, \"Ranchi\");\n`.trim();\n\n\nclass Methods extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1.What is 'this' keyword in JavaScript?</h3>\n              <ul>\n                <li>this keyword refers to an object, that object which is executing the current bit of javascript code.</li>\n                <li>To understand this keyword, only we need to know how, when and from where the function is called,\n                  does not matter how and where function is declared/ defined.\n                </li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={thisKey}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>The job of bike() function is printing the this.name .\n                In case of obj1().bike(), “Pulsar” gets printed and the reason behind this is\n                function bike() gets called with the execution context\n                as obj1 so this.name became obj1.name.</i>\n              <br />\n              <br />\n\n              <b>Explicit and Fixed Binding of “this” keyword </b>\n              <br />\n              If we use call and apply method with calling function, both of those methods take as their first\n              parameter as execution context. that is this binding.\n              <div style={titles}>\n                <PrismCode\n                  code={thisBind}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <ul>\n                <li><b>Explicit binding: </b>If we invoke the function bike with call() method passing execution context\n                  object obj as first argument, then obj gets assigned to this object and it prints “Pulsar” which is\n                  nothing but obj.name.</li>\n                <li><b>Fixed binding/Hard binding: </b>We can force the this object to be same always no matter from\n                  where and how it gets called.</li>\n              </ul>\n              <br />\n\n              <h3>2. In JavaScript, why is the “this” operator inconsistent?</h3>\n              The value of <b>this</b> changes depending on how the function is called. We say that a function is invoked with \n              some a particular this value — the this value is determined at invocation time, not definition time.\n              <br/>\n              <br/>\n              <ul>\n                <li>If the function is called as a “raw” function, this will be the global object or undefined if the function \n                  runs in strict mode.</li>\n                <li>If it is called as a method on an object, this will be the calling object.</li>\n                <li>If you call a function with call or apply, this is specified as the first argument to call or apply.</li>\n                <li>If it is called as an event listener, this will be the element that is the target of the event.</li>\n                <li>If it is called as a constructor with new, this will be a newly-created object whose prototype is set to the \n                  prototype property of the constructor function.</li>\n                <li>If the function is the result of a bind operation, the function will always and forever have this set to the \n                  first argument of the bind call that produced it. (This is the single exception to the “functions don’t have a \n                  fixed this” rule — functions produced by bind actually do have an immutable this.)</li>\n              </ul>\n              <br/>\n\n              <h3>3. bind()</h3>\n              <ul>\n                <li>Creates a new function, when called.</li>\n                <li>Returns a new function, when invoked, has its this sets to a specific value.</li>\n                <li>Unlike the call() and apply() methods, the bind() method doesn’t immediately execute the function. It just\n                  returns the function.\n                </li>\n                <li>When a method an object is passed to another function as a callback, the this value is lost.\n                  That’s because bindExample() received the function bindExample.details separately from the bindExample object.\n                </li>\n                <li>The bind() method allows an object to borrow a method from another object without making a copy of that method.</li>\n                <li>When we assign method to varryble than lost this binding bind set context of this.</li>\n                <li>Bind method exactly same as the call method, Only diffrences instead of caling method, Bind method\n                  with the object and return the copy of that method.\n                </li>\n              </ul>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={bind_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>program to print the name which is called by this keyword.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={default_this}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>this keyword bind the name variable to the function. It is known as default binding.</i>\n              <br />\n              <br />\n\n              <b>No output is produced</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={not_call}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>Here we made a new variable function printFunc2 which refers to the function\n                printFunc() of object geeks. Here the binding of this is lost, so no output is\n                produced.</i>\n              <br />\n              <br />\n              To make sure that any binding of this is not to be lost, we are using Bind() method.\n              By using bind() method we can set the context of this to a particular object. So we can use\n              other variables also to call binded function.\n              <div style={titles}>\n                <PrismCode\n                  code={this_bind}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>The bind() method creates a new function where this keyword refers to the parameter\n                in the parenthesis in the above case obj. This way the bind() method enables calling a\n                function with a specified this value.</i>\n              <br />\n\n              <h3>4. call(), apply()</h3>\n              The call() method calls a function with a given this value and arguments provided individually.\n              <br />\n              <br />\n              The main differences between bind() and call() is that the call() method:<br />\n              <ul>\n                <li>Accepts additional parameters as well</li>\n                <li>The call() method does not make a copy of the function it is being called on.</li>\n                <li>call() and apply() serve the exact same purpose. The only difference between how they work is that.</li>\n                <ul>\n                  <li>call() expects all parameters to be passed in individually.</li>\n                  <li>apply() expects an array of all of our parameters.</li>\n                </ul>\n              </ul>\n              <br />\n              <br />\n\n              <b>Call: </b>This value depend from where to call it.\n              <br />\n              <br />\n              call: accept two properties:\n              <ul>\n                <li>(i) what is context of this.</li>\n                <li>(ii) Parameter.</li>\n              </ul>\n\n              <div style={titles}>\n                <PrismCode\n                  code={calls}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Apply</b>\n              <br />\n              Pass Array as argument instead of parameter.\n              <div style={titles}>\n                <PrismCode\n                  code={applys}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>5. Borrowing</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={borrowing}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Methods));\n"],"sourceRoot":""}