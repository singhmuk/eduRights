{"version":3,"sources":["components/ReactJs/prismCode.js","components/nodeJs/sidebar.js","components/nodeJs/nodeDeep/search_pagination.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","commentsModel","postModel","userModel","middleware","userRoutes","postRoutes","server","postman","SearchPagination","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"mPAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACN,EAAKC,KAAO,EAAKA,IAAIC,SACvBC,IAAMC,iBAAiB,EAAKH,IAAIC,UAblC,EAAKD,IAAMI,IAAMC,YAFA,E,iFAMjBC,KAAKP,c,2CAILO,KAAKP,c,+BASG,IAAD,EAC6BO,KAAKR,MAAjCS,EADD,EACCA,KAAeC,GADhB,EACOC,QADP,EACgBD,UACvB,OACE,yBAAKE,UAAU,cACb,0BAAMV,IAAKM,KAAKN,IAAKU,UAAS,mBAAcF,IACzCD,EAAKI,a,GAzBuBP,IAAMQ,a,uDCJ7C,yFAMMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,MAAO,CACLC,YAAaJ,EAAMK,QAAQ,IAE7BC,KAAM,CACJC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,yBAAKH,UAAWc,EAAQR,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMS,GAAG,eAAef,UAAWc,EAAQH,MAA3C,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,gCACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,0BACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,iBAAiBf,UAAWc,EAAQH,MAA7C,kBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,kBAAkBf,UAAWc,EAAQH,MAA9C,mBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,cACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,qBAAqBf,UAAWc,EAAQH,MAAjD,sBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,sBAAsBf,UAAWc,EAAQH,MAAlD,uBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,oBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,kBAAkBf,UAAWc,EAAQH,MAA9C,mBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,mBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,SACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,WAEZ,iC,qLCtCAK,EAAS,CAAEC,gBAAiB,UAAWC,QAAS,MAAOC,SAAU,QAgBjEC,EAAgB,4XAUpBnB,OAEIoB,EAAY,geAgBhBpB,OAEIqB,EAAY,omFAiGMrB,OAElBsB,EAAa,koBAuBjBtB,OAEIuB,EAAa,6uGA6HOvB,OAEpBwB,EAAa,23EA6FOxB,OAEpByB,EAAS,oMAObzB,OAEI0B,EAAU,woTA4bb1B,OAGG2B,E,4LAEFC,YAAW,kBAAMrC,IAAMsC,iBAAgB,K,+BAE/B,IACAhB,EAAYlB,KAAKR,MAAjB0B,QACR,OACE,kBAAC,IAAD,CAAMiB,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAOjC,UAAWc,EAAQN,OACxB,4BAAI,kBAAC,IAAD,SAGR,kBAAC,IAAD,CAAMwB,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAOjC,UAAWc,EAAQN,OACxB,kBAAC,IAAD,KACE,sDACA,iDACA,yBAAK0B,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAM0B,EACNzB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,gDACA,yBAAKmC,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAMuB,EACNtB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,6CACA,yBAAKmC,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAMwB,EACNvB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,6CACA,yBAAKmC,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAMyB,EACNxB,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,6CACA,yBAAKmC,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAM2B,EACN1B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,6CACA,yBAAKmC,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAM4B,EACN3B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,wCACA,yBAAKmC,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAM6B,EACN5B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,sCACA,yBAAKmC,MAAOlB,GACV,kBAAC,IAAD,CACEnB,KAAM8B,EACN7B,SAAS,KACTC,QAAS,CAAC,2B,GAnGGG,aA8GfiC,uBA57BD,SAAA9B,GAAK,MAAK,CACvBG,MAAO,CACL4B,OAAQ/B,EAAMK,QAAQ,GACtBQ,QAASb,EAAMK,QAAQ,IAEzB2B,SAAU,CACRD,OAAQ/B,EAAMK,QAAQ,IAExB4B,UAAW,CACTC,UAAW,aAm7BCJ,CAAmBP","file":"static/js/221.bffa0403.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introNodejs' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/ejsNode' className={classes.line}>Basics</Link></MenuItem>\n        <MenuItem><Link to='/buffers' className={classes.line}>Buffer</Link></MenuItem>\n        <MenuItem><Link to='/childs' className={classes.line}>Child Process-fork()-exec()</Link></MenuItem>\n        <MenuItem><Link to='/tut_1' className={classes.line}>Callback</Link></MenuItem>\n        <MenuItem><Link to='/filSystems' className={classes.line}>File System</Link></MenuItem>\n        <MenuItem><Link to='/evtNode' className={classes.line}>EvtEmter-Capture data</Link></MenuItem>\n        <MenuItem><Link to='/codes' className={classes.line}>Codes</Link></MenuItem>\n        <MenuItem><Link to='/url_shortener' className={classes.line}>Url_Shortener</Link></MenuItem>\n        <MenuItem><Link to='/stripe_payment' className={classes.line}>stripe_payment</Link></MenuItem>\n        <MenuItem><Link to='/sendEmail' className={classes.line}>sendEmail</Link></MenuItem>\n        <MenuItem><Link to='/search_pagination' className={classes.line}>search_pagination</Link></MenuItem>\n        <MenuItem><Link to='/push_notifications' className={classes.line}>push_notifications</Link></MenuItem>\n        <MenuItem><Link to='/nodetext' className={classes.line}>nodetext</Link></MenuItem>\n        <MenuItem><Link to='/file_upload' className={classes.line}>file_upload</Link></MenuItem>\n        <MenuItem><Link to='/e_acco_veri' className={classes.line}>email_acco_veri</Link></MenuItem>\n        <MenuItem><Link to='/2fa_speakearst' className={classes.line}>2fa_speakearst</Link></MenuItem>\n        <MenuItem><Link to='/authentications' className={classes.line}>SignUp</Link></MenuItem>\n        <MenuItem><Link to='/serverSide' className={classes.line}>Server Side</Link></MenuItem>\n        <MenuItem><Link to='/tut_2' className={classes.line}>Geocode-Upload</Link></MenuItem>\n        <MenuItem><Link to='/tut_6' className={classes.line}>Chat</Link></MenuItem>\n        <MenuItem><Link to='/udemy' className={classes.line}>Udemy</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst commentsModel = `\nconst CommentSchema  = new Schems({\n  comment:{ type:String, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  postId:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'Post' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\nmodule.exports = Comment;\n`.trim();\n\nconst postModel = `\nconst PostSchema  = new Schems({\n  title:{ type:String, unique:true, required: true, trim: true },\n  description:{ type: String, required:true, trim: true },\n  author:{ type: mongoose.Schema.Types.ObjectId, required:true, ref:'User' },\n  createdAt:{ type: Date, default: Date.now }\n});\n\nPostSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'postId'\n})\n\nconst Post = mongoose.model('Post', PostSchema);\nmodule.exports = Post;\n`.trim();\n\nconst userModel = `\nconst validator = require('validator')\nconst bcrypt    = require('bcryptjs')\nconst jwt       = require('jsonwebtoken')\nconst Post      = require('./post')\n\nconst UserSchema  = Schems({\n    name:{ type: String, required: true, trim: true },\n    age:{ type: Number, default: 0,\n        validate(value){\n            if(value < 0){\n                throw new Error('Age must be a positive number')\n            }\n        }\n    },\n    email:{ type: String, required: true, unique:true, trim: true,\n        validate(value){\n            if(!validator.isEmail(value)){\n                throw new Error('Email is invalid!')\n            }\n        }\n    },\n    password:{ type:String, required:true, trim:true, minlength: 7,\n        validate(value){\n            if(validator.isEmpty(value)){\n                throw new Error('Please enter your password!')\n            }else if(validator.equals(value.toLowerCase(),\"password\")){\n                throw new Error('Password is invalid!')\n            }else if(validator.contains(value.toLowerCase(), \"password\")){\n                throw new Error('Password should not contain password!')\n            }\n        }\n    },\n    tokens:[{\n        token:{ type:String, required: true }\n    }],\n    createdAt:{ type: Date, default: Date.now }\n});\n\nUserSchema.virtual('posts', {\n    ref: 'Post',\n    localField: '_id',\n    foreignField: 'author'\n})\n\n\n\n\nUserSchema.statics.checkValidCredentials = async (email, password) => {\n    const user = await User.findOne({email})\n\n    if(!user){\n        throw new Error('Unable to login 2')\n    }\n    const isMatch = await bcrypt.compare(password,user.password)\n\n    if(!isMatch){\n        throw new Error('Unable to login 2')\n    }\n\n    return user\n}\n\nUserSchema.methods.newAuthToken = async function(){\n    const user  = this\n    const token =  jwt.sign({ _id: user.id.toString()}, \"thisiskey\")\n    user.tokens = user.tokens.concat({ token })\n    await user.save()\n    return token\n}\n\nUserSchema.methods.toJSON = function(){\n    const user = this\n    const userObj = user.toObject()\n\n    delete userObj.password\n    delete userObj.tokens\n\n    return userObj\n}\n\n//hash the plain text password before saving\nUserSchema.pre('save', async function(next){\n    const user = this\n    if(user.isModified('password')){\n        user.password = await bcrypt.hash(user.password, 8)\n    }\n    next()\n})\n\nUserSchema.pre('remove', async function(next){\n    const user = this\n    await Post.deleteMany({author: user._id})\n    next()\n})\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = User;`.trim();\n\nconst middleware = `\nconst jwt  = require('jsonwebtoken')\nconst User = require('../models/user')\n\nconst auth = async (req,res,next) => {\n    try {\n        const token = req.header('Authorization').replace('Bearer', '').trim()\n        const decoded  =  jwt.verify(token, \"thisiskey\")\n        const user  = await User.findOne({ _id:decoded._id, 'tokens.token': token})\n\n        if(!user){\n            throw new Error()\n        }\n        req.token = token\n        req.user = user\n        next()\n    } catch (error) {\n        console.log(error)\n        res.status(401).send({error:'Please authenticate!'})\n    }\n}\n\nmodule.exports = auth;\n`.trim();\n\nconst userRoutes = `\nconst Post          = require('../models/post')\nconst Comment       = require('../models/comment')\nconst {ObjectID}    = require('mongodb')\nconst  authenticate = require('../middleware/auth')\n\nrouter.post('/posts',authenticate, async (req,res) => {\n    const post =  new Post({\n        ...req.body,\n        author: req.user._id\n    })\n    try {\n        await post.save()\n        res.status(201).send(post)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n})\n\nrouter.get('/posts',async (req,res) => {\n    try {\n        const posts = await Post.find({})\n        res.send(posts)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.get('/posts/:id',authenticate, async (req,res) => {\n    const _id =  req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({ _id, author: req.user._id })\n        if(!post){\n            return res.status(404).send()\n        }\n        res.send(post);\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/posts/:id/comment',authenticate, async (req,res) => {   \n    const _id = req.params.id\n    const userid = req.user._id\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    if (!ObjectID.isValid(userid)) {\n        return res.status(404).send();\n    }\n\n    const comment = new Comment({\n        ...req.body,\n        author: userid,\n        postId: _id\n    })\n\n    try {\n        await comment.save()\n        res.status(201).send(comment)\n    } catch (error) {\n        res.status(400).send(error)\n    }\n\n})\n\n//get all the comments related to the post\nrouter.get('/posts/:id/comment', async (req,res) => {\n    try {\n        const post = await Post.findOne({_id: req.params.id})\n        await post.populate('comments').execPopulate()\n        res.send(post.comments)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.patch('/posts/:id',authenticate, async (req, res) => {\n    const _id = req.params.id\n    const updates = Object.keys(req.body);\n    const allowedUpdates = [\"description\", \"title\"]\n    const isValidOperation  = updates.every((update) => allowedUpdates.includes(update))\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid updates'})\n    }\n    if (!ObjectID.isValid(_id)) {\n        res.status(404).send();\n    }\n    try {\n        const post = await Post.findOne({_id: req.params.id, author:req.user._id})\n        \n       if(!post){\n        res.status(404).send();\n       }\n\n       updates.forEach((update) => post[update] = req.body[update])\n       await post.save()\n\n       res.send(post);\n    } catch (error) {\n        res.status(400).send();\n    }\n})\n\nrouter.delete('/posts/:id', authenticate,async (req,res) => {\n    const _id = req.params.id\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n    try {\n        const deletepost = await Post.findOneAndDelete({_id:_id, author: req.user._id})\n        if (!deletepost) {\n            return res.status(404).send();\n        }\n        res.send(deletepost)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\n\nconst postRoutes = `\nconst User = require('../models/user')\nconst {ObjectID} = require('mongodb')\n\nconst authenticate  = require('../middleware/auth')\n\nrouter.post('/users', async (req,res) => {\n    const user = new User(req.body);\n    try{\n        const token = await user.newAuthToken()\n        res.status(201).send({user, token})\n    }catch(e){\n        res.status(400).send(e)\n    }\n})\n\nrouter.get('/users/me', authenticate ,async (req,res)=> {\n   res.send(req.user)\n})\n\n\nrouter.patch('/users/me',authenticate ,async (req,res) => {\n    const updates  = Object.keys(req.body)\n    const allowedUpdates = [\"name\", \"email\", \"password\", \"age\"]\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\n    const _id =  req.user._id\n\n    if(!isValidOperation){\n        res.status(400).send({error:'Invalid request'})\n    }\n\n    if (!ObjectID.isValid(_id)) {\n        return res.status(404).send();\n    }\n\n    try {        \n        updates.forEach((update) => req.user[update] = req.body[update]) \n        await req.user.save()\n        res.send(req.user);\n    } catch (error) {\n        res.status(400).send()\n    }\n\n})\n\nrouter.delete('/users/me', authenticate, async (req,res) => {\n    if (!ObjectID.isValid(req.user._id)) {\n        return res.status(404).send();\n    }\n\n    try {\n        await req.user.remove()\n        res.send(req.user)\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nrouter.post('/users/login', async (req, res) => {\n    try {\n        const user  = await User.checkValidCredentials(req.body.email, req.body.password)\n        const token = await user.newAuthToken()\n        console.log(user,token)\n        res.send({ user, token})\n    } catch (error) {\n        console.log(error);\n        res.status(400).send({error})        \n    }\n})\n\nrouter.post('/users/logout', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = req.user.tokens.filter((token) =>{\n         return token.token !== req.token \n        })\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\n\nrouter.post('/users/logoutall', authenticate, async (req, res) => {\n    try {\n        req.user.tokens = []\n        await req.user.save()\n        res.send()\n    } catch (error) {\n        res.status(500).send()\n    }\n})\n\nmodule.exports = router;`.trim();\n\nconst server = `\nconst dbCon = require('./db/db');\nconst userRoutes = require('./router/user')\nconst PostRoutes = require('./router/post')\n\napp.use(\"/items\",userRoutes)\napp.use(\"/items\",PostRoutes)\n`.trim();\n\nconst postman = `\n{\n\t\"info\": {\n\t\t\"_postman_id\": \"2adff8c6-a833-4fdd-8846-929dea464969\",\n\t\t\"name\": \"NodejsAuth\",\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n\t},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"Create Users\",\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"name\\\":\\\"qwerty\\\",\\n\\t\\\"age\\\":40,\\n\\t\\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n\\t\\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Create Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"title\\\":\\\"Nodejs blog12\\\",\\n\\t\\\"description\\\":\\\"this is new blog on nodejs\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Profile\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Single Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Comment on single post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Fecth comment on single post\",\n\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\"disableBodyPruning\": true\n\t\t\t},\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n\\t\\\"comment\\\":\\\"Nice article\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca765dcde6cdb0017d34fd2/comment\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca765dcde6cdb0017d34fd2\",\n\t\t\t\t\t\t\"comment\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Read Posts\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update user\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"name\\\": \\\"dummy12\\\",\\n  \\\"password\\\":\\\"1234567890\\\"\\n\\t\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Update Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"PATCH\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"title\\\":\\\"dummy blog\\\",\\n  \\\"description\\\":\\\"this is the first post\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete User\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n  \\\"description\\\":\\\"goto  sleep\\\",\\n  \\\"completed\\\":false\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/me\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"me\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Delete Post\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/posts/5ca733287c6a7fe6b373c0d6\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"posts\",\n\t\t\t\t\t\t\"5ca733287c6a7fe6b373c0d6\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"User Login\",\n\t\t\t\"event\": [\n\t\t\t\t{\n\t\t\t\t\t\"listen\": \"test\",\n\t\t\t\t\t\"script\": {\n\t\t\t\t\t\t\"id\": \"0e178f47-3f34-456f-b738-ca330497c1f3\",\n\t\t\t\t\t\t\"exec\": [\n\t\t\t\t\t\t\t\"if(pm.response.code === 200 ){\",\n\t\t\t\t\t\t\t\"    pm.environment.set('authtoken', pm.response.json().token)\",\n\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"type\": \"text/javascript\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"request\": {\n\t\t\t\t\"auth\": {\n\t\t\t\t\t\"type\": \"noauth\"\n\t\t\t\t},\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"{\\n \\\"email\\\":\\\"dummy1222@gmail.com\\\",\\n \\\"password\\\":\\\"12345678\\\"\\n}\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/login\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"login\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout \",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Logout All\",\n\t\t\t\"request\": {\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"header\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"Content-Type\",\n\t\t\t\t\t\t\"value\": \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"body\": {\n\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\"raw\": \"\"\n\t\t\t\t},\n\t\t\t\t\"url\": {\n\t\t\t\t\t\"raw\": \"{{nodeurl}}/users/logout\",\n\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\"{{nodeurl}}\"\n\t\t\t\t\t],\n\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\"users\",\n\t\t\t\t\t\t\"logout\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"response\": []\n\t\t}\n\t],\n\t\"auth\": {\n\t\t\"type\": \"bearer\",\n\t\t\"bearer\": [\n\t\t\t{\n\t\t\t\t\"key\": \"token\",\n\t\t\t\t\"value\": \"{{authtoken}}\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t]\n\t},\n\t\"event\": [\n\t\t{\n\t\t\t\"listen\": \"prerequest\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"9c7ef4d3-64b2-49fe-b1db-65a8c6b26b1a\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"listen\": \"test\",\n\t\t\t\"script\": {\n\t\t\t\t\"id\": \"5df7dc9c-9a59-4ceb-befc-6dcef99063dd\",\n\t\t\t\t\"type\": \"text/javascript\",\n\t\t\t\t\"exec\": [\n\t\t\t\t\t\"\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n}`.trim();\n\n\nclass SearchPagination extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Search_Pagination_Sort</h3>\n              <b>middleware/auth.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={middleware}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/commets.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={commentsModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/post.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/user.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={userModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>router/post.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={userRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>router/user.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>postman</b>\n              <div style={titles}>\n                <PrismCode\n                  code={postman}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(SearchPagination));\n"],"sourceRoot":""}