(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[170],{140:function(e,n,a){"use strict";a.d(n,"a",(function(){return d}));var t=a(45),r=a(28),s=a(136),o=a(137),i=a(139),l=a(0),c=a.n(l),m=a(138),u=a.n(m),d=(a(59),function(e){function n(e){var a;return Object(t.a)(this,n),(a=Object(s.a)(this,Object(o.a)(n).call(this,e))).highlight=function(){a.ref&&a.ref.current&&u.a.highlightElement(a.ref.current)},a.ref=c.a.createRef(),a}return Object(i.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,a=(e.plugins,e.language);return c.a.createElement("pre",{className:"code-prism"},c.a.createElement("code",{ref:this.ref,className:"language-".concat(a)},n.trim()))}}]),n}(c.a.Component))},141:function(e,n,a){},151:function(e,n,a){"use strict";a.d(n,"a",(function(){return m}));var t=a(0),r=a.n(t),s=a(26),o=a(297),i=a(295),l=a(114),c=Object(l.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function m(){var e=c();return r.a.createElement("div",{className:e.root},r.a.createElement(i.a,null,r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/setUpFiles",className:e.line},"SetUp")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/javaScript",className:e.line},"JavaScript")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/reactCurdMern",className:e.line},"Mern React")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/4_reactCurdHooks",className:e.line},"Mern React Hooks")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/pagination",className:e.line},"Sea Sort Pagi Auth_Token")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/propsModel",className:e.line},"SS pagination-Captcha")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/imageGallery",className:e.line},"ImageGallery")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/stripes",className:e.line},"Stripes-Signin with gfb")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/paginationsMern",className:e.line},"Paginations-push_notifis")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/googleMap",className:e.line},"GoogleMap")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/videoChat",className:e.line},"VideoChat")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/qrSccaners",className:e.line},"QrCode-reCapcha")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/react_share",className:e.line},"Share-Stripe")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/socialSignUp",className:e.line},"SocialSignUp")),r.a.createElement(o.a,null,r.a.createElement(s.b,{to:"/mernSocial",className:e.line},"MernSocial"))),r.a.createElement("div",null))}},163:function(e,n,a){"use strict";a.r(n);var t=a(45),r=a(28),s=a(136),o=a(137),i=a(139),l=a(0),c=a.n(l),m=a(138),u=a.n(m),d=a(120),p=a(57),h=a(296),g=a(5),y=(a(141),a(151)),v=a(140),b={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},f="\n// Create Schema\nconst ItemSchema = new Schema({\n  name: {type: String, required: true},\n  username: {type: String, required: true},\n  email: {type: String, required: true},\n  date: {type: Date, default: Date.now},\n  \n  address: [{\n    street: {type: String, required: true},\n    suite: {type: String, required: true},\n    city: {type: String, required: true},\n    zipcode: {type: Number, required: true},\n    \n    geo: [{\n      lat: {type: Number },\n      lng: {type: Number }\n    }]\n  }],\n  \n  phone: {type: Number, required: true},\n  website: {type: String },\n  company: [{\n    name: {type: String, required: true},\n    catchPhrase: {type: String, required: true},\n    bs: {type: String, required: true},\n  }],\n  \n  Phone_Numbers: [{\n    Home_Phone: { type: Number },\n    Work_Phone: { type: Number },\n    Cell_Phone: { type: Number },\n    \n    Phone_verified: [{ \n      Home: { type: Boolean },\n      Work: { type: Boolean },\n      Cell: { type: Boolean }\n                  }],\n              }],\n});\n\nmodule.exports = Item = mongoose.model('item', ItemSchema);\n".trim(),k='\nconst Item = require(\'../models/item\');\n\nrouter.get(\'/\', (req, res) => {\n  Item.find()\n    .sort({ date: -1 })\n    .then(items => { \n      res.json(items);\n    console.log(\'dddddd\',items)\n    }) \n});\n\nrouter.get(\'/:id\', (req, res) => {\n  Item.findById(req.params.id)\n    .sort({ date: -1 })\n    .then(items => res.json(items));\n});\n\nrouter.post(\'/\', (req, res) => {\n  const newItem = new Item({\n    name: req.body.name,\n    username: req.body.username,\n    email: req.body.email,\n    address: req.body.address,\n    geo: req.body.geo,\n    phone: req.body.phone,\n    website: req.body.website,\n    company: req.body.company,\n    Phone_Numbers: req.body.Phone_Numbers,\n    Phone_verified: req.body.Phone_verified,\n  });\n\n  newItem.save().then(item => res.json(item));\n});\n\nrouter.put(\'/:id\', (req, res) => {\n  Item.findByIdAndUpdate(req.params.id, {\n    name:req.body.name,\n  }, {new: true}).then(data => {res.send(data)})\n})\n\nrouter.delete(\'/:id\', (req, res) => {\n  Item.findById(req.params.id)\n    .then(item => item.remove().then(() => res.json({ success: true })))\n    .catch(err => res.status(404).json({ success: false }));\n});\n\n\n//postman\n{ \n   "name": "Leanne Graham",\n    "username":"Bret",\n    "email":"Sincere@gmail.com",\n    "address":[{"street":"Kulas Light","suite":"Apt. 556","city":"Gwenborough","zipcode":"929980"}],\n    "geo":[{"lat":"-37.3159","lng":"81.1496"}],\n    "phone":"1234567890",\n    "website":"hildegard.org",\n    "company":[{"name":"Romaguera-Crona", "catchPhrase":"Multi-layered client-server neural-net",\n                "bs":"harness real-time e-markets"}],\n    "Phone_Numbers":[{"Home_Phone":"123","Work_Phone":"456","Cell_Phone":"7890"}],\n    "Phone_verified":[{"Home":"true","Work":"true","Cell":"true"}]\n}\n'.trim(),D="\nconst Logic = () => {\n  const [ mockData, setmockData ] = useState([])\n  const [ mainId ] = useState('5fdb0a046ef19d3384a42f69')\n  const [ subParameters ] = useState([])\n  const [ city ] = useState('South Christy')\n  const [ matchingData ] = useState([])\n  const [ name ] = useState('Clementina DuBuque')\n  var [ tempObj ] = useState([])\n  var [ sum ] = useState(0)\n  var [ avg ] = useState(0)\n  var [ arrayMet, setArrayMet ] = useState([])\n\nuseEffect(() => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n  \n  for(var i = 0; i < mockData.length; i++){\n      // console.log('api data in the loop',mockData[i])\n      if(mainId === mockData[i]._id){\n          // console.log('only match id',mockData[i]._id)\n          \n          mockData.map(val => {\n              if(city.indexOf(val.name)===-1){\n                  // console.log('only unique user city',val.address)\n                  val.address.map(valCity => {\n                      subParameters.push(valCity.city)\n                      // console.log('Push city name in subParameters',subParameters)\n                      \n                      let newObj={\"id\":val._id, \"name\":val.name,'value':[]}\n                      newObj = newObj.value.push(valCity.city)\n                      // console.log('Push city name in new created object',newObj)\n                      \n                      var index=subParameters.indexOf(valCity._id)\n                      // console.log('index value',index,\":\",valCity._id)\n                      \n                      // subParameters[index].value = subParameters[index].concat(valCity._id)\n                      // console.log('index value',subParameters[index].value)\n                      \n                      if((valCity._id === mainId || valCity._id === mockData._id)){\n                          // console.log('matching hard coded value: ',valCity._id,\"=\",mockData._ids,\":\",mainId);\n                          matchingData=matchingData.concat(valCity._id);\n                          // console.log('matching values: ',matchingData)\n                      }\n                  })\n              }\n              else{\n                  var index=subParameters.indexOf(val.phone)\n                  subParameters[index].value = subParameters[index].value.concat(val.id)\n                  // console.log('else values: ',subParameters)\n                  }\n              })\n          }\n      }\n })\n//    console.log('concate city names in the array',subParameters)\n  addData();\n  pickRecord();\n  SumAverage();\n  extractKey();\n  arrayMethod();\n},[])\n\n\n//Add data in empty array from api values\nconst addData = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n  mockData.map(add => {\n      mockData.push(add.name)\n      \n      if(add.name === name){\n          for(let i=0; i<=mockData.length; i++){\n              // console.log('Matched name',add.name)\n          }\n      }\n    })\n  })  \n}\n\n\n//Pick a record from list\nconst pickRecord = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n     mockData.map(pickRec => {\n      if(pickRec._id === mainId){\n          mockData.push(pickRec.email);\n      }\n      \n  // apiId = mockData.push(pickRec);\n  if(pickRec.name === name){\n      for(let i=0; i<=mockData[i].length; i++){\n         let obj = [];\n         obj.push(mockData.name)\n          console.log('matching values',obj)\n          }\n      }\n     })\n  })\n}\n\n\n//Add sum/avg of number from a list\nconst SumAverage = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n     \n     mockData.map(fields => {\n      tempObj.push(fields._id) \n     })\n     for(let i =0; i<=tempObj.length;i++){\n      sum +=tempObj[i];\n      avg = sum/tempObj.length\n      // console.log('sum',sum)\n      }\n  })\n  \n  //Flattening an array of arrays\n  const nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n  let flat = nested.reduce((acc, it) => [...acc, ...it], []);\n  let sumOfArray = flat.reduce((a, b) => a+b)\n}\n\n\n//Extract key/value pair from an object\nconst extractKey = () => {\n  var data = \n         [\n          {label:1, quater :'Q1', y:34},\n          {label:2, quater:'Q1', y:20},\n          {label:3, quater:'Q1', y:30},\n   \n          {label:1, quater:'Q2', y:77},\n          {label:2, quater:'Q2', y:52},\n          {label:3, quater:'Q2', y:3},\n   \n          {label:1, quater:'Q3', y:65},\n          {label:2, quater:'Q3', y:12},\n          {label:3, quater:'Q3', y:9},\n   \n          {label:1, quater:'Q4', y:77},\n          {label:2, quater:'Q4', y:34},\n          {label:3, quater:'Q4', y:5}\n         ];\n         \n var quartersum = {}\n data.map(function(entry) {\n   quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n })\n \n data.map(function(entry) {\n   entry.percent = entry.y / quartersum[entry.label] * 100;\n  //  console.log(JSON.stringify(entry))\n })\n \n \n    for(let [key, value] of Object.entries(quartersum)){\n         console.log('extract object property',key, value);\n    }\n    var percentage = parseInt((sum * 100/quartersum.length));\n     console.log('percentage',percentage);\n}\n\n\n//Array methods\nconst arrayMethod = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var arrayMeth= res.data\n     setArrayMet(res.data)\n     \n     arrayMeth.map(data => {\n      arrayMet.push(data._id)\n     })\n     \n     let scores = arrayMet.find(element => element > 4);\n     let filterScores = arrayMet.filter(element => element > 4);\n     let joinArr = filterScores.join(\"*\");\n     let spliceArr = filterScores.splice(0,2)\n     let concatArr = filterScores.concat(scores,joinArr,\"100\");\n     \n  \n     //The slice() method slices out a piece of an array into a new array.\n     let sliceArr = filterScores.slice(0,2);\n     let toStringArr = arrayMet.toString()\n     let position = filterScores.indexOf(8)\n     \n     \n     //The includes() method determines whether an array contains a specified element.\n     let includeArr = filterScores.includes(10)\n  //    console.log('find',includeArr)\n  })\n}\n\n    return(\n        <div>\n            {mockData.map((data,i) => (\n                <li key={i}>{data.name}\n                </li>\n            ))}\n        </div>\n    )\n}\n\nexport default Logic;\n".trim(),j='\nconst Logic_2 = () => {\n  const [ mockData, setmockData ] = useState([]);\n  const [ mockData2 ] = useState(["Glenna Reicher", "Kurtis Weissnat", "Ervin Howell","Leanne Graham"]);\n  const [ commonElements ] = useState([]);\n  var [ str ] = useState(\'\');\n  var [ str2 ] = useState(\'\');\n  var [ dict ] = useState({});\n  var [ obj ] = useState({});\n  var [ objKey ] = useState([]);\n  var [ arr ] = useState([]);\n  var [ personEmail ] = useState([]);\n\nuseEffect(() => {\n  axios.get("/item")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n       mockData.push(val.name)\n     })\n     \n     var common = mockData.filter(item=>{\n      return mockData2.includes(item)\n  })\n  for(var i=0; i<=common.length; i++){\n    commonElements.push(common[i])\n    }\n })\n \n commChar();\n arrToObj();\n objTOArr();\n allSum();\n displayDot();\n matchName();\n},[])\n\n\n//Common element in strings\nconst commChar = () => {\n  axios.get("/item")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n      str=val.name;\n      str2=val.username;\n       })\n       \n       for(var i=0; i < str.length; i++) {\n        dict[str.charAt(i)] = 1;\n      }\n      // console.log(\'str\',dict);\n      \n      var commonChars =[];\n    for(var i=0; i < str2.length; i++) {\n      if( dict[str2.charAt(i)] == 1) {\n        commonChars.push(str2.charAt(i)); // this is optional we can simply print\n      }\n      // console.log(\'str2\',commonChars);  \n\n    }\n    \n    dict = commonChars.join(""); \n     })\n}\n\n\n//convert an Array to Object\nconst arrToObj = () => {\n  axios.get("/item")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  })\n}\n\n\n//convert an Object to Array\nconst objTOArr = () => {\n  axios.get("/item")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     person.map(val => {\n      obj=val\n     })\n     \n     //Convert the keys to Array using - Object.keys()\n     objKey = Object.keys(obj)\n\n     //Converts the Values to Array using - Object.values()\n     const objVal = Object.values(obj)\n\n     //Converts both keys and values using - Object.entries()\n     const objAll = Object.entries(obj)\n    //  console.log(\'objAll\',objAll)\n  })\n}\n\n\n//Sum of all elements of a given array\nconst allSum = () => {\n  axios.get("/item")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     person.map(val=>{\n      arr.push(val._id);\n  })\n  var sum = arr.reduce((a, i) => {\n    return a + i;\n    });\n  })\n}\n\n\n//Dispay dot value  \nconst displayDot = () => {\n  axios.get("/item")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     person.map(val=>{\n      personEmail.push(val.email);\n    })\n  })\n}\n\n\n//Last match name\nconst matchName = () => {\n  axios.get("/item")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     const mockData = [];\n     const names = [];\n     const apiId = \'5fdb0a616ef19d3384a42f75\';\n     person.map(val=>{\n      mockData.push(val._id);\n      \n      if(val._id == apiId){\n        names.push(val.name)\n        for(let i=0; i<=names.length; i++){\n          }\n       }\n    })\n  })\n}\n\n    return(\n        <div>\n            {mockData.map((data,i) => (\n                <li key={i}>{data.name}\n                </li>\n            ))}\n        </div>\n    )\n}\n\nexport default Logic_2;\n'.trim(),E="\nconst Logic_3 = () => {\n  var [ mockData, setmockData ] = useState([]);\n  var [ num ] = useState();\n\nuseEffect(() => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n       mockData.push(val._id)\n       num = Number(mockData[0])\n     })\n   })\n \n   arrayFun();\n},[])\n\n\nconst arrayFun = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n       mockData.push(val._id)\n     })\n\n     const len = mockData.length;   \n     const sorting = mockData.sort();\n     const z = mockData[mockData.length - 1]\n     const joins = mockData.join('*')\n     const firstVal = mockData[0] = \"cars\"\n     const deleteFirst = delete mockData[0];  \n     const spliceArr = mockData.splice(2, 0, \"Lemon\", \"Kiwi\");\n     const sliceArr = mockData.slice(1);\n     \n     console.log(len,'-',sorting,'-',z,'-',joins,'-',firstVal,'-',deleteFirst,'-',spliceArr,'-',sliceArr);\n   })\n}  \n\n    return(\n        <div>\n            {mockData.map((data,i) => (\n                <li key={i}>{data.name}\n                </li>\n            ))}\n        </div>\n    )\n}\n\nexport default Logic_3;\n".trim(),S=function(e){function n(){return Object(t.a)(this,n),Object(s.a)(this,Object(o.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return c.a.createElement(d.a,{container:!0},c.a.createElement(d.a,{item:!0,xs:2},c.a.createElement(p.a,{className:e.paper},c.a.createElement("h4",null,c.a.createElement(y.a,null)))),c.a.createElement(d.a,{item:!0,xs:10},c.a.createElement(p.a,{className:e.paper},c.a.createElement(h.a,null,c.a.createElement("h3",null,"Logic"),"model/item.js",c.a.createElement("div",{style:b},c.a.createElement(v.a,{code:f,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),"routes/item.js",c.a.createElement("div",{style:b},c.a.createElement(v.a,{code:k,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Logic"),c.a.createElement("div",{style:b},c.a.createElement(v.a,{code:D,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Logic 2"),c.a.createElement("div",{style:b},c.a.createElement(v.a,{code:j,language:"js",plugins:["line-numbers"]})),c.a.createElement("br",null),c.a.createElement("h3",null,"Logic 3"),c.a.createElement("div",{style:b},c.a.createElement(v.a,{code:E,language:"js",plugins:["line-numbers"]}))))))}}]),n}(l.Component);n.default=Object(g.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(S)}}]);
//# sourceMappingURL=170.6f8bf4e0.chunk.js.map