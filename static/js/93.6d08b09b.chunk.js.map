{"version":3,"sources":["components/ReactJs/prismCode.js","components/Redux/sidebar.js","components/Redux/deep/reduxState.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","useSelector","reducers","curds","ReduxState","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/93.6d08b09b.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introRedux' className={classes.line}>Intro</Link></MenuItem>\n        <MenuItem><Link to='/counter' className={classes.line}>Counter Select</Link></MenuItem>\n        <MenuItem><Link to='/reduxState' className={classes.line}>Redux State-Curd</Link></MenuItem>\n        <MenuItem><Link to='/reduxMethods' className={classes.line}>Redux Methods</Link></MenuItem>\n        <MenuItem><Link to='/react_redux' className={classes.line}>Filter</Link></MenuItem>\n        <MenuItem><Link to='/reduxCurd' className={classes.line}>Redux Curd</Link></MenuItem>\n        <MenuItem><Link to='/expenseTraMern' className={classes.line}>ReactCurdPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/contactKeeperApi' className={classes.line}>ReactReduxCurdPlaceholder</Link></MenuItem>\n        <MenuItem><Link to='/mernRedux' className={classes.line}>Mern Redux</Link></MenuItem>\n        <MenuItem><Link to='/signUp' className={classes.line}>SignUP</Link></MenuItem>\n        <MenuItem><Link to='/git' className={classes.line}>Git</Link></MenuItem>\n        <MenuItem><Link to='/gitConcepts' className={classes.line}>Git Concepts</Link></MenuItem>\n        <MenuItem><Link to='/skills' className={classes.line}>Skills</Link></MenuItem>\n        <MenuItem><Link to='/comskills' className={classes.line}>Comskills</Link></MenuItem>\n        <MenuItem><Link to='/techskills' className={classes.line}>Techskills</Link></MenuItem>\n        <MenuItem><Link to='/techinto' className={classes.line}>TechsInto</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst useSelector = `\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { INCREMENT, DECREMENT } from \"./actions/types\"\n\nconst App = () => {\n  const counter = useSelector(state => state.count.counter);  //State\n  const dispatch = useDispatch();                             //Method\n  return (\n    <div>\n      <h1>{counter}</h1>\n      <button onClick={() => dispatch({ type: INCREMENT })}>Incr</button>\n      <button onClick={() => dispatch({ type: DECREMENT })}>Decr</button>\n    </div>\n  );\n};\n`.trim();\n\nconst reducers = `\n//reducers/reducers.js\nimport { INCREMENT, DECREMENT } from \"../actions/types\"\n\nconst initialState = {\n  counter: 0\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { counter: ++state.counter };\n    case DECREMENT:\n      return { counter: --state.counter };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n\n\n//actions/types.js\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n`.trim();\n\nconst curds = `\n//components/index.js\nimport * as actions from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass Input extends Component {\n  state = {\n      title: \"\",\n      content: \"\"\n    };\n\n  handleChange = e => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState({ state });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addPost(this.state.title, this.state.content);\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"title\" onChange={this.handleChange} value={this.state.title}\n            required />\n          \n          <input type=\"text\" name=\"content\" onChange={this.handleChange} value={this.state.content}\n            required\n          />\n          <button>Add</button>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  addPost: (title, content) => {\n    dispatch(actions.addPost(title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Input);\n\n\n//components/Item\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\n\nclass Item extends Component {\n  state = {\n      isEdit: false,\n      title: this.props.title,\n      content: this.props.content\n    };\n\n  handleChangeTitle = e => {\n    this.setState({ title: e.target.value });\n  };\n\n  handleChangeContent = e => {\n    this.setState({ content: e.target.value });\n  };\n\n  removePost = () => {\n    this.props.removePost(this.props.id);\n  };\n\n  updatePost = () => {\n    this.setState({ isEdit: true });\n  };\n\n  donePost = () => {\n    this.props.updatePost(this.props.id, this.state.title, this.state.content);\n    this.setState({ isEdit: false });\n  };\n\n  renderTitleInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeTitle} defaultValue={this.props.title} />\n    );\n  };\n\n  renderContentInput = () => {\n    return (\n      <input type=\"text\" onChange={this.handleChangeContent} defaultValue={this.props.content} />\n    );\n  };\n\n  renderUpdateButton = () => {\n    return (\n      <button onClick={this.updatePost}>EDIT</button>\n    );\n  };\n\n  renderDoneButton = () => {\n    return (\n      <button onClick={this.donePost}>DONE</button>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.isEdit ? this.renderTitleInput() : this.props.title + ': '}\n        {this.state.isEdit ? this.renderContentInput() : this.props.content}\n        <br />\n        {this.state.isEdit\n          ? this.renderDoneButton()\n          : this.renderUpdateButton()}\n        <button onClick={this.removePost}>REMOVE</button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  removePost: id => {\n    dispatch(actions.removePost(id));\n  },\n  updatePost: (id, title, content) => {\n    dispatch(actions.updatePost(id, title, content));\n  }\n})\n\nexport default connect(null, mapDispatchToProps)(Item);\n\n\n//components/List.js\nimport Item from \"./item.jsx\";\n\nclass List extends Component {\n  render() {\n    return (\n        <div>\n          {this.props.posts.map((post, index) => (\n            <Item {...post} key={index} id={post.id} />\n          ))}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  posts: state.post\n})\n\nexport default connect(mapStateToProps, null)(List);\n\n\n\n//reducers/post.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/index.js\";\n\nconst initialState = [];\n\nexport default function Post(state = initialState, action) {\n  switch (action.type) {\n    case ADD_POST:\n      return [\n        ...state,\n        {\n          id: action.id,\n          title: action.title,\n          content: action.content\n        }\n      ];\n      \n    case REMOVE_POST:\n      return state.filter(({ id }) => id !== action.id);\n      \n    case UPDATE_POST:\n      return state.map(\n        post => (post.id === action.id ? { ...post, ...action } : post)\n      );\n      \n    default:\n      return state;\n  }\n}\n\n\n//actions/types.js\nexport const ADD_POST = \"ADD_POST\";\nexport const REMOVE_POST = \"REMOVE_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\n\n\n//actions/index.js\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from './types'\n\nlet nextId = 0;\nexport function addPost(title, content) {\n  return {\n    type: ADD_POST,\n    id: nextId++,\n    title,\n    content\n  };\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVE_POST,\n    id\n  };\n}\n\nexport function updatePost(id, title, content) {\n  return {\n    type: UPDATE_POST,\n    id,\n    title,\n    content\n  };\n}`.trim();\n\n\nclass ReduxState extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>1. useSelector and useDispatch</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={useSelector}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>reducers</b>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={reducers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>2.Curd</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={curds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(ReduxState));"],"sourceRoot":""}