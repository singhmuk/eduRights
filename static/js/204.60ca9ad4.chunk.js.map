{"version":3,"sources":["components/ReactJs/prismCode.js","components/mongoDB/sidebar.js","components/mongoDB/deepMongodb/mysqlCurd.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","envs","config","models","controllers","routes","server","chanaModel","chanaControllers","chanaRoutes","chanaServer","MysqlCurd","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/204.60ca9ad4.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMD' className={classes.line}>IntroMD</Link></MenuItem>\n        <MenuItem><Link to='/intro' className={classes.line}>Queries</Link></MenuItem>\n        <MenuItem><Link to='/mongodbMethods' className={classes.line}>mongodbMethods</Link></MenuItem>\n        <MenuItem><Link to='/mongoCurd' className={classes.line}>MongoCurd-Ref</Link></MenuItem>\n        <MenuItem><Link to='/mongoQueries' className={classes.line}>Mongo Queries</Link></MenuItem>\n        <MenuItem><Link to='/searchErrorHandling' className={classes.line}>searchErrorHandling</Link></MenuItem>\n        <MenuItem><Link to='/bulkRight' className={classes.line}>BulkWright</Link></MenuItem>\n        <MenuItem><Link to='/mysql' className={classes.line}>Mysql</Link></MenuItem>\n        <MenuItem><Link to='/mysqlCurd' className={classes.line}>MysqlCurd</Link></MenuItem>\n        <MenuItem><Link to='/joinOp' className={classes.line}>JoinOp</Link></MenuItem>\n        <MenuItem><Link to='/sortOp' className={classes.line}>Sort</Link></MenuItem>\n        <MenuItem><Link to='/curdOp' className={classes.line}>CurdOp</Link></MenuItem>\n        <MenuItem><Link to='/gridFs' className={classes.line}>gridFs</Link></MenuItem>\n        <MenuItem><Link to='/postgressql' className={classes.line}>PostgreSql</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst envs = `\nhost = \"localhost\",\nuser = \"root\",\npassword = \"root\",\ndatabase = \"persons\"\nPORT = 5000`.trim();\n\nconst config = `\nconst mysql = require('mysql');\n\nconst dbConn = mysql.createConnection({\n    host:'localhost',\n    user:'root',\n    password:'root',\n    database:'persons'\n});\n\ndbConn.connect((err)=>{\n    if(err) throw err;\n    console.log('Database connected')\n});\n\nmodule.exports = dbConn;`.trim();\n\nconst models = `\nvar dbConn = require('../config/db');\n\nvar Order = function (obj) {\n    this.user=obj.user;\n    this.paymentMethod=obj.paymentMethod;\n    this.paymentResult=obj.paymentResult;\n    this.taxPrice=obj.taxPrice;\n    this.shippingPrice=obj.shippingPrice;\n    this.totalPrice=obj.totalPrice;\n    this.isPaid=obj.isPaid;\n    this.isDelivered=obj.isDelivered;\n    this.deliveredAt=obj.deliveredAt;\n};\n\nOrder.create = (newOrd, result) => {\n    dbConn.query(\"INSERT INTO ecommerce set ?\", newOrd, (err, res) => {\n        if (err) \n            result(err, null);\n        result(null, res.insertId);\n    });\n};\n\nOrder.allOrder = (result) => {\n    dbConn.query(\"Select * from ecommerce\", (err, res) => {\n        if (err) \n            result(null, err);\n        result(null, res);\n    });\n};\n\nOrder.orderById = (id,result) => {\n    dbConn.query(\"select * from ecommerce where id = ?\", id, (err,res)=>{\n        if(err)\n            result(null, err);\n        result(null, res);\n    })\n}\n\nOrder.delete = (id, result) => {\n    dbConn.query(\"delete from ecommerce where id = ?\", [id], (err, res)=>{\n        if(err)\n            result(null,err);\n        result(null, res);\n    })\n}\n\nOrder.updateOne = (id, ord, result) => {\n    dbConn.query(\"update ecommerce set user=?, paymentMethod=?, paymentResult=?, taxPrice=?, shippingPrice=?, \n    totalPrice=?, isPaid=?, isDelivered=?, deliveredAt=?, created_at=?, updated_at=? where id = ?\",\n      \n      [ord.user, ord.paymentMethod, ord.paymentResult,ord.taxPrice, ord.shippingPrice, ord.totalPrice, \n      ord.isPaid, ord.isDelivered, ord.deliveredAt, ord.created_at, ord.updated_at, id], (err, res)=>{\n        if(err)\n            result(null,err);\n        result(null,res);\n    })\n}\n\nmodule.exports = Order;`.trim();\n\nconst controllers = `\nconst Order = require('../models/items');\n\n\nrouter.allOrder = (req, res) => {\n    Order.allOrder((err, results) =>{\n        if (err)\n            res.send(err);\n        res.send(results);\n    });\n};\n\nrouter.create = (req, res) => {\n    const nrw_order = new Order(req.body);\n    Order.create(nrw_order, (err, results) => {\n        if (err)\n            res.send(err);\n        res.json({ error: false, message: \"Order added successfully!\", data: results });\n    });\n};\n\nrouter.orderById = (req, res) => {\n    Order.orderById(req.params.id, (err, results) => {\n        if (err)\n            res.send(err);\n        res.json(results);\n    });\n};\n\nrouter.deletes = (req,res) => {\n    Order.delete(req.params.id, (err, result) => {\n        if(err)\n            res.send(err);\n        res.json({success:true, msg:\"Order is deleted\"})\n    })\n}\n\nrouter.updateOrder = (req,res) => {\n    const orderUpdate = new Order(req.body);\n    Order.updateOne(req.params.id, orderUpdate, (err,order)=>{\n        if(err)\n            res.send(err);\n        res.json({success:true, msg:\"Order updated successfully\"});\n    })\n}`.trim();\n\nconst routes = `\nnst orderController = require('../controllers/items');\n\nrouter.get('/', orderController.allOrder);\nrouter.post('/', orderController.create);\nrouter.get('/:id', orderController.orderById);\nrouter.delete('/:id', orderController.deletes)\nrouter.put('/:id',orderController.updateOrder);\n\nmodule.exports = router;\n`.trim();\n\nconst server = `\nrequire('dotenv').config();\nconst express = require('express');\nconst app = express();\nconst cors = require(\"cors\");\nconst session = require(\"express-session\");\n\nconst unionRoutes = require('./routes/items');\n\napp.use(express.urlencoded({ extended: true }))\napp.use(express.json());\n\napp.use(cors({\n      origin: [\"http://localhost:3000\"],\n      methods: [\"GET\", \"POST\"],\n      credentials: true,\n    }));\n\napp.use(session({\n    key: \"userId\",\n    secret: \"subscribe\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      expires: 60 * 60 * 24,\n    },\n  })\n);\n\napp.use('/items', unionRoutes);\n\nconst port = process.env.PORT;\napp.listen(port,()=> console.log('Server is running on port '$'{port}''));`.trim();\n\nconst chanaModel = `\nvar Order = function (obj) {\n  this.name=obj.name;\n  this.carMake=obj.carMake;\n  this.model=obj.model;\n};\n\nOrder.create = (newOrd, result) => {\ndbConn.query(\"INSERT INTO selectData set ?\", newOrd, (err, res) => {\n    if (err) \n        result(err, null);\n    result(null, res.insertId);\n});\n};\n\nOrder.allOrder = (result) => {\ndbConn.query(\"Select * from selectData\", (err, res) => {\n    if (err) \n        result(null, err);\n    result(null, res);\n});\n};`.trim();\n\nconst chanaControllers = `\nconst Car = require('../models/union');\n\nrouter.allOrder = (req, res) => {\n  Car.allOrder((err, results) =>{\n      if (err)\n          res.send(err);\n      res.send(results);\n  });\n};\n\nrouter.create = (req, res) => {\n  const new_order = new Car(req.body);\n  Car.create(new_order, (err, results) => {\n      if (err)\n          res.send(err);\n      res.json({ error: false, message: \"Car added successfully!\", data: results });\n  });\n};`.trim();\n\nconst chanaRoutes = `\nconst orderController = require('../controllers/union');\n\nrouter.get('/', orderController.allOrder);\nrouter.post('/', orderController.create);`.trim();\n\nconst chanaServer = `\nconst unionRoutes = require('./routes/union');\n\napp.use(express.urlencoded({ extended: true }))\napp.use(express.json());\napp.use(cors());\n\napp.use('/union', unionRoutes);\n\nconst port = process.env.PORT || 5000;\napp.listen(port,()=>console.log('Server is running on port'));`.trim();\n\n\n\nclass MysqlCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>MySqlCurd</h3>\n              <b>.env</b>\n              <div style={titles}>\n                <PrismCode\n                  code={envs}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>config/db.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={config}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <h3>chainable-dropdown</h3>\n              <b>models/union.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaModel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/union.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaControllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/union.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={chanaServer}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MysqlCurd));\n"],"sourceRoot":""}