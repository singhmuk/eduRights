{"version":3,"sources":["components/ReactJs/prismCode.js","components/mongoDB/sidebar.js","components/mongoDB/deepMongodb/bulkRight.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","indexing","aggregation","search","deleting","BulkWright","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/195.b046fdf9.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMD' className={classes.line}>IntroMD</Link></MenuItem>\n        <MenuItem><Link to='/intro' className={classes.line}>Queries</Link></MenuItem>\n        <MenuItem><Link to='/mongodbMethods' className={classes.line}>mongodbMethods</Link></MenuItem>\n        <MenuItem><Link to='/mongoCurd' className={classes.line}>MongoCurd-Ref</Link></MenuItem>\n        <MenuItem><Link to='/mongoQueries' className={classes.line}>Mongo Queries</Link></MenuItem>\n        <MenuItem><Link to='/searchErrorHandling' className={classes.line}>searchErrorHandling</Link></MenuItem>\n        <MenuItem><Link to='/bulkRight' className={classes.line}>BulkWright</Link></MenuItem>\n        <MenuItem><Link to='/mysql' className={classes.line}>Mysql</Link></MenuItem>\n        <MenuItem><Link to='/mysqlCurd' className={classes.line}>MysqlCurd</Link></MenuItem>\n        <MenuItem><Link to='/joinOp' className={classes.line}>JoinOp</Link></MenuItem>\n        <MenuItem><Link to='/sortOp' className={classes.line}>Sort</Link></MenuItem>\n        <MenuItem><Link to='/curdOp' className={classes.line}>CurdOp</Link></MenuItem>\n        <MenuItem><Link to='/gridFs' className={classes.line}>gridFs</Link></MenuItem>\n        <MenuItem><Link to='/postgressql' className={classes.line}>PostgreSql</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst code = `\n\ndb.students.bulkWrite(\n  [\n     { insertOne :{\n           \"document\" :{ name: \"Andrew\", major: \"Architecture\", gpa: 3.2 }\n        }},\n     { insertOne :{\n           \"document\" :{ name: \"Terry\", major: \"Math\", gpa: 3.8 }\n        }},\n     { updateOne :{\n           filter : { name : \"Terry\" },\n           update : { $set : { gpa : 4.0 } }\n        }},\n     { deleteOne :{ filter : { name : \"Kate\"} }\n        },\n     { replaceOne :{\n           filter : { name : \"Claire\" },\n           replacement : { name: \"Genny\", major: \"Counsling\", gpa: 2.4 }\n        }}\n],\n{ordered: false}\n);\n`.trim();\n\n\nconst indexing = `\ndb.stores.insertMany(\n  [\n    { _id: 1, name: \"Java Hut\", description: \"Coffee and cakes\" },\n    { _id: 2, name: \"Burger Buns\", description: \"Gourmet hamburgers\" },\n    { _id: 3, name: \"Coffee Shop\", description: \"Just coffee\" },\n    { _id: 4, name: \"Clothes Clothes Clothes\", description: \"Discount clothing\" },\n    { _id: 5, name: \"Java Shopping\", description: \"Indonesian goods\" }\n  ]\n)\n\ndb.stores.createIndex( { name: \"text\", description: \"text\" } )\n\ndb.stores.find({ $text: {$search: \"Coffee\" } })\n\ndb.stores.find({ $text: {$search: \"Java Hut Coffee\" } })\n\ndb.stores.find(\n  { $text: { $search: \"java hut coffee\" } },\n  { score: { $meta: \"textScore\" } }\n).sort( { score: { $meta: \"textScore\" } } )`.trim();\n\n\nconst aggregation = `\ndb.purchase_orders.insertMany(\n  [\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n       {product: \"guitar\", total: 199.99, customer: \"Tom\"},\n       {product: \"milk\", total: 11.33, customer: \"Mike\"},\n       {product: \"pizza\", total: 8.50, customer: \"Karen\"},\n       {product: \"toothbrush\", total: 4.75, customer: \"Karen\"},\n       {product: \"pizza\", total: 4.75, customer: \"Dave\"}\n       {product: \"toothbrush\", total: 4.75, customer: \"Mike\"},\n  ]\n)\n\n// find out how many toothbrushes were sold\ndb.purchase_orders.count({product: \"toothbrush\"})\n\n// Find list of all products sold\ndb.purchase_orders.distinct(\"product\")\n\n// Find the total amount of money spent by each customer\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$customer\", total: { $sum: \"$total\"} } }\n  ])\n\n// Find how much has been spent on each product and sort it by price\ndb.purchase_orders.aggregate([\n       {$match: {} },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n       {$sort: {total: -1}}\n  ])\n\n// Find how much money each customer has spent on toothbrushes and pizza\ndb.purchase_orders.aggregate([\n       {$match: {product: {$in: [\"toothbrush\", \"pizza\"]} } },\n       {$group: {_id: \"$product\", total: { $sum: \"$total\"} } },\n  ])`.trim();\n  \n  \n  const search = `\n  //Creating Text Index\n  db.posts.insert({\n    \"post_text\": \"enjoy the mongodb articles on tutorialspoint\",\n    \"tags\": [\"mongodb\", \"tutorialspoint\"]\n }\n {\n   \"post_text\" : \"writing tutorials on mongodb\",\n   \"tags\" : [ \"mongodb\", \"tutorial\" ]\n })\n \n \n //We will create a text index on post_text field so that we can search inside our posts' text âˆ’\n db.posts.createIndex({post_text:\"text\"})\n{\n\t\"createdCollectionAutomatically\" : true,\n\t\"numIndexesBefore\" : 1,\n\t\"numIndexesAfter\" : 2,\n\t\"ok\" : 1\n}\n\n\n//Using Text Index\nNow that we have created the text index on post_text field, we will search for all the posts having the word \ntutorialspoint in their text.\ndb.posts.find({$text:{$search:\"tutorialspoint\"}}).pretty()\n{\n\t\"_id\" : ObjectId(\"5dd7ce28f1dd4583e7103fe0\"),\n\t\"post_text\" : \"enjoy the mongodb articles on tutorialspoint\",\n\t\"tags\" : [\n\t\t\"mongodb\",\n\t\t\"tutorialspoint\"\n\t]\n}\n  `.trim();\n  \n  \n  const deleting = `\n  db.posts.getIndexes()[\n\t{\"v\" : 2,\t\"key\" : {\"_id\" : 1}, \"name\" : \"_id_\",\t\"ns\" : \"mydb.posts\"},\n\t{\"v\" : 2,\t\"key\" : { \"fts\" : \"text\", \"ftsx\" : 1},\t\"name\" : \"post_text_text\",\"ns\" : \"mydb.posts\",\n\t\t\"weights\" : {\"post_text\" : 1},\n\t\t\"default_language\" : \"english\",\n\t\t\"language_override\" : \"language\",\n\t\t\"textIndexVersion\" : 3\n  }\n]\n\n\n//After getting the name of your index from above query, run the following command. Here, post_text_text is the name \nof the index.\ndb.posts.dropIndex(\"post_text_text\")\n`.trim();\n\n\nclass BulkWright extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n            <Grid item xs={10}>\n              <Paper className={classes.paper}>\n                <List>\n                 <b>Bulk Write Operations</b>\n                 <br/>\n                 <br/>\n                 The <b>db.collection.bulkWrite()</b> method provides the ability to perform bulk insert, update, and remove operations. MongoDB also supports bulk insert through the <b>db.collection.insertMany().</b>\n                 <br/><br/>\n                 Since ordered is true by default, only the first operation completes successfully. The rest are not executed. Running the bulkWrite() with ordered : false would allow the remaining operations to complete despite the error.\n                   <div style={titles}>\n                      <PrismCode\n                        code={code}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Aggregation</h3>\n                    <div style={titles}>\n                      <PrismCode\n                        code={aggregation}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Text Indexing</h3>\n                    MongoDB provides text indexes to support text search queries on string content. text indexes can include any field whose value is a string or an array of string elements.\n                    <div style={titles}>\n                      <PrismCode\n                        code={indexing}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Text Search</h3>\n                    The Text Search uses stemming techniques to look for specified words in the string fields by dropping stemming stop words like a, an, the, etc.\n                    <br/>\n                    <div style={titles}>\n                      <PrismCode\n                        code={search}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    <br/>\n                    <h3>Deleting Text Index</h3>\n                    To delete an existing text index, first find the name of index using the following query âˆ’\n                    <div style={titles}>\n                      <PrismCode\n                        code={deleting}\n                        language=\"js\"\n                        plugins={[\"line-numbers\"]}\n                      />\n                    </div>\n                    </List>\n                </Paper>\n              </Grid>\n            </Grid>\n          )\n        }\n      }\n\nexport default (withStyles(styles)(BulkWright));\n"],"sourceRoot":""}