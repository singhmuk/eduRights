{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","assets/ML/svms.PNG","assets/ML/svm2.PNG","assets/ML/svms3.PNG","assets/ML/svm4.PNG","assets/ML/svm5.PNG","assets/ML/svm6.PNG","assets/ML/svm7.PNG","components/ml/deepMl/svmPy.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","machines","sepal","Regularizations","gammas","kernel","SvmPy","setTimeout","highlightAll","container","item","xs","src","Logistic","alt","style","svms2","svms3","svms4","svms5","svms6","svms7","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/7.883bd7c3.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/svms.31f561b2.PNG\";","module.exports = __webpack_public_path__ + \"static/media/svm2.0b14febb.PNG\";","module.exports = __webpack_public_path__ + \"static/media/svms3.567681a3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/svm4.8f6be448.PNG\";","module.exports = __webpack_public_path__ + \"static/media/svm5.4412fc04.PNG\";","module.exports = __webpack_public_path__ + \"static/media/svm6.f5fc341b.PNG\";","module.exports = __webpack_public_path__ + \"static/media/svm7.7b52a1bf.PNG\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Logistic from '../../../assets/ML/svms.PNG'\nimport svms2 from '../../../assets/ML/svm2.PNG'\nimport svms3 from '../../../assets/ML/svms3.PNG'\nimport svms4 from '../../../assets/ML/svm4.PNG'\nimport svms5 from '../../../assets/ML/svm5.PNG'\nimport svms6 from '../../../assets/ML/svm6.PNG'\nimport svms7 from '../../../assets/ML/svm7.PNG'\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 350,\n  width: 600\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst machines = `\nimport pandas as pd\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\ndf = pd.DataFrame(iris.data,columns=iris.feature_names)\n\ndf['target'] = iris.target\n\ndf[df.target==1].head()\ndf[df.target==2].head()\n\ndf['flower_name'] =df.target.apply(lambda x: iris.target_names[x])\ndf[45:55]\n\ndf2 = df[:50]\ndf2\n`.trim();\n\nconst sepal = `\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split \n\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\nplt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'],color=\"green\",marker='+')\nplt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'],color=\"blue\",marker='.')\n\nplt.xlabel('Petal Length')                                            #Petal length vs Pepal Width (Setosa vs Versicolor)\nplt.ylabel('Petal Width')\nplt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color=\"green\",marker='+')\nplt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color=\"blue\",marker='.')\n\nX = df.drop(['target','flower_name'], axis='columns')\ny = df.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nlen(X_train)\n\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)\nmodel.predict([[4.8,3.0,1.5,0.3]])\n`.trim();\n\nconst Regularizations = `\nmodel_C = SVC(C=1)\nmodel_C.fit(X_train, y_train)\nmodel_C.score(X_test, y_test)\n\nmodel_C = SVC(C=10)\nmodel_C.fit(X_train, y_train)\nmodel_C.score(X_test, y_test)\n`.trim();\n\nconst gammas = `\nmodel_g = SVC(gamma=10)\nmodel_g.fit(X_train, y_train)\nmodel_g.score(X_test, y_test)\n`.trim();\n\nconst kernel = `\nmodel_linear_kernal = SVC(kernel='linear')\nmodel_linear_kernal.fit(X_train, y_train)\n\nmodel_linear_kernal.score(X_test, y_test)\n`.trim();\n\n\nclass SvmPy extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Support Vector Machine(SVM) (supervised machine learning algorithms)</h3>\n              SVMs are powerful yet flexible ML algorithms which are used both for classification and regression. But generally, they are used in classification problems.\n              <br />\n\n              Lately, they are extremely popular because of their ability to handle multiple continuous and categorical variables.\n              <br />\n              <br />\n              <b>Working of SVM: </b>\n              An SVM model is basically a representation of different classes in a hyperplane in multidimensional space. The\n              hyperplane will be generated in an iterative manner by SVM so that the error can be minimized.\n              <br />\n              The goal of SVM is to divide the datasets into classes to find a maximum marginal hyperplane (MMH).\n              <br />\n              <br />\n              <i><b>The followings are important concepts in SVM − </b></i>\n              <ul>\n                <li><b>Support Vectors: </b>Datapoints that are closest to the hyperplane is called support vectors. Separating line\n                  will be defined with the help of these data points.</li>\n                <li><b>Hyperplane: </b>It is a decision plane or space which is divided\n                  between a set of objects having different classes.</li>\n                <li><b>Margin: </b>It may be defined as the gap between two lines on the\n                  closet data points of different classes. It can be calculated as the perpendicular distance from the line to the\n                  support vectors. Large margin is considered as a good margin and small margin is considered as a bad margin. The\n                  main goal of SVM is to divide the datasets into classes to find a maximum marginal hyperplane (MMH) and it can be\n                  done in the following two steps:</li>\n                <ul>\n                  <li>1. First, SVM will generate hyperplanes iteratively that segregates the classes in\n                    best way. Then, it will choose the hyperplane that separates the classes correctly.</li>\n                  <li>SVM Kernels SVM algorithm is\n                    implemented with kernel that transforms an input data space into the required form. Kernel converts non-separable\n                    problems into separable problems by adding more dimensions to it. It makes SVM more powerful, flexible and accurate.\n                    The following are some of the types of kernels used by SVM. Linear Kernel It can be used as a dot product between\n                    any two observations. The formula of linear kernel is −\n                    <br />\n                    <i><b>K(x,xi)=sum(x∗xi)</b></i>\n                    <br />\n                    From the above formula, we can\n                    see that the product between two vectors 𝑥 & 𝑥𝑖 is the sum of the multiplication of each pair of input values.\n                    <br />\n                    <br />\n                    Polynomial Kernel It is more generalized form of linear kernel and distinguish curved or nonlinear input space.\n                    Following is the formula for polynomial kernel −<br />\n                    <i><b>k(X,Xi)=1+sum(X∗Xi)^d</b></i>\n                    <br />\n                    <br />\n                    Here d is the degree of polynomial, which we\n                    need to specify manually in the learning algorithm.\n                    <br />\n                    <br />\n                    <b>Radial Basis Function (RBF) Kernel: </b> RBF kernel, mostly used in SVM\n                    classification, maps input space in indefinite dimensional space. Following formula explains it mathematically −\n                    <br />\n                    <i><b>K(x,xi)=exp(−gamma∗sum(x−xi^2)) </b></i></li>\n                  <br />\n                  Here, gamma ranges from 0 to 1. We need to manually specify it in the learning algorithm. A good default value of\n                  gamma is 0.1. As we implemented SVM for linearly separable data, we can implement it in Python for the data that is\n                  not linearly separable. It can be done by using kernels.\n                  <br />\n                  <br />\n                  <b>Pros: </b>\n                  SVM classifiers offers great accuracy and work well with high dimensional space. SVM classifiers basically use a\n                  subset of training points hence in result uses very less memory.\n\n                  <br />\n                  <br />\n                  <b>Cons: </b> of SVM classifiers They have high training time\n                  hence in practice not suitable for large datasets. Another disadvantage is that SVM classifiers do not work well with\n                  overlapping classes.\n                </ul>\n              </ul>\n              <br />\n\n              <h3>Support Vector Machine (Supervised)</h3>\n              Used for both classification or regression challenges.\n              <br />\n              In the SVM algorithm, we plot each data item as a point in n-dimensional space (where n is a number of features we have)\n              with the value of each feature being the value of a particular coordinate. Then, we perform classification by\n              finding the hyper-plane that differentiates the two classes very well.\n              <br />\n              <img src={Logistic} alt=\"Equations\" className=\"responsive\" style={redesign} />\n              <br />\n\n              We got accustomed to the process of segregating the two classes with a hyper-plane. Now, “How can we identify the\n              right hyper-plane?”.\n              <br />\n              <br />\n              <ul>\n                <li><b>Identify the right hyper-plane (Scenario-1): </b>We have three hyper-planes (A, B, and C).\n                  Now, identify the right hyper-plane to classify stars and circles.</li>\n                <br />\n                <img src={svms2} alt=\"Equations\" className=\"responsive\" style={redesign} />\n                <br />\n                <i>Remember a thumb rule to identify the right hyper-plane: “Select the hyper-plane which segregates\n                  the two classes better”. Here, hyper-plane B.</i>\n                <br />\n                <br />\n\n                <li><b>Identify the right hyper-plane (Scenario-2): </b></li>\n                <br />\n                <img src={svms3} alt=\"Equations\" className=\"responsive\" style={redesign} />\n                <br />\n                <i>Here, maximizing the distances between nearest data point (either class) and hyper-plane will help us\n                  to decide the right hyper-plane. This distance is called as Margin.</i>\n                <br />\n                <br />\n                <i>Above, you can see that the margin for hyper-plane C is high as compared to both A and B. Hence,\n                  we name the right hyper-plane as C. Another lightning reason for selecting the hyper-plane with\n                  higher margin is robustness. If we select a hyper-plane having low margin then there is high chance\n                  of miss-classification.</i>\n                <br />\n                <br />\n\n                <li><b>Identify the right hyper-plane (Scenario-3): </b></li>\n                <br />\n                <img src={svms4} alt=\"Equations\" className=\"responsive\" style={redesign} />\n                <br />\n                <i>Some of you may have selected the hyper-plane B as it has higher margin compared to A. But, here\n                  is the catch, SVM selects the hyper-plane which classifies the classes accurately prior to\n                  maximizing margin. Here, hyper-plane B has a classification error and A has classified all\n                  correctly. Therefore, the right hyper-plane is A.</i>\n                <br />\n                <br />\n\n                <li><b>Can we classify two classes (Scenario-4): </b>We unable to segregate the two classes using a\n                  straight line, as one of the stars lies in the territory of other(circle) class as an outlier. </li>\n                <br />\n                <img src={svms5} alt=\"Equations\" className=\"responsive\" style={redesign} />\n                <br />\n                <br />\n\n                <li><b>Find the hyper-plane to segregate to classes (Scenario-5): </b></li>\n                <br />\n                <img src={svms6} alt=\"Equations\" className=\"responsive\" style={redesign} />\n                SVM can solve this problem. Easily! It solves this problem by introducing additional feature. Here,\n                we will add a new feature z=x^2+y^2. Now, let’s plot the data points on axis x and z.\n                <br />\n                <img src={svms7} alt=\"Equations\" className=\"responsive\" style={redesign} />\n                <ul>\n                  <li>All values for z would be positive always because z is the squared sum of both x and y.</li>\n                  <li>In the original plot, red circles appear close to the origin of x and y axes, leading to\n                    lower value of z and star relatively away from the origin result to higher value of z.</li>\n                  <br />\n                  In the SVM classifier, it is easy to have a linear hyper-plane between these two classes. But,\n                  another burning question which arises is, should we need to add this feature manually to have a\n                  hyper-plane. No, the SVM  algorithm has a technique called the kernel trick. The SVM kernel is a\n                  function that takes low dimensional input space and transforms it to a higher dimensional space\n                  i.e. it converts not separable problem to separable problem. It is mostly useful in non-linear\n                  separation problem. Simply put, it does some extremely complex data transformations, then finds\n                  out the process to separate the data based on the labels or outputs you’ve defined.\n                </ul>\n              </ul>\n              <br />\n\n              <h3>Example</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={machines}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Sepal length vs Sepal Width (Setosa vs Versicolor)</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={sepal}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Tune parameters</h3>\n              <b>1. Regularization (C)</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Regularizations}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>2. Gamma</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={gammas}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>3. Kernel</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={kernel}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(SvmPy));\n"],"sourceRoot":""}