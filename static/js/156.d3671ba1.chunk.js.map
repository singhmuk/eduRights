{"version":3,"sources":["components/ReactJs/prismCode.js","components/javaScripts/sidebar.js","components/javaScripts/deepJs/hackerRank.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","data_types","getArea","declared","scoe_grade","character","vowelsAndConsonants","getSecondLargest","isPositive","getCount","Polygon","processData","getMaxLessThanK","getDayName","regexVar","regexVars","regexVares","HackerRank1","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/156.d3671ba1.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introJs' className={classes.line}>IntroJs-Proxies</Link></MenuItem>\n        <MenuItem><Link to='/prototypes' className={classes.line}>Prototypes-Defa. Param</Link></MenuItem>\n        <MenuItem><Link to='/JsObjects' className={classes.line}>JsObject</Link></MenuItem>\n        <MenuItem><Link to='/array' className={classes.line}>String</Link></MenuItem>\n\n        <MenuItem><Link to='/this' className={classes.line}>This-call(), apply(), bind()</Link></MenuItem>\n        <MenuItem><Link to='/clousers' className={classes.line}>Clousers</Link></MenuItem>\n        <MenuItem><Link to='/oops' className={classes.line}>Oops-GetSet</Link></MenuItem>\n        <MenuItem><Link to='/regular' className={classes.line}>Regular</Link></MenuItem>\n        <MenuItem><Link to='/keyedCollections' className={classes.line}>Keyed Collections</Link></MenuItem>\n\n        <MenuItem><Link to='/arrayApi' className={classes.line}>Indexed colle-Arr Obj</Link></MenuItem>\n        <MenuItem><Link to='/logic' className={classes.line}>Logic</Link></MenuItem>\n        <MenuItem><Link to='/findOutput' className={classes.line}>findOutput</Link></MenuItem>\n        <MenuItem><Link to='/mcqjs' className={classes.line}>McqJs</Link></MenuItem>\n\n        <MenuItem><Link to='/hackerRank' className={classes.line}>HackerRank1</Link></MenuItem>\n        <MenuItem><Link to='/hackerRank6' className={classes.line}>HackerRank2</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst data_types = `\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n  const firstInteger = 4;\n  const firstDecimal = 4.0;\n  const firstString = \"HackerRank \";\n\n  console.log(firstInteger + Number(secondInteger));\n\n  const firstNum = Number(firstDecimal).toFixed(2);\n  const secondNum = Number(secondDecimal).toFixed(2);\n  const answer = Number(firstNum) + Number(secondNum);\n\n  console.log(answer);\n  console.log(firstString + secondString);\n}\n\nperformOperation(10, 1.2, 'str');`.trim();\n\nconst getArea = `\nfunction arithmatic(length, width){\n  let area = length * width;\nthis.getArea = function(){\n  return console.log('getArea',area)\n}\n\nthis.getPerimeter = function(){\n  let sumPerimeter = 2 * (length + width);\n  return console.log('getPerimeter', sumPerimeter);\n}\n}\n\nconst newArithmatic = new arithmatic(3, 4.5);\nnewArithmatic.getArea();\nnewArithmatic.getPerimeter();`.trim();\n\n\nconst declared = `\nfunction main(){\n  const PI = Math.PI;\n  const r=2.6;\n  const getArea = PI * r * r;\n  \n  this.area=function(){\n    return console.log('getArea', getArea);\n  }\n  \n  const getPerimeter = 2 * PI * r;\n  this.perimeter = function(){\n    return console.log('getPerimeter', getPerimeter)\n  }\n}\n\nconst obj= new main();\nobj.area();\nobj.perimeter();\n`.trim();\n\nconst scoe_grade = `\nfunction getGrade(score) {\n  if (score > 25) {\n    return \"A\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 20) {\n    return \"B\";\n  } else if (score > 15) {\n    return \"C\";\n  } else if (score > 10) {\n    return \"D\";\n  } else if (score > 5) {\n    return \"E\";\n  } else {\n    return \"F\";\n  }\n}\n\nconsole.log(getGrade(11));`.trim();\n\nconst character = `\n//1\nfunction getLetter(s) {\n  let letter;\n  switch (true) {\n    case \"aeiou\".includes(s[0]):\n      letter = \"A\";\n      break;\n    case \"bcdefg\".includes(s[0]):\n      letter = \"B\";\n      break;\n    case \"hijklm\".includes(s[0]):\n      letter = \"C\";\n      break;\n    case \"nopqrstuvwxyz\".includes(s[0]):\n      letter = \"D\";\n      break;\n  }\n  return letter;\n}\n\nconsole.log(getLetter('adfgt'));\n\n\n//2\nfunction letter(){\n  let str = 'aeiou';\n  let str2 = 'bcdefg';\n  let str3 = 'hijklm';\n  \n  let result = str.toUpperCase();\n  let result2 = str2.toUpperCase();\n  let result3 = str3.toUpperCase();\n  \n  switch(true){\n    case str.includes(str[0]):\n      console.log(result.charAt(0));\n      break;\n     \n    case str2.includes(str2[0]):\n      console.log(result2.charAt(0));\n      break;\n      \n    case str3.includes(str3[0]):\n      console.log(result3.charAt(0));\n      break;\n  }\n}\n\nletter();\n`.trim();\n\nconst vowelsAndConsonants = `function vowelsAndConsonants(s) {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const string = s.split(\"\");\n  let vowelArr = [];\n  let consonantArr = [];\n  for (let i = 0; i < string.length; i++) {\n    vowels.includes(string[i])\n      ? vowelArr.push(string[i])\n      : consonantArr.push(string[i]);\n  }\n  for (let i = 0; i < vowelArr.length; i++) {\n    console.log(vowelArr[i]);\n  }\n  for (let i = 0; i < consonantArr.length; i++) {\n    console.log(consonantArr[i]);\n  }\n}\n\nvowelsAndConsonants('javascriptloops');\n`.trim();\n\nconst getSecondLargest = `\nfunction getSecondLargest(nums) {\n  let firstLargestNum = 0;\n  let secondLargestNum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > firstLargestNum) {\n      secondLargestNum = firstLargestNum;\n      firstLargestNum = nums[i];\n    }\n    if (nums[i] > secondLargestNum && nums[i] < firstLargestNum) {\n      secondLargestNum = nums[i];\n    }\n  }\n  return secondLargestNum;\n}\n\nconsole.log(getSecondLargest([5, 2, 3, 6, 6, 5]));\n`.trim();\n\nconst isPositive = `function isPositive(a) {\n  if (a === 0) {\n    throw Error(\"Zero Error\");\n  }\n  if (a < 0) {\n    throw Error(\"Negative Error\");\n  }\n  return \"YES\";\n}\n\nconsole.log(isPositive(6))`.trim();\n\nconst getCount = `\nfunction getCount(objects) {\n  let pairCount = 0;\n  for (let i = 0; i < objects.length; i++) {\n    if (objects[i].x === objects[i].y) {\n      pairCount++;\n    }\n  }\n  return console.log(pairCount);\n}\n\ngetCount([2,3])`.trim();\n\nconst Polygon = `\n//Explanation:\nThere are n= 5 objects in the objects array:\nobjects0 = {x:1, y:1}\nobjects1 = {x:2, y:3}\nobjects2 = {x:3, y:3}\nobjects3 = {x:3, y:4}\nobjects4 = {x:4, y:5}\nBecause we have two objects o that satisfy o.x (i.e., objects0 and objects1), we return 2 as \nour answer.\n\n\nclass Polygon {\n  constructor(args) {\n      this.values = args;\n  }\n\n  perimeter() {\n      return (this.values || []).reduce((target, item) => target + item);\n  }\n}\n\n// Create a polygon with side lengths 3, 4, and 5\nlet triangle = new Polygon([3, 4, 5]);\n\n// Print the perimeter\nconsole.log(triangle.perimeter());`.trim();\n\n\nconst processData = `\nclass Rectangle {\n  constructor(w, h) {\n      this.w = w;\n      this.h = h;\n  }\n}\n//  Write code that adds an 'area' method to the Rectangle class' prototype\n\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\nRectangle.prototype.area = function() {\n      return(this.w*this.h);\n  };\n\n// Create a Square class that inherits from Rectangle and implement its class constructor\n\n \n  class Square extends Rectangle {\n      constructor(s) {\n          super(s);\n          this.h = s;\n          this.w = s;\n      }\n  };\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n  const rec = new Rectangle(3, 4);\n  const sqr = new Square(3);\n  \n  console.log(rec.area());\n  console.log(sqr.area());\n} else {\n  console.log(-1);\n  console.log(-1);\n}`.trim();\n\nconst getMaxLessThanK = `\n//We define S to be a sequence of distinct sequential integers from 1  to n; in other words, \nS = {1, 2, 3, ..., n}. We want to know the maximum bitwise AND value of any two integers, a \nand b (where a < b), in sequence S that is also less than a given integer, k.\n\n\nfunction getMaxLessThanK(n, k) {\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      (i & j) > max && (i & j) < k ? (max = i & j) : max;\n    }\n  }\n  return max;\n}\n\nconsole.log(getMaxLessThanK(8, 5));\n`.trim();\n\nconst getDayName = `\nfunction getDayName(dateString) {\n  let dayName;\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ];\n  dayName = days[new Date(dateString).getUTCDay()];\n  return dayName;\n}\n\nconsole.log(getDayName(10/11/2009));`.trim();\n\nconst regexVar = `\nfunction regexVar() {\n  // It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n  var re = RegExp(/^([aeiou])/);\n \n  let str = 'aca';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nconst regexVars = `\nfunction regexVar() {\n  // Declare a RegExp object variable named 're'\n  // It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.',\n  // followed by one or more letters.\n  let re = RegExp(/^(Mr|Mrs|Ms|Dr|Er)(\\.)([a-zA-Z])+$/);\n  let str = 'Mr.X';\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nconst regexVares = `\n//Receive a string of s length of s ≥ 3\n  s is a string that contains numbers and letters\n\n\nfunction regexVar() {\n  var re = RegExp('\\\\d+', 'g');\n  \n  let str = 4.5;\n  var res = re.exec(str);\n  console.log(res);\n}\n\nregexVar();`.trim();\n\nclass HackerRank1 extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <p>Variables named firstInteger, firstDecimal, and firstString are declared for you in the\n                editor below. You must use the + operator to perform the following sequence of operations:\n              </p>\n              <ul>\n                <li>Convert secondInteger to an integer (Number type), then sum it with firstInteger and print\n                  the result on a new line using console.log.</li>\n                <li>Convert secondDecimal to a floating-point number (Number type), then sum it with\n                  firstDecimal and print the result on a new line using console.log.</li>\n                <li>Print the concatenation of firstString and secondString on a new line using console.log.\n                  Note that firstString must be printed first.</li>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={data_types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <b>Arithmetic Operators</b>\n              <ul>\n                <li>getArea(length, width): Calculate and return the area of a rectangle having sides length and\n                  width.</li>\n                <li>getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides\n                  length and width.</li>\n                <li>Input: 3, 4.5</li>\n                <li>Output: 13.5, 15</li>\n                <br />\n\n                <b>Explanation:</b>\n                <br />\n                <li>The area of the rectangle is length * width =3*4.5=13.5.</li>\n                <li>The perimeter of the rectangle is (length * width) =2*(3+4.5)=15.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={getArea}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Let and Const</p>\n              <ul>\n                <li>Declare a constant variable, PI, and assign it the value Math.PI. You will not pass this\n                  challenge unless the variable is declared as a constant and named PI (uppercase).</li>\n                <li>Read a number, r, denoting the radius of a circle from stdin.</li>\n                <li>Use PI  and r to calculate the area and perimeter of a circle having radius r .</li>\n                <li>Print area as the first line of output and print perimeter as the second line of output.</li>\n                <br />\n                <b>Input:</b>\n                <li>A single integer, , r denoting the radius of a circle.</li>\n                <br />\n                <b>Output:</b>\n                Print the following two lines:\n                <li>On the first line, print the area of the circle having radius .</li>\n                <li>On the second line, print the perimeter of the circle having radius .</li>\n                <br />\n                <b>Input:</b>0, 2.6\n                <br />\n                <b>Output:</b>21.237166338267002, 16.336281798666924\n              </ul>\n              <br />\n              <b>Explanation:</b>\n              <br />\n              Given the radius r=2.0, we calculate the following:\n              area = PI.r pow(2) = 21.2371\n              perimeter = 2*PI*r = 16.336281\n              We then print  as our first line of output and  as our second line of output.\n              <div style={titles}>\n                <PrismCode\n                  code={declared}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>If-Else</h3>\n              <p>Complete the getGrade(score) function in the editor. It has one parameter: an integer, score ,\n                denoting the number of points Julia earned on an exam. It must return the letter corresponding\n                to her grade according to the following rules:</p>\n              {/* \n  If 25 < score <= 30, then grade = A\n  If 20 < score <= 25, then grade = B\n  If 15 < score <= 20, then grade = C\n  If 10 < score <= 15, then grade = D\n  If 5 < score <= 10, then grade = E\n  If 0 < score <= 5, then grade = F \n*/}\n\n              <b>Input:</b> 11\n              <br />\n              <b>Output:</b> D\n              <div style={titles}>\n                <PrismCode\n                  code={scoe_grade}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Switch</b>\n              <p>\n                It has one parameter: a string, s,\n                consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B,\n                C, or D depending on the following criteria:\n              </p>\n              {/* <ul>\n                <li>If the first character in string s is in the set {a, e, i, o, u}, then return A.</li>\n                <li>If the first character in string s is in the set {b, c, d, f, g}, then return B.</li>\n                <li>If the first character in string s is in the set {h, j, k, l, m}, then return C.</li>\n                <li>If the first character in string s is in the set {n, p, q, r, s, t, v, w, x, y, z}, then \n  return D.</li>\n              </ul> */}\n              <b>Input:</b>adfgt\n              <br />\n              <b>Output:</b> A\n              <br />\n              <br />\n              <b>Explanation</b>\n              <br />\n              The first character of string s= adfgt is a. Because the given criteria\n              stipulate that we print A any time the first character is in a,e,i,o,u , we return A as our\n              answer.\n              <div style={titles}>\n                <PrismCode\n                  code={character}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Loops</h3>\n              <p>Function has one parameter, a string,\n                s, consisting of lowercase English alphabetic letters (i.e., a through z). The function must\n                do the following:</p>\n              <ul>\n                <li>First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and\n                  each vowel must be printed in the same order as it appeared in s.</li>\n                <li>Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it\n                  appeared in s.</li>\n                <br />\n                <b>Input:</b>\n                Locked stub code in the editor reads string s from stdin and passes it to the function.\n                <br />\n                javascriptloops\n                <br />\n                <br />\n                <b>Output:</b>\n                First, print each vowel in s on a new line (in the same order as they appeared in s). Second,\n                print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared\n                in s).\n                <br />\n                a a i o o j v s c r p t l p s\n              </ul>\n              <br />\n              <br />\n              Observe the following:\n              <div style={titles}>\n                <PrismCode\n                  code={vowelsAndConsonants}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Arrays</p>\n              Function has one parameter: an array,\n              nums, of n numbers. The function must find and return the second largest number in nums.\n              <br />\n              <br />\n              <b>Input:</b>\n              Reads the following input from stdin and passes it to the function:\n              <ul>\n                <li>The first line contains an integer, n, denoting the size of the nums array.</li>\n                <li>The second line contains n space-separated numbers describing the elements in nums.</li>\n              </ul>\n              2 3 6 6 5\n              <br />\n              <b>Output:</b> 5\n              <br />\n              <br />\n              <b>Explanation:</b>\n              <br />\n              Given the array nums=[2,3,6,6,5], we see that the largest value in the array is 6 and the\n              second largest value is 5. Thus, we return 5 as our answer.\n              <div style={titles}>\n                <PrismCode\n                  code={getSecondLargest}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <p>Try, Catch, and Finally</p>\n              Function has one parameter, s. You must perform the following actions:\n              <ul>\n                <li>Try to reverse string s using the split, reverse, and join methods.</li>\n                <li>If an exception is thrown, catch it and print the contents of the exception's message on a\n                  new line.</li>\n                <li>Print s on a new line. If no exception was thrown, then this should be the reversed string;\n                  if an exception was thrown, this should be the original string.</li>\n              </ul>\n              <b>Input:</b>\"1234\"\n              <br />\n              <br />\n              <b>Output:</b>\n              You must write two print statements using console.log():\n              <ul>\n                <li>Print the contents of a caught exception's message on a new line. If no exception was\n                  thrown, this line should not be printed.</li>\n                <li>Print s on a new line. If no exception was thrown, then this should be the reversed string;\n                  if an exception was thrown, this should be the original string.</li>\n              </ul>\n              Output: 4321\n              <br />\n              <br />\n              <b>Explanation:</b>\n              s=\"1234\" is a string type, so it can be reversed without throwing an exception. Thus, we\n              print the reversed value, 4321, as our answer.\n              <div style={titles}>\n                <PrismCode\n                  code={data_types}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n\n              <p>Throw</p>\n              Function has one integer parameter, a . If the value of a\n              is positive, it must return the string YES. Otherwise, it must throw an Error according to\n              the following rules:\n              <ul>\n                <li>If a is 0, throw an Error with message = Zero Error.</li>\n                <li>If a is negative, throw an Error with message = Negative Error.</li>\n              </ul>\n              <b>Input:</b>\n              <ul>\n                <li>The first line is an integer, n, denoting the number of times the function will be called\n                  with some a.</li>\n                <li>Each line i of the n subsequent lines contains an integer denoting some a.</li>\n              </ul>\n              e.g: 3\n              2\n              0\n              6\n              <br />\n              <br />\n              <b>Output:</b>\n              If the value of a is positive, the function must return the string YES. Otherwise, it must\n              throw an Error according to the following rules:\n              <ul>\n                <li>If a is 0, throw an Error with message = Zero Error.</li>\n                <li>If a is negative, throw an Error with message = Negative Error.</li>\n              </ul>\n              e.g:YES\n              Zero Error\n              YES\n              <br />\n              <br />\n              <b>Explanation:</b>\n              Makes the following three calls to the isPositive function:\n              <ul>\n                <li>isPositive(2): This returns YES because 2 is positive.</li>\n                <li>isPositive(0): Because a = 0, we throw an Error with message =  Zero Error. This is caught by\n                  the locked stub code and the value of its message is printed.</li>\n                <li>isPositive(6): This returns YES because 6 is positive.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={isPositive}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Count Objects</p>\n              <br />\n              <p>Function has one parameter: an array, a, of objects. Each\n                object in the array has two integer properties denoted by x and y. The function must return a\n                count of all such objects o in array a that satisfy o.x == o.y .</p>\n              <b>Input:</b>\n              1 1<br />\n              2 3<br />\n              3 3<br />\n              3 4<br />\n              4 5\n              <br />\n              <br />\n              <b>Output:</b> 2\n              <div style={titles}>\n                <PrismCode\n                  code={getCount}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Classes</p>\n              Create a Polygon class that has the following properties:\n              <ul>\n                <li>A constructor that takes an array of integer values describing the lengths of the polygon's\n                  sides.</li>\n                <li>A perimeter() method that returns the polygon's perimeter.</li>\n              </ul>\n              <b>Output:</b>\n              The perimeter method must return the polygon's perimeter using the side length array passed\n              to the constructor.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={Polygon}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Inheritance</p>\n              Perform the following tasks:\n              1. Add an area method to Rectangle's prototype.\n              <br />\n              2. Create a Square class that satisfies the following:\n              <ul>\n                <li>It is a subclass of Rectangle.</li>\n                <li>It contains a constructor and no other methods.</li>\n                <li>It can use the Rectangle class' area method to print the area of a Square object.</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={processData}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Bitwise Operators</p>\n              <b>Input:</b>\n              3<br />\n              5 2<br />\n              8 5<br />\n              2 2<br />\n              <br />\n              <b>Output:</b><br />\n              1<br />\n              4<br />\n              0\n              <div style={titles}>\n                <PrismCode\n                  code={getMaxLessThanK}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>JavaScript Dates</p>\n              <p>\n                Given a date string, dateString , in the format MM/DD/YYYY, find and return the day name for\n                that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday,\n                Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016\n                is Wednesday.\n              </p>\n              <b>Input:</b>\n              10/11/2009<br />\n              11/10/2010\n              <br />\n              <br />\n              <b>Output</b>\n              <br />\n              Sunday<br />\n              Wednesday\n              <br />\n              <br />\n              <b>Explanation:</b>\n              The function is called for the following d = 2 dates:\n              <br />\n              <br />\n              The date 10/11/2009 was a Sunday, so we return Sunday.<br />\n              The date 11/10/2010 was a Wednesday, so we return Wednesday.\n              <br />\n              <br />\n              getUTCDay() method returns the day of the week in the specified date according to universal\n              time, where 0 represents Sunday.\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={getDayName}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <p>Regular Expressions I</p>\n              Function returning a RegExp object, re, that matches any\n              string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i,\n              o, and u.\n              <br />\n              <br />\n              <b>Input:</b>bcd\n              <br />\n              <br />\n              <b>Output:</b>false\n              <br />\n              <br />\n              <b>Explanation:</b>\n              This string starts with (and ends in) a consonant, so it cannot start and end with the same\n              vowel.\n              <ul>\n                <li>Receive a string of s which is greater than or equal to the length of 3</li>\n                <li>Write a regular expression that validates the string</li>\n                <li>The string must be in all lowercase with characters from a-z</li>\n                <li>The string must start and end with a vowel</li>\n                <li>Return a boolean of true or false if the string meets the requirements</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={regexVar}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <p>Receive a string of s which is greater than or equal to the length of 3</p>\n              <br />\n              <ul>\n                <li>Write a regular expression that validates the string</li>\n                <li>String starts with either (Mr., Mrs., Ms., Dr., or Er.)</li>\n                <li>String doesn’t contain any spaces</li>\n                <li>String contains on the letters a-z or A-Z</li>\n                <li>Return a boolean of true or false if the string meets the requirements</li>\n              </ul>\n              <b>Input:</b>Mr.X\n              <br />\n              <b>Output:</b>true\n              <div style={titles}>\n                <PrismCode\n                  code={regexVars}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <p>Write a regular expression that validates the string, The expression must only output integer numbers</p>\n              <br />\n              <b>Input:</b>102, 1948948 and 1.3 and 4.5\n              <br />\n              <b>Output:</b>102, 1948948, 1, 3, 4, 5\n              <br />\n              <br />\n              <b>Explanation:</b>\n              When we call match on string  and pass the correct RegExp as our argument, it returns the\n              following array of results: [ '102', '1948948', '1', '3', '4', '5' ].\n              <div style={titles}>\n                <PrismCode\n                  code={regexVares}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(HackerRank1));\n"],"sourceRoot":""}