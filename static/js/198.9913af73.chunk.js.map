{"version":3,"sources":["components/ReactJs/prismCode.js","components/mongoDB/sidebar.js","components/mongoDB/deepMongodb/intro.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","Create_DB","findOne","queries","Filtering","joining","aggregate","Data_Modelling","normalized","Example","Aggregation","Pipeline","project","match","group","sort","unwind","chaining","update","update_2","findOneAndUpdate","updateOne","updateMany","Replace","increments","Intro","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/198.9913af73.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMD' className={classes.line}>IntroMD</Link></MenuItem>\n        <MenuItem><Link to='/intro' className={classes.line}>Queries</Link></MenuItem>\n        <MenuItem><Link to='/mongodbMethods' className={classes.line}>mongodbMethods</Link></MenuItem>\n        <MenuItem><Link to='/mongoCurd' className={classes.line}>MongoCurd-Ref</Link></MenuItem>\n        <MenuItem><Link to='/mongoQueries' className={classes.line}>Mongo Queries</Link></MenuItem>\n        <MenuItem><Link to='/searchErrorHandling' className={classes.line}>searchErrorHandling</Link></MenuItem>\n        <MenuItem><Link to='/bulkRight' className={classes.line}>BulkWright</Link></MenuItem>\n        <MenuItem><Link to='/mysql' className={classes.line}>Mysql</Link></MenuItem>\n        <MenuItem><Link to='/mysqlCurd' className={classes.line}>MysqlCurd</Link></MenuItem>\n        <MenuItem><Link to='/joinOp' className={classes.line}>JoinOp</Link></MenuItem>\n        <MenuItem><Link to='/sortOp' className={classes.line}>Sort</Link></MenuItem>\n        <MenuItem><Link to='/curdOp' className={classes.line}>CurdOp</Link></MenuItem>\n        <MenuItem><Link to='/gridFs' className={classes.line}>gridFs</Link></MenuItem>\n        <MenuItem><Link to='/postgressql' className={classes.line}>PostgreSql</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = {backgroundColor:'#F0F8FF', padding:'1px', fontSize:'16px'}\n\nconst styles = theme => ({\n  paper: {\n      margin: theme.spacing(1),\n      padding: theme.spacing(1)\n  },\n  smMargin: {\n      margin: theme.spacing(1)\n  },\n  actionDiv: {\n      textAlign: \"center\"\n  }\n})\n\nconst Create_DB = `\nshow dbs\nuse EmployeeDB\ndb.dropDatabase()\ndb.createUser({user:\"brad\", pwd:\"123\", roles:[\"readWrite\", \"dbAdmin\"]});\n\nshow collections\ndb.createCollection('store');                                          //create collection\ndb.orders.renameCollection('store')                                    //rename collection\ndb.orders.drop()                                                       // drop collection\n `.trim()\n\nconst findOne = `\ndb.store.find().pretty()\ndb.store.find({name: 'Ritesh'}, {country: 'India', color: 'Green'})\ndb.store.findOne({country: \"UK\"});\ndb.store.find({},{\"name\":1,_id:0}).limit(2);\ndb.store.find().count();\ndb.store.find().limit(4).skip(1);\n\ndb.store.find({$and: [{name:'Mukesh'},{country:'India'}] });\ndb.store.find({$or: [{name:'Mukesh'},{country:'India'}] });\n\ndb.store.find({country:{$in:['India']}})\ndb.store.find({country:{$not:{$in:['India']}}})\n\ndb.store.find({score:{$eq:7}})\ndb.store.find({country:{$not:{$eq:'India'}}})\ndb.store.find({score:{$lt:4}});\ndb.store.find({score:{$gt:4}});\n\n`.trim()\n\nconst queries = `\ndb.store.insert({'interger':23});\ndb.store.insertOne({_id:1,name:'mukesh',country:'indian'});\n\ndb.store.insertMany([\n     { _id: 20, name: \"John Wick\", country: \"Visual Studio\"},\n     { _id: 22, name: \"Deeksha Raul\", country: \"Unity 3D\" }\n   ]);\n\ndb.store.update({_id:1},{$set:{name:['mukesh'],country:['1234567890']}});\ndb.store.update({name:'Mukesh'},{$set:{country:'India'}})\ndb.store.update({_id: 20}, { $set: { name: [\"Vocals\", \"Violin\", \"Octapad\"] }})\ndb.users.update({_id:2.0},{$set:{userId:1}})          //alter collections, to add new data in existing row.\n\n//Rename Field\ndb.posts.update({ title: 'Post Two' },{ $rename: { likes: 'views' }});\n\ndb.store.remove({})\ndb.store.remove({ name: \"mukesh\" })\ndb.store.remove({_id:1},{justOne:true});\n`.trim()\n\nconst Filtering = `\n\n`.trim()\n\nconst joining = `> db.users.find()\n{ \"_id\" : 1, \"userId\" : 1, \"name\" : \"Al\" }\n{ \"_id\" : 2), \"userId\" : 2, \"name\" : \"Betty\" }\n{ \"_id\" : 3, \"userId\" : 3, \"name\" : \"Cameron\" }\n\n> db.comments.find()\n{ \"_id\" : 1, \"userId\" : 1, \"comment\" : \"Hi, I'm Al and I love comments.\" }\n{ \"_id\" : 2, \"userId\" : 1, \"comment\" : \"Hi, it's Al again. I really do love comments.\" }\n{ \"_id\" : 3, \"userId\" : 2, \"comment\" : \"I'm Betty. This is my first comment onthis site.\" }\n{ \"_id\" : 4, \"userId\" : 3, \"comment\" : \"This is Cameron. I enjoyed reading your website.\" }\n`.trim()\n\nconst aggregate = `db.users.aggregate([ {$lookup: {\n                            from: \"comments\",\n                            localField: \"userId\",\n                            foreignField: \"userId\",\n                            as: \"combined\"\n                          }\n                       }\n                     ]).pretty()\n`.trim()\n\nconst  Data_Modelling = `db.customers.insert([\n{id: , Emp_ID: \"10025AE336\" Personal_details:{ First_Name: \"Radhika\", Last_Name: \"Sharma\", DOB: \"1995-09-26\"},\n  Contact: { e-mail: \"radhika_sharma.123@gmail.com\", phone: \"9848022338\"},\n  Address: { city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n    ]);\n `.trim()\n\nconst normalized = `\nEmployee: {_id: <ObjectId101>, Emp_ID: \"10025AE336\"}\n  \nPersonal_details:{ _id: <ObjectId102>, empDocID: \" ObjectId101\", First_Name: \"Radhika\", Last_Name: \"Sharma\",\n                  DOB: \"1995-09-26\"}\n   \n Contact: { _id: <ObjectId103>, empDocID: \" ObjectId101\", e-mail: \"radhika_sharma.123@gmail.com\", \n                  phone: \"9848022338\"}\n   \n Address: { _id: <ObjectId104>, empDocID: \" ObjectId101\", city: \"Hyderabad\", Area: \"Madapur\", State: \"Telangana\"}\n `.trim()\n\nconst Example = `{ _id: POST_ID title: TITLE_OF_POST, description: POST_DESCRIPTION, by: POST_BY, url: URL_OF_POST, \n  tags: [TAG1, TAG2, TAG3], likes: TOTALL_LIKES,\n  \n    comments: [{ user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES },\n      { user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, like: LIKES }\n    ]}\n  `.trim()\n\nconst Aggregation = `db.mycol.aggregate([{$group : {_id : \"$by_user\", num_tutorial : {$sum : 1}}}]);\n`.trim()\n\nconst Pipeline = `> db.user.find()\n{ \"_id\" : 1, \"name\" : \"GENWI\", \"founded_year\" : 2010 }\n{ \"_id\" : 2, \"name\" : \"Needium\", \"founded_year\" : 2010 }\n{ \"_id\" : 3, \"name\" : \"Ziippi\", \"founded_year\" : 2011 }\n{ \"_id\" : 4, \"name\" : \"Pixelmatic\", \"founded_year\" : 2011 }\n{ \"_id\" : 5, \"name\" : \"Clowdy\", \"founded_year\" : 2013 }\n\n\nPipeline\ndb.user.aggregate([\n  { $match : { founded_year : 2011 } },\n  { $sort : {name:-1} },\n  { $project : { _id : 0, name : 1 } }\n ])\n \n \n Or Pipeline\n db.user.aggregate([\n  { $match: { founded_year: { $gte: 2010 } } },\n  { $group: {\n  _id: \"$founded_year\",\n  companies: { $push: \"$name\" }\n  }},\n  { $sort: { \"_id\": 1 } }\n ])`.trim()\n\nconst project = `db.user.aggregate([ { $project : { _id : 0, name : 1 } }])\n`.trim()\n\nconst match = `\ndb.users.aggregate({$match:{userId:1}})\ndb.users.aggregate({$match:{userId: {$gte:3}}})\n`.trim()\n\nconst group = `db.user.aggregate({ $group :{_id:ObjectId(\"5ef64c903da2b374c85626a1\"), count:{$sum:1}} })`.trim()\n\nconst sort = `db.user.aggregate({ $sort : {name:-1} })\n`.trim()\n\nconst unwind = `db.user.aggregate({ $project: {author : 1, title : 1, tags : 1}},\n                        { $unwind : \"$tags\" });\n \n o/p:\n{ \"_id\" : 1, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }\n{ \"_id\" : 2, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"good\" }\n{ \"_id\" : 3, \"title\" : \"this is my title\", \"author\" : \"bob\", \"tags\" : \"fun\" }`.trim()\n\nconst chaining = `\ndb.customers.find().limit(2).sort({ title: 1 }).pretty()\n\nForeach\ndb.customers.find().forEach(doc=>{\n  print('name',doc.First_Name)\n  });\n `.trim()\n\nconst update = `db.customers.save(\n  {\"_id\" : ObjectId(5ee08dc1e206f48220a3b08c), \"first_name\":\"Tutorials Point N\n ew Topic\",\"by\":\"mongodb\"}\n );\n `.trim()\n\nconst update_2 = `db.customers.update({first_name:\"mukesh\"},\n{$set:{first_name:\"Mongodb\"}},{multi:true})\n`.trim()\n\nconst findOneAndUpdate = `db.customers.updateOne(\n  {first_name: 'ram'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );\n `.trim()\n\nconst updateOne = `db.customers.updateOne(\n  {first_name: 'mukesh'},\n  { $set: { Age: '30',e_mail: 'radhika_newemail@gmail.com'}}\n );`.trim()\n\nconst updateMany = `db.customers.updateMany({Age:{ $gt: \"25\" }},\n{ $set: { Age: '00'}}\n);\n`.trim()\n\nconst Replace = `db.customers.update({first_name:\"John\"},{$set:{gender:\"femail\"}});\n`.trim()\n\nconst increments = `db.customers.update({first_name:\"John\"},{$set:{age:45}});\ndb.customers.update({first_name:\"John\"},{$inc:{age:5}});\n`.trim()\n\nclass Intro extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n            <Grid item xs={2}>\n                <Paper className={classes.paper}>\n                    <h4><Sidebar /></h4>\n                </Paper>\n            </Grid>\n<Grid item xs={10}>\n<Paper className={classes.paper}>\n<List>\n      <b>Create DB</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={Create_DB}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>_id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided\nas follows −</i>\n<br/>\n<br/>\n<b>Insert</b>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={queries}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n\n      <b>Find Specific Fields</b>\n      <br/>\n      It is also possible to filter your results by giving or adding some specific criteria in which you are interested to.\n      <div style={titles}>\n      <PrismCode\n        code={findOne}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Project</b>\n      <br/>\n      Used to select some specific fields from a collection.\n      <div style={titles}>\n      <PrismCode\n        code={project}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>match</b>\n      <br/>\n      − This is a filtering operation and thus this can reduce the amount of documents that are\ngiven as input to the next stage.\n\n      <div style={titles}>\n      <PrismCode\n        code={match}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>group</b>\n      <br/>\n      This does the actual aggregation as discussed above.\n      <div style={titles}>\n      <PrismCode\n        code={group}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>sort</b>\n      <div style={titles}>\n      <PrismCode\n        code={sort}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>skip</i>\n      <br/>\n      <i>limit</i>\n      <br/>\n      <br/>\n      <b>Unwind</b>\n      <div style={titles}>\n      <PrismCode\n        code={unwind}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Chaining</b>\n      <div style={titles}>\n      <PrismCode\n        code={chaining}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>increments numeric value is first</b>\n      <div style={titles}>\n      <PrismCode\n        code={increments}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Updates</b>\n      <br/>\n      <b>MongoDB's remove() method </b>\n      MongoDB's remove() method is used to remove a document from the collection. remove()\nmethod accepts two parameters. One is deletion criteria and second is justOne flag.\n<br/>\nIf you don't specify deletion criteria, then MongoDB will delete whole documents from the\ncollection.\n<br/>\n<br/>\nIf there are multiple records and you want to delete only the first record, then set justOne\nparameter in remove() method.\n      <div style={titles}>\n      <PrismCode\n        code={Filtering}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>joining the data from 2 table queries</b>\n      <br/>\n      MongoDB is not a relational database, but you can perform a left outer join by using the $lookup\nstage.\nThe $lookup stage lets you specify which collection you want to join with the current collection, and\nwhich fields that should match\n<i>Consider you have a \"users\" collection and a \"comments\" collection:</i>\n      <div style={titles}>\n      <PrismCode\n        code={joining}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      As you can see in our dataset there is a common field userId on both collections which allows us to\nmatch up each user with their comments.\n<br/>\n<i>Use the aggregate() method with the $lookup stage.</i>\n<br/>\n      <div style={titles}>\n      <PrismCode\n        code={aggregate}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>MongoDB can store lots and lots data. And work in a very performent way. Retrive data very fast.\nUsed in web and mobile applications.<br/>\nCollection = Table<br/>\nData stored in collection as Documents(BSON). This Documents are Seamaless means we can store\ndifferent data in same collection.<br/>\nIt's store embeded Documents(Document inside Document).<br/>\nGood to use when there is no ton of inter connected relations Database, Collections, Document\ndata/db folder inside MongoDB\nTo insert data into MongoDB collection, you need to use MongoDB's insert() or save() method\nWe can store boolean, Numbers even files in collections. File store in files system.</i>\n<br/>\n      <b>Data Modelling</b>\n      <br/>\n      <br/>\n      Data in MongoDB has a flexible schema.documents in the same collection. They do not need to have\nthe same set of fields or structure, Common fields in a collection’s documents may hold different\ntypes of data.<br/>\nData Model Design: MongoDB provides two types of data models: — Embedded data model and\nNormalized data model.<br/>\nBased on the requirement, you can use either of the models while preparing your document.\nIn Embedded Data Model, you can have (embed) all the related data in a single document, it is also\nknown as de-normalized data model.<br/>\nFor example, assume we are getting the details of employees in three different documents namely,\nPersonal_details, Contact and, Address, you can embed all the three documents in a single one as\nshown below −\n      <div style={titles}>\n      <PrismCode\n        code={Data_Modelling}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Normalized</b>\n      In Normalized Data Model, you can refer the sub documents in the original document, using\nreferences. For example,\n<br/>\nyou can re-write the above document in the normalized model as:\n      <div style={titles}>\n      <PrismCode\n        code={normalized}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Suppose a client needs a database design for his blog/website and see the differences between\nRDBMS and MongoDB schema design. Website has the following requirements<br/>\nEvery post has the unique title, description and url.<br/>\nEvery post can have one or more tags.<br/>\nEvery post has the name of its publisher and total number of likes.<br/>\nEvery post has comments given by users along with their name, message, data-time and likes.<br/>\nOn each post, there can be zero or more comments.</b><br/>\nIn RDBMS schema, design for above requirements will have minimum three tables.\nWhile in MongoDB schema, design will have one collection post and the following structure\n      <div style={titles}>\n      <PrismCode\n        code={Example}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Aggregation</b>\n      <br/>\n      Aggregations operations process data records and return computed results. Aggregation operations\ngroup values from multiple documents together, and can perform a variety of operations on the\ngrouped data to return a single result.<br/>\nIn SQL count(*) and with group by is an equivalent of mongodb aggregation.<br/>\nif you want to display a list stating how many tutorials are written by each user, then you will\nuse the following aggregate() method -\n      <div style={titles}>\n      <PrismCode\n        code={Aggregation}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>Pipeline Concept</b>\n      <br/>\n      Aggregation Framework : The Aggregation Framework is a set of analytics tools within mongodb that\nallows you to run various reports or analysis on one or more mongodb collections.\nAggregation Pipeline –<br/>\n Take Input from a single collection.<br/>\n Pass the documents of the collection through one or more stages.<br/>\n Each stage perform different operations in the Pipeline.<br/>\n Each stage take as Input whatever the stage before produced as Output. <br/>\nThe Input and Output for all stages are documents (stream of documents).\n At the end of Pipeline we get access to the output of the transformed and aggregated\nOutput.\n\n      <div style={titles}>\n      <PrismCode\n        code={Pipeline}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <br/>\n      <b>. MongoDB's update() and save() methods are used to update document into a collection. The\nupdate() method update the values in the existing document while the save() method replaces the\nexisting document with the document passed in save() method.</b>\n      <div style={titles}>\n      <PrismCode\n        code={update}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i> By default, MongoDB will update only a single document. To update multiple documents, you\nneed to set a parameter multi: true</i>\n      <div style={titles}>\n      <PrismCode\n        code={update_2}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>MongoDB findOneAndUpdate() method: The findOneAndUpdate() method updates the values\nin the existing document.\n<br/>\nFollowing example updates the age and email values of the document with name 'Radhika'.</i>\n      <div style={titles}>\n      <PrismCode\n        code={findOneAndUpdate}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <br/>\n      <i>MongoDB updateOne() method: This methods updates a single document which matches the\ngiven filter.</i>\n<br/>\n<br/>\n      <div style={titles}>\n      <PrismCode\n        code={updateOne}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <i>The customers() method updates all the documents that matches the given filter</i>\n      <br/>\n      <div style={titles}>\n      <PrismCode\n        code={updateMany}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      <i>Replace documents\n      <br/>\n db.customers.update(</i>\n  <br/>\n      <div style={titles}>\n      <PrismCode\n        code={Replace}\n        language=\"js\"\n        plugins={[\"line-numbers\"]}\n      />\n      </div>\n      </List>\n      </Paper>\n      </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Intro));\n"],"sourceRoot":""}