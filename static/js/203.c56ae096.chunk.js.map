{"version":3,"sources":["components/ReactJs/prismCode.js","components/mongoDB/sidebar.js","components/mongoDB/deepMongodb/mySql.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","DATABASE","inserts","notNull","unique","primary","foreign","check","defaults","autoIncre","views","updatingViews","cases","ifClouse","Mysql","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/203.c56ae096.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMD' className={classes.line}>IntroMD</Link></MenuItem>\n        <MenuItem><Link to='/intro' className={classes.line}>Queries</Link></MenuItem>\n        <MenuItem><Link to='/mongodbMethods' className={classes.line}>mongodbMethods</Link></MenuItem>\n        <MenuItem><Link to='/mongoCurd' className={classes.line}>MongoCurd-Ref</Link></MenuItem>\n        <MenuItem><Link to='/mongoQueries' className={classes.line}>Mongo Queries</Link></MenuItem>\n        <MenuItem><Link to='/searchErrorHandling' className={classes.line}>searchErrorHandling</Link></MenuItem>\n        <MenuItem><Link to='/bulkRight' className={classes.line}>BulkWright</Link></MenuItem>\n        <MenuItem><Link to='/mysql' className={classes.line}>Mysql</Link></MenuItem>\n        <MenuItem><Link to='/mysqlCurd' className={classes.line}>MysqlCurd</Link></MenuItem>\n        <MenuItem><Link to='/joinOp' className={classes.line}>JoinOp</Link></MenuItem>\n        <MenuItem><Link to='/sortOp' className={classes.line}>Sort</Link></MenuItem>\n        <MenuItem><Link to='/curdOp' className={classes.line}>CurdOp</Link></MenuItem>\n        <MenuItem><Link to='/gridFs' className={classes.line}>gridFs</Link></MenuItem>\n        <MenuItem><Link to='/postgressql' className={classes.line}>PostgreSql</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\nconst DATABASE = `\nshow databases;\nshow tables;\n\nDROP DATABASE Persons;\nDROP TABLE Persons;\nDROP TABLE IF EXISTS Persons;\n\nCREATE DATABASE Persons;\nuse Persons;\n\nCREATE TABLE Users (\n    ID int NOT NULL AUTO_INCREMENT,\n    FirstName varchar(255) NOT NULL,\n    LastName varchar(255),\n    Address varchar(255),\n    City varchar(255) DEFAULT 'Sandnes',\n    OrderDate datetime default CURRENT_TIMESTAMP,\n    Age int,\n    CHECK (Age>=18),\n    UNIQUE (ID),\n    PRIMARY KEY (ID)\n);\n\nselect * from Users;\nINSERT INTO Users (FirstName, LastName, Address, City, OrderDate, Age) \nVALUES ('Ritesh', 'Singh', 'Skagen21', 'Stavanger', '2008-11-11', 20);\n\n//insert multiple\nINSERT INTO City ('id', 'name', 'Percentage') VALUES (1, 'Archer', 6),\n(2, 'Lana', 5),\n(3, 'Cheryl', 4),\n(4, 'Mallory', 3),\n(5, 'Krieger', 2),\n(6, 'Barry', 1);\n\n\nUpdate Users set FirstName='Rakesh' where ID=1;\nDELETE FROM Users where ID=1;\n\nCREATE TABLE newUsers AS SELECT FirstName, Address FROM Users;\n`.trim();\n\nconst inserts = `\nCREATE TABLE TestTable AS\nSELECT customername, contactname FROM customers(existing_table_name);\n`.trim();\n\nconst notNull = `\nCREATE TABLE Persons (\n    ID int NOT NULL,\n    LastName varchar(255) NOT NULL,\n    FirstName varchar(255) NOT NULL,\n    Age int\n);\n`.trim();\n\nconst unique = `\nCREATE TABLE Persons (\n  ID int NOT NULL,\n  LastName varchar(255) NOT NULL,\n  FirstName varchar(255),\n  Age int,\n  UNIQUE (ID)\n);\n\nTo define a UNIQUE constraint on multiple columns.\nCREATE TABLE Persons (\n    ID int NOT NULL,\n    LastName varchar(255) NOT NULL,\n    Age int,\nCONSTRAINT UC_Person UNIQUE (ID,LastName));\n`.trim();\n\nconst primary = `\nCREATE TABLE Persons (\n  ID int NOT NULL,\n  LastName varchar(255) NOT NULL,\n  FirstName varchar(255),\n  Age int,\n  PRIMARY KEY (ID)\n);\n\n\nTo allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns.\nCREATE TABLE Persons (\n    ID int NOT NULL,\n    LastName varchar(255) NOT NULL,\n    FirstName varchar(255),\n    Age int,\n    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)\n);\n`.trim();\n\nconst foreign = `\nCREATE TABLE Orders (\n  OrderID int NOT NULL,\n  OrderNumber int NOT NULL,\n  PersonID int,\n  PRIMARY KEY (OrderID),\n  FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)\n);\n\n\nTo allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns.\nCREATE TABLE Orders (\n  OrderID int NOT NULL,\n  OrderNumber int NOT NULL,\n  PersonID int,\n  PRIMARY KEY (OrderID),\n  CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)\n  REFERENCES Persons(PersonID)\n);\n`.trim();\n\nconst check = `\nCREATE TABLE Persons (\n  ID int NOT NULL,\n  LastName varchar(255) NOT NULL,\n  FirstName varchar(255),\n  Age int,\n  CHECK (Age>=18)\n);\n\n\nTo allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns.\nCREATE TABLE Persons (\n  ID int NOT NULL,\n  LastName varchar(255) NOT NULL,\n  FirstName varchar(255),\n  Age int,\n  City varchar(255),\n  CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')\n);\n`.trim();\n\nconst defaults = `\nCREATE TABLE Persons (\n  ID int NOT NULL,\n  LastName varchar(255) NOT NULL,\n  FirstName varchar(255),\n  Age int,\n  City varchar(255) DEFAULT 'Sandnes'\n);\n\n\nThe DEFAULT constraint can also be used to insert system values, by using functions like CURRENT_DATE():\nCREATE TABLE Orders (\n  ID int NOT NULL,\n  OrderNumber int NOT NULL,\n  OrderDate date DEFAULT CURRENT_DATE()\n);\n`.trim();\n\nconst autoIncre = `\nCREATE TABLE Persons (\n  Personid int NOT NULL AUTO_INCREMENT,\n  LastName varchar(255) NOT NULL,\n  FirstName varchar(255),\n  Age int,\n  PRIMARY KEY (Personid)\n);\n\n\nWhen we insert a new record into the \"Persons\" table, we do NOT have to specify a value for the \"Personid\" column \n(a unique value will be added automatically):\nINSERT INTO Persons (FirstName,LastName) VALUES ('Lars','Monsen');\n`.trim();\n\nconst views = `\nCREATE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName\nFROM Customers\nWHERE Country = 'Brazil';\n\nWe can query the view above as follows:\nSELECT * FROM [Brazil Customers];\n\n\nThe following SQL creates a view that selects every product in the \"Products\" table with a price higher than the \naverage price:\nCREATE VIEW [Products Above Average Price] AS\nSELECT ProductName, Price FROM Products\nWHERE Price > (SELECT AVG(Price) FROM Products);\n\nWe can query the view above as follows:\nSELECT * FROM [Products Above Average Price];\n`.trim();\n\nconst updatingViews = `\nCREATE OR REPLACE VIEW [Brazil Customers] AS\nSELECT CustomerName, ContactName, City\nFROM Customers WHERE Country = 'Brazil';\n`.trim();\n\nconst cases = `\nSELECT *, CASE WHEN Age<30 THEN 'Age is less than 30' WHEN Age > 30\n      THEN 'Age is greater than 30'\n      WHEN Age=10 THEN 'Age is equal to 10'\n      ELSE 'somewrong'\n      END AS result FROM Users;\n`.trim();\n\nconst ifClouse = `\nSelect id, name, Percentage, if(Percentage >= 33, \"Pass\", \"Fail\") as Result from Student;\n\n//CASE\nSelect id, name, Percentage, \nCASE \n    When Percentage >=80 and Percentage <= 100 Then \"Merit\"\n    When Percentage >=60 and Percentage < 80 Then \"1st Devision\"\n    When Percentage >=45 and Percentage < 60 Then \"2nd Devision\"\n    When Percentage >=33 and Percentage < 45 Then \"3rd Devision\"\n    When Percentage < 33 Then \"Fail\"\n    Else \"Not Correct %\"\nEnd as  Grade from Student;\n\n\n//Multiple Updates\nUpdate Student Set Percentage = (CASE id \n    When 3 then 39 \n    When 4 then 70 \nEnd)\n`.trim();\n\n\nclass Mysql extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <b>Database</b>\n              <div style={titles}>\n                <PrismCode\n                  code={DATABASE}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n              <ul>\n                <li><b>Set limit during select: </b>SELECT * FROM Users LIMIT 2;</li>\n                <li><b>Sort table data in descending order: </b>SELECT * FROM Users ORDER BY id DESC;</li>\n                <li><b>: </b>SELECT * FROM Users ORDER BY id ASC;</li>\n                <li><b>Display last row data: </b>SELECT * FROM Users ORDER BY id DESC LIMIT 1;</li>\n                <li><b>Add column data: </b>SELECT Sum(Age) FROM Admin;</li>\n                <li><b>How to count column data: </b>SELECT COUNT(Age) FROM Admin;</li>\n                <li><b>Count duplication data sorting: </b>SELECT COUNT(DISTINCT FirstName) FROM Users;</li>\n                <li><b>IN: </b>SELECT * FROM Admin WHERE Age IN (20,30);</li>\n                <li><b>LIKE: </b>SELECT * FROM Users WHERE FirstName LIKE 'm%';</li>\n                <li><b>: </b>SELECT LastName, MIN(Age) from Admin;</li>\n                <li><b>: </b>SELECT LastName, MAX(Age) from Admin;</li>\n                <li><b>Combined each other: </b>SELECT CONCAT('FirstName','City','OrderDate') AS\n                  permanent_address FROM Users;</li>\n              </ul>\n              <br />\n\n              <h3>Create Table Using Another Table</h3>\n              <ul>\n                <li>The TRUNCATE TABLE delete the data inside a table, but not the table itself.</li>\n                <ul><li>TRUNCATE TABLE table_name;</li></ul>\n                <br />\n                <li>Delete a row.</li>\n                <ul><li>delete from test where age=10;</li></ul>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={inserts}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>ALTER TABLE Statement</h3>\n              The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.\n              Also used to add and drop various constraints on an existing table.\n              <br />\n              <ul>\n                <li>To add a column in a table.</li>\n                <ul><li>ALTER TABLE Customers ADD Email varchar(255);</li></ul>\n                <br />\n                <li>To delete a column in a table.</li>\n                <ul><li>ALTER TABLE Customers DROP COLUMN Email;</li></ul>\n                <br />\n                <li>To change the data type of a column in a table.</li>\n                <ul><li>Alter table person modify column current year;</li></ul>\n              </ul>\n              <br />\n\n              <h3>MySQL Constraints</h3>\n              <p>SQL constraints are used to specify rules for data in a table.</p>\n              <ul>\n                <li>Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with\n                  the ALTER TABLE statement.</li>\n                <li>Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in\n                  the table. If there is any violation between the constraint and the data action, the action is aborted.</li>\n                <li>Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to\n                  the whole table.</li>\n              </ul>\n              <br />\n              <br />\n              The following constraints are commonly used in SQL:\n              <ul>\n                <li><b>NOT NULL: </b>Ensures that a column cannot have a NULL value</li>\n                <li><b>UNIQUE: </b>Ensures that all values in a column are different</li>\n                <li><b>PRIMARY KEY: </b>A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table</li>\n                <li><b>FOREIGN KEY: </b>Prevents actions that would destroy links between tables</li>\n                <li><b>CHECK: </b>Ensures that the values in a column satisfies a specific condition</li>\n                <li><b>DEFAULT: </b>Sets a default value for a column if no value is specified</li>\n                <li><b>CREATE INDEX: </b>Used to create and retrieve data from the database very quickly.</li>\n                <br />\n                <li><b>NOT NULL: </b>By default, a column can hold NULL values.</li>\n                <ul><li>ALTER TABLE person add column country varchar(32) not null;</li></ul>\n              </ul>\n              <br />\n              <b>NOT NULL on CREATE TABLE</b>\n              <div style={titles}>\n                <PrismCode\n                  code={notNull}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>UNIQUE </h3>\n              <ul>\n                <li>Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.</li>\n                <li>A PRIMARY KEY constraint automatically has a UNIQUE constraint.</li>\n                <li>Can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.</li>\n              </ul>\n              <br />\n              <ul>\n                <li>To create a UNIQUE constraint on the \"ID\" column when the table is already created.</li>\n                <ul><li>ALTER TABLE Persons ADD UNIQUE (ID);</li></ul>\n                <br />\n                <li>To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns.</li>\n                <ul><li>ALTER TABLE Persons ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);</li></ul>\n                <br />\n                <li>DROP a UNIQUE Constraint</li>\n                <ul><li>ALTER TABLE Persons DROP INDEX UC_Person;</li></ul>\n              </ul>\n              <br />\n              <b>The following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created:</b>\n              <div style={titles}>\n                <PrismCode\n                  code={unique}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>PRIMARY KEY Constraint</h3>\n              <ul>\n                <li>The PRIMARY KEY constraint uniquely identifies each record in a table.</li>\n                <li>Primary keys must contain UNIQUE values, and cannot contain NULL values.</li>\n                <li>A table can have only ONE primary key, this primary key can consist of single/ multiple columns (fields).</li>\n              </ul>\n              <br />\n              <ul>\n                <li>To create a PRIMARY KEY constraint on the \"ID\" column when the table is already created.</li>\n                <ul><li>ALTER TABLE Persons ADD PRIMARY KEY (ID);</li></ul>\n                <br />\n                <li>To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns.</li>\n                <ul><li>ALTER TABLE Persons ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);</li></ul>\n                <br />\n                <li>To drop a PRIMARY KEY constraint.</li>\n                <ul><li>ALTER TABLE Persons DROP PRIMARY KEY;</li></ul>\n                <br />\n                <li><b>Note: </b>If use ALTER TABLE to add a primary key, the primary key column(s) must have been declared to not contain\n                  NULL values (when the table was first created).</li>\n              </ul>\n              <div style={titles}>\n                <PrismCode\n                  code={primary}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of\n                TWO COLUMNS (ID + LastName).</i>\n              <br />\n\n              <h3>MySQL FOREIGN KEY Constraint</h3>\n              <ul>\n                <li>The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.</li>\n                <li>A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.</li>\n                <li>The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.</li>\n                <li>Notice that the \"PersonID\" column in the \"Orders\" table points to the \"PersonID\" column in the \"Persons\" table.</li>\n                <li>The \"PersonID\" column in the \"Persons\" table is the PRIMARY KEY in the \"Persons\" table.</li>\n                <li>The \"PersonID\" column in the \"Orders\" table is a FOREIGN KEY in the \"Orders\" table.</li>\n                <li>The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.</li>\n              </ul>\n              <br />\n\n              <ul>\n                <li>To create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created.\n                  <br />\n                  ALTER TABLE Orders</li>\n                <ul><li>ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</li></ul>\n                <br />\n                <li>To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns.</li>\n                <ul><li>ALTER TABLE Orders ADD CONSTRAINT FK_PersonOrder\n                  FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</li></ul>\n                <br />\n                <li>To drop a FOREIGN KEY constraint.</li>\n                <ul><li>ALTER TABLE Orders DROP FOREIGN KEY FK_PersonOrder;</li></ul>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={foreign}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>MySQL CHECK Constraint</b>\n              <ul>\n                <li>The CHECK constraint is used to limit the value range that can be placed in a column.</li>\n                <li>If you define a CHECK constraint on a column it will allow only certain values for this column.</li>\n                <li>If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.</li>\n              </ul>\n              <br />\n              <ul>\n                <li>To create a CHECK constraint on the \"Age\" column when the table is already created.</li>\n                <ul><li>ALTER TABLE Persons ADD CHECK (Age gt= 18);</li></ul>\n                <br />\n                <li>To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns.</li>\n                <ul><li>ALTER TABLE Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age ge=18 AND City='Sandnes');</li></ul>\n                <br />\n                <li>To drop a CHECK constraint</li>\n                <ul><li>ALTER TABLE Persons DROP CHECK CHK_PersonAge;</li></ul>\n              </ul>\n              <br />\n              The following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created. The CHECK constraint ensures that the age of a person must be 18, or older:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={check}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>MySQL DEFAULT Constraint</h3>\n              <ul>\n                <li>The DEFAULT constraint is used to set a default value for a column.</li>\n                <li>The default value will be added to all new records, if no other value is specified.</li>\n              </ul>\n              <br />\n              <ul>\n                <li>To create a DEFAULT constraint on the \"City\" column when the table is already created.</li>\n                <ul><li>ALTER TABLE Persons ALTER City SET DEFAULT 'Sandnes';</li></ul>\n                <br />\n                <li>To drop a DEFAULT constraint.</li>\n                <ul><li>ALTER TABLE Persons ALTER City DROP DEFAULT;</li></ul>\n              </ul>\n              <br />\n              The following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={defaults}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>MySQL CREATE INDEX Statement</h3>\n              <ul>\n                <li>The CREATE INDEX statement is used to create indexes in tables.</li>\n                <li>Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/ queries.</li>\n                <li>Creates an index on a table. Duplicate values are allowed:</li>\n                <ul>\n                  <li>The SQL statement below creates an index named \"idx_lastname\" on the \"LastName\" column in the \"Persons\" table:</li>\n                  <li>CREATE INDEX idx_lastname ON Persons (LastName);</li>\n                </ul>\n                <br />\n                <li>Create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:</li>\n                <ul><li>CREATE INDEX idx_pname ON Persons (LastName, FirstName);</li></ul>\n                <br />\n                <li>The DROP INDEX statement is used to delete an index in a table.</li>\n                <ul><li>ALTER TABLE table_name DROP INDEX index_name;</li></ul>\n              </ul>\n              <br />\n\n              <h3>MySQL AUTO INCREMENT Field</h3>\n              <ul>\n                <li>Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.</li>\n                <li>Often this is the primary key field that we would like to be created automatically every time a new record is inserted.</li>\n                <li>MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.</li>\n                <li>By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.</li>\n                <br />\n                <li>AUTO_INCREMENT sequence start with another value.</li>\n                <ul><li>ALTER TABLE Persons AUTO_INCREMENT=100;</li></ul>\n              </ul>\n              <br />\n              The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={autoIncre}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>MySQL Working With Dates</h3>\n              As long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated.\n              <br />\n              <br />\n              MySQL Date Data Types<br />\n              MySQL comes with the following data types for storing a date or a date/ time value in the database:\n              <br />\n              <ul>\n                <li><b>DATE: </b>format YYYY-MM-DD</li>\n                <li><b>DATETIME: </b>YYYY-MM-DD HH:MI:SS</li>\n                <li><b>TIMESTAMP: </b>YYYY-MM-DD HH:MI:SS</li>\n                <li><b>YEAR: </b>YYYY or YY</li>\n              </ul>\n              <br />\n              Note: The date data type are set for a column when you create a new table in your database!<br />\n              Now we want to select the records with an OrderDate of \"2008-11-11\" from the table.<br />\n              <b>SELECT * FROM Orders WHERE OrderDate='2008-11-11'</b>\n              <br />\n\n              <h3>MySQL CREATE VIEW Statement</h3>\n              <ul>\n                <li>A view is a virtual table based on the result-set of an SQL statement.</li>\n                <li>A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.</li>\n                <li>Can add SQL statements and functions to a view and present the data as if the data were coming from one single table.</li>\n                <li>A view is created with the CREATE VIEW statement.</li>\n              </ul>\n              <br />\n              <br />\n              <b>Following SQL creates a view that shows all customers from Brazil:</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={views}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <i>We can query the view above: <b>SELECT * FROM [Products Above Average Price];</b></i>\n              <br />\n\n              <h3>MySQL Updating a View</h3>\n              <ul>\n                <li>A view can be updated with the <b>CREATE OR REPLACE</b> VIEW statement.</li>\n                <li>A view is deleted with the DROP VIEW statement.</li>\n                <ul><li>DROP VIEW view_name;</li></ul>\n              </ul>\n\n              <br />\n              The following SQL adds the \"City\" column to the \"Brazil Customers\" view:\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={updatingViews}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Joins</h3>\n              <ul>\n                <li><b>INNER JOIN: </b>Return rows from both tables that satisfy the given condition.</li>\n                <ul><li>SELECT Users.FirstName, Admin.LastName FROM Users ,Admin Where Users.id = Admin.id;</li></ul>\n                <br />\n                <li><b>Cross JOIN: </b>Gives us combinations of each row of first table with all records in second table.</li>\n                <ul><li>SELECT * FROM `Admin` CROSS JOIN `Users`;</li></ul>\n                <br />\n                <li><b>Outer JOINs: </b>Return all records matching from both tables.</li>\n                <ul>\n                  <li><b>Left Join: </b>Select Users.FirstName from Users left JOIN Admin on Admin.id = Users.id;</li>\n                  <li><b>Right Join: </b>Select Users.OrderDate, Users.FirstName from Users right JOIN Admin on Admin.id = Users.id;</li>\n                </ul>\n                <br />\n                <li><b>ON clauses: </b>To match the records between table.</li>\n                <ul><li>SELECT A.price , B.first_name FROM `orders` AS A LEFT JOIN `employees` AS B USING ( first_name )</li></ul>\n                <br />\n                <li><b>SELECT DISTINCT: </b>Return only distinct (different) values.</li>\n                <ul><li>SELECT DISTINCT price from orders;</li></ul>\n                <br />\n                <li><b>Select distinct records on a join: </b></li>\n                <ul><li>SELECT DISTINCT Users.FirstName, Users.City FROM Users JOIN Admin ON Users.id = Admin.id WHERE\n                  Admin.LastName = 'singh' ORDER BY Admin.Age DESC;</li></ul>\n                <br />\n                <li><b>SELECT with DISTINCT on multiple columns: </b></li>\n                <ul><li>SELECT distinct last_name, status FROM employees WHERE last_name='singh';</li>\n                  <li>Sorted Data Using ‘Order By’ </li>\n                  <ul><li>SELECT price, items FROM orders WHERE id = 2 ORDER BY qty;</li></ul>\n                </ul>\n\n                <br />\n                <li>SELECT COUNT(id), Age FROM Admin WHERE id gt= 1 GROUP BY Age;</li>\n                <br />\n                <li><b>Query for Creating a View: </b></li>\n                <ul><li>CREATE VIEW customers_data AS SELECT price, age FROM customers WHERE price =(or less than) 40;</li></ul>\n                <br />\n                <li>DROP VIEW customers_data;</li>\n                <br />\n                <li><b>Query to Display Primary Keys: </b></li>\n                <ul><li>SHOW KEYS FROM customers WHERE Key_name = 'PRIMARY'</li></ul>\n                <br />\n                <li><b>Searching for SQL Tables with Wildcards: </b></li>\n                <ul><li>SELECT * From Customers WHERE city LIKE 'us%';</li></ul>\n                <br />\n                <li><b>Between: </b></li>\n                <ul><li>SELECT Name FROM customers WHERE price BETWEEN 234 AND 2434;</li></ul>\n                <br />\n                <li><b>Union: </b></li>\n                <ul><li>SELECT phone FROM Customers UNION SELECT items FROM Orders</li></ul>\n                <br />\n                <li><b>Making Column Labels More Friendly: </b></li>\n                <ul><li>SELECT city AS city_description FROM customers;</li></ul>\n                <br />\n                <li><b>Always and Everywhere!: </b></li>\n                <ul><li>SELECT city FROM customers WHERE id = ALL (SELECT price FROM customers WHERE phone (greater than) 123456790);</li></ul>\n                <br />\n                <li><b>Query returns the age for each employee, along with total age of the employees by age: </b></li>\n                <ul><li>SELECT age, salary, city, SUM(age) OVER (PARTITION BY age) FROM customers;</li></ul>\n              </ul>\n              <br />\n\n              <h3>If Clouse</h3>\n              <b>Student</b>\n              <table>\n                <tr>\n                  <th>Id</th>\n                  <th>Name</th>\n                  <th>Percentage</th>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Ram Kumar</td>\n                  <td>57</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Salman Khan</td>\n                  <td>28</td>\n                </tr>\n                <tr>\n                  <td>3</td>\n                  <td>Meera Khan</td>\n                  <td>81</td>\n                </tr>\n                <tr>\n                  <td>4</td>\n                  <td>Sarita Kumari</td>\n                  <td>45</td>\n                </tr>\n              </table>\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={ifClouse}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <b>Output</b>\n              <table>\n                <tr>\n                  <th>Id</th>\n                  <th>Name</th>\n                  <th>Percentage</th>\n                  <th>Result</th>\n                </tr>\n                <tr>\n                  <td>1</td>\n                  <td>Ram Kumar</td>\n                  <td>57</td>\n                  <td>Pass</td>\n                </tr>\n                <tr>\n                  <td>2</td>\n                  <td>Salman Khan</td>\n                  <td>28</td>\n                  <td>Fail</td>\n                </tr>\n                <tr>\n                  <td>3</td>\n                  <td>Meera Khan</td>\n                  <td>81</td>\n                  <td>Pass</td>\n                </tr>\n                <tr>\n                  <td>4</td>\n                  <td>Sarita Kumari</td>\n                  <td>45</td>\n                  <td>Pass</td>\n                </tr>\n              </table>\n              <br />\n              <br />\n\n              <b>CASE</b>\n              <div style={titles}>\n                <PrismCode\n                  code={cases}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Mysql));\n"],"sourceRoot":""}