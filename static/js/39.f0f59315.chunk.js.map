{"version":3,"sources":["components/ReactJs/prismCode.js","components/algorithams/sidebar.js","assets/stcks.png","components/algorithams/deepAlgorithams/stack.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","stack","Stack","setTimeout","highlightAll","container","item","xs","src","Stcksval","alt","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/39.f0f59315.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAlgo' className={classes.line}>Deadlock</Link></MenuItem>\n        <MenuItem><Link to='/Stack' className={classes.line}>Stack</Link></MenuItem>\n        <MenuItem><Link to='/Queue' className={classes.line}>Queue</Link></MenuItem>\n        <MenuItem><Link to='/linkedList' className={classes.line}>LinkedList</Link></MenuItem>\n        <MenuItem><Link to='/heap' className={classes.line}>Heap</Link></MenuItem>\n        <MenuItem><Link to='/trees' className={classes.line}>Tree</Link></MenuItem>\n        <MenuItem><Link to='/graph' className={classes.line}>Graph</Link></MenuItem>\n        <MenuItem><Link to='/sort' className={classes.line}>QuickSort</Link></MenuItem>\n        <MenuItem><Link to='/searchAlgo' className={classes.line}>Search</Link></MenuItem>\n        <MenuItem><Link to='/topTech' className={classes.line}>TopTech</Link></MenuItem>\n        <MenuItem><Link to='/stringAlgo' className={classes.line}>String</Link></MenuItem>\n        <MenuItem><Link to='/arrayAlgo' className={classes.line}>Array</Link></MenuItem>\n        <MenuItem><Link to='/nestingArrAlgo' className={classes.line}>Nesting Array</Link></MenuItem>\n        <MenuItem><Link to='/numbersAlgo' className={classes.line}>Numbers</Link></MenuItem>\n        <MenuItem><Link to='/gameAlgo' className={classes.line}>Game</Link></MenuItem>\n        <MenuItem><Link to='/arrayStrAlgo' className={classes.line}>ArrayStr</Link></MenuItem>\n        <MenuItem><Link to='/arrayNumAlgo' className={classes.line}>ArrayNum</Link></MenuItem>\n        <MenuItem><Link to='/dslogic8' className={classes.line}>Logic8</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/stcks.7efa3b78.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport Stcksval from '../../../assets/stcks.png';\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst stack = `\nclass Stack {\n  constructor() {\n      this.items = []\n      this.count = 0\n  }\n\n  \n  push(element) {                                                             // Add element to top of stack.\n      this.items[this.count] = element\n      console.log('$'{element} added to '$'{this.count})\n      this.count += 1\n      return this.count - 1\n  }\n\n  \n  \n  pop() {\n      if(this.count == 0) return undefined                                    // Return undefined if stack is empty.\n      let deleteItem = this.items[this.count - 1]\n      this.count -= 1                                                         // Return and remove top element in stack.\n      console.log('$'{deleteItem} removed)\n      return deleteItem\n  }\n\n  \n  peek() {                                                                    // Check top element in stack.\n      console.log(Top element is '$'{this.items[this.count - 1]})\n      return this.items[this.count - 1]\n  }\n\n  \n  isEmpty() {                                                                 // Check if stack is empty.\n      console.log(this.count == 0 ? 'Stack is empty' : 'Stack is NOT empty')\n      return this.count == 0\n  }\n\n\n  size() {                                                                     // Check size of stack.\n      console.log('$'{this.count} elements in stack)\n      return this.count\n  }\n\n  \n  print() {                                                                     \n      let str = ''\n      for(let i = 0; i < this.count; i++) {\n          str += this.items[i] + ' '\n      }\n      return str\n  }\n\n  clear() {\n      this.items = []\n      this.count = 0\n      console.log('Stack cleared..')\n      return this.items\n  }\n}\n\nconst stack = new Stack()\n\nstack.isEmpty()\nstack.push(100)\nstack.peek()\nstack.push(300)\n\nconsole.log(stack.print())\n\nstack.pop()\nstack.clear()\n\nconsole.log(stack.print())\n\nstack.size()\nstack.isEmpty()`.trim()\n\n\nclass Stack extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Stack</h3>\n              <img src={Stcksval} alt=\"DeadLock\" className=\"responsive\" style={redesign} />\n              <ol>\n                <li>\n                  In JavaScript Stack is the call stack where we push in the\n                  scope of a function whenever we execute it. Programmatically, itâ€™s just an array with\n                  two principled operations push and pop.\n                </li>\n                <br />\n\n                <li>\n                  Can reverse the order of the\n                  stack. the bottom becomes the top and the top becomes the bottom. As such, we can use\n                  the arrayâ€™s unshift and shift methods in place of push and pop, respectively.\n                </li>\n              </ol>\n              <br />\n\n              <b>Functions:</b> push, pop, peek, view, length/\n              <br />\n              <br />\n\n\n              <div style={titles}>\n                <PrismCode\n                  code={stack}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <i>\n                As the number of items grows, push/ pop becomes increasingly more performant than\n                unshift/ shift because every item needs to be reindexed in the latter but not the former.\n              </i>\n\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(Stack));\n"],"sourceRoot":""}