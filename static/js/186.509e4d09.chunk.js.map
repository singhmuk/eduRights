{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","components/ml/deepMl/joinImages.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","images","images_2","detection","shape","JoinImages","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"mPAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACN,EAAKC,KAAO,EAAKA,IAAIC,SACvBC,IAAMC,iBAAiB,EAAKH,IAAIC,UAblC,EAAKD,IAAMI,IAAMC,YAFA,E,iFAMjBC,KAAKP,c,2CAILO,KAAKP,c,+BASG,IAAD,EAC6BO,KAAKR,MAAjCS,EADD,EACCA,KAAeC,GADhB,EACOC,QADP,EACgBD,UACvB,OACE,yBAAKE,UAAU,cACb,0BAAMV,IAAKM,KAAKN,IAAKU,UAAS,mBAAcF,IACzCD,EAAKI,a,GAzBuBP,IAAMQ,a,uDCJ7C,yFAMMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,MAAO,CACLC,YAAaJ,EAAMK,QAAQ,IAE7BC,KAAM,CACJC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,yBAAKH,UAAWc,EAAQR,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMS,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,oBAAoBf,UAAWc,EAAQH,MAAhD,qBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,YAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,oBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,QAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,qBAAqBf,UAAWc,EAAQH,MAAjD,uBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,wBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,OAAOf,UAAWc,EAAQH,MAAnC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,OAAOf,UAAWc,EAAQH,MAAnC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,kBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,kBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,QAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,sBAAsBf,UAAWc,EAAQH,MAAlD,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,YACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,eACV,6BA9BF,gBAiCE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,eAEZ,iC,qLCjDAK,EAAS,CAAEC,gBAAiB,UAAWC,QAAS,MAAOC,SAAU,QAgBjEC,EAAS,mMAWbnB,OAEIoB,EAAW,kyDA6CfpB,OAEIqB,EAAY,g9FA4EhBrB,OAEIsB,EAAQ,u9GAkGZtB,OAGIuB,E,4LAEEC,YAAW,kBAAMjC,IAAMkC,iBAAgB,K,+BAEjC,IACEZ,EAAYlB,KAAKR,MAAjB0B,QACR,OACI,kBAAC,IAAD,CAAMa,WAAS,GACX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CAAO7B,UAAWc,EAAQN,OACtB,4BAAI,kBAAC,IAAD,SAGZ,kBAAC,IAAD,CAAMoB,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CAAO7B,UAAWc,EAAQN,OACtB,kBAAC,IAAD,KACI,+CACA,yBAAKsB,MAAOd,GACR,kBAAC,IAAD,CACInB,KAAMuB,EACNtB,SAAS,KACTC,QAAS,CAAC,mBAGlB,6BACA,6BACA,mEACA,yBAAK+B,MAAOd,GACR,kBAAC,IAAD,CACInB,KAAMwB,EACNvB,SAAS,KACTC,QAAS,CAAC,mBAGlB,6BACA,6BACA,gDACA,yBAAK+B,MAAOd,GACR,kBAAC,IAAD,CACInB,KAAMyB,EACNxB,SAAS,KACTC,QAAS,CAAC,mBAGlB,6BACA,6BACA,uDACA,yBAAK+B,MAAOd,GACR,kBAAC,IAAD,CACInB,KAAM0B,EACNzB,SAAS,KACTC,QAAS,CAAC,2B,GAnDrBG,aA8DT6B,uBA3TD,SAAA1B,GAAK,MAAK,CACrBG,MAAO,CACHwB,OAAQ3B,EAAMK,QAAQ,GACtBQ,QAASb,EAAMK,QAAQ,IAE3BuB,SAAU,CACND,OAAQ3B,EAAMK,QAAQ,IAE1BwB,UAAW,CACPC,UAAW,aAkTHJ,CAAmBP","file":"static/js/186.509e4d09.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1)\n    },\n    smMargin: {\n        margin: theme.spacing(1)\n    },\n    actionDiv: {\n        textAlign: \"center\"\n    }\n})\n\n\nconst images = `\nimport cv2\nimport numpy as np\n\nimg = cv2.imread(\"D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg\")\n\nimgHor = np.hstack((img, img))\n\ncv2.imshow(\"Horizontal\", imgHor)\n\ncv2.waitKey(0)\n`.trim()\n\nconst images_2 = `import cv2\nimport numpy as np\n\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                        None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\nimg = cv2.imread('D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg')\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\nimgStack = stackImages(0.5,([img,imgGray,img],[img,img,img]))\n\n\ncv2.imshow(\"ImageStack\",imgStack)\n\ncv2.waitKey(0)\n`.trim()\n\nconst detection = `\nimport cv2\nimport numpy as np\n\ndef empty(a):\n    pass\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                                None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\n\n\npath = 'D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg'\ncv2.namedWindow(\"TrackBars\")\ncv2.resizeWindow(\"TrackBars\",640,240)\ncv2.createTrackbar(\"Hue Min\",\"TrackBars\",0,179,empty)\ncv2.createTrackbar(\"Hue Max\",\"TrackBars\",19,179,empty)\ncv2.createTrackbar(\"Sat Min\",\"TrackBars\",110,255,empty)\ncv2.createTrackbar(\"Sat Max\",\"TrackBars\",240,255,empty)\ncv2.createTrackbar(\"Val Min\",\"TrackBars\",153,255,empty)\ncv2.createTrackbar(\"Val Max\",\"TrackBars\",255,255,empty)\n\nwhile True:\n    img = cv2.imread(path)\n    imgHSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n    h_min = cv2.getTrackbarPos(\"Hue Min\",\"TrackBars\")\n    h_max = cv2.getTrackbarPos(\"Hue Max\", \"TrackBars\")\n    s_min = cv2.getTrackbarPos(\"Sat Min\", \"TrackBars\")\n    s_max = cv2.getTrackbarPos(\"Sat Max\", \"TrackBars\")\n    v_min = cv2.getTrackbarPos(\"Val Min\", \"TrackBars\")\n    v_max = cv2.getTrackbarPos(\"Val Max\", \"TrackBars\")\n    print(h_min,h_max,s_min,s_max,v_min,v_max)\n    lower = np.array([h_min,s_min,v_min])\n    upper = np.array([h_max,s_max,v_max])\n    mask = cv2.inRange(imgHSV,lower,upper)\n    imgResult = cv2.bitwise_and(img,img,mask=mask)\n\n\n    # cv2.imshow(\"Original\",img)\n    # cv2.imshow(\"HSV\",imgHSV)\n    # cv2.imshow(\"Mask\", mask)\n    # cv2.imshow(\"Result\", imgResult)\n\n    imgStack = stackImages(0.6,([img,imgHSV],[mask,imgResult]))\n    cv2.imshow(\"Stacked Images\", imgStack)\n\n    cv2.waitKey(1)\n`.trim()\n\nconst shape = `\nimport cv2\nimport numpy as np\n\ndef stackImages(scale,imgArray):\n    rows = len(imgArray)\n    cols = len(imgArray[0])\n    rowsAvailable = isinstance(imgArray[0], list)\n    width = imgArray[0][0].shape[1]\n    height = imgArray[0][0].shape[0]\n    if rowsAvailable:\n        for x in range ( 0, rows):\n            for y in range(0, cols):\n                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)\n                else:\n                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), \n                                     None, scale, scale)\n                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)\n        imageBlank = np.zeros((height, width, 3), np.uint8)\n        hor = [imageBlank]*rows\n        hor_con = [imageBlank]*rows\n        for x in range(0, rows):\n            hor[x] = np.hstack(imgArray[x])\n        ver = np.vstack(hor)\n    else:\n        for x in range(0, rows):\n            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:\n                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)\n            else:\n                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)\n            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)\n        hor= np.hstack(imgArray)\n        ver = hor\n    return ver\n\ndef getContours(img):\n    contours,hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n    for cnt in contours:\n        area = cv2.contourArea(cnt)\n        print(area)\n        if area>500:\n            cv2.drawContours(imgContour, cnt, -1, (255, 0, 0), 3)\n            peri = cv2.arcLength(cnt,True)\n            #print(peri)\n            approx = cv2.approxPolyDP(cnt,0.02*peri,True)\n            print(len(approx))\n            objCor = len(approx)\n            x, y, w, h = cv2.boundingRect(approx)\n\n            if objCor ==3: objectType =\"Tri\"\n            elif objCor == 4:\n                aspRatio = w/float(h)\n                if aspRatio >0.98 and aspRatio <1.03: objectType= \"Square\"\n                else:objectType=\"Rectangle\"\n            elif objCor>4: objectType= \"Circles\"\n            else:objectType=\"None\"\n\n\n\n            cv2.rectangle(imgContour,(x,y),(x+w,y+h),(0,255,0),2)\n            cv2.putText(imgContour,objectType,\n                        (x+(w//2)-10,y+(h//2)-10),cv2.FONT_HERSHEY_COMPLEX,0.7,\n                        (0,0,0),2)\n\n\n\n\npath = 'D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg'\nimg = cv2.imread(path)\nimgContour = img.copy()\n\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\nimgBlur = cv2.GaussianBlur(imgGray,(7,7),1)\nimgCanny = cv2.Canny(imgBlur,50,50)\ngetContours(imgCanny)\n\nimgBlank = np.zeros_like(img)\nimgStack = stackImages(0.8,([img,imgGray,imgBlur],\n                            [imgCanny,imgContour,imgBlank]))\n\ncv2.imshow(\"Stack\", imgStack)\n\ncv2.waitKey(0)\nimport cv2\n\nfaceCascade= cv2.CascadeClassifier(\"Resources/haarcascade_frontalface_default.xml\")\nimg = cv2.imread('D:\\Python\\Machin_Learning\\openCV\\Resources\\imgs.jpg')\nimgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\nfaces = faceCascade.detectMultiScale(imgGray,1.1,4)\n\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n\n\ncv2.imshow(\"Result\", img)\ncv2.waitKey(0)\n`.trim()\n\n\nclass JoinImages extends Component {\n    componentDidMount() {\n        setTimeout(() => Prism.highlightAll(), 0)\n    }\n    render() {\n        const { classes } = this.props;\n        return (\n            <Grid container>\n                <Grid item xs={2}>\n                    <Paper className={classes.paper}>\n                        <h4><Sidebar /></h4>\n                    </Paper>\n                </Grid>\n                <Grid item xs={10}>\n                    <Paper className={classes.paper}>\n                        <List>\n                            <h3>Joining images:</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={images}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                            <br />\n                            <br />\n                            <h3>Joining Multiple Images to Display:</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={images_2}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                            <br />\n                            <br />\n                            <h3>Color Detection:</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={detection}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                            <br />\n                            <br />\n                            <h3>Contour/Shape Detection</h3>\n                            <div style={titles}>\n                                <PrismCode\n                                    code={shape}\n                                    language=\"js\"\n                                    plugins={[\"line-numbers\"]}\n                                />\n                            </div>\n                        </List>\n                    </Paper>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default (withStyles(styles)(JoinImages));\n"],"sourceRoot":""}