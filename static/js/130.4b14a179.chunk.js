(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[130],{140:function(e,n,a){"use strict";a.d(n,"a",(function(){return p}));var t=a(45),l=a(28),r=a(136),s=a(137),o=a(139),c=a(0),m=a.n(c),i=a(138),u=a.n(i),p=(a(59),function(e){function n(e){var a;return Object(t.a)(this,n),(a=Object(r.a)(this,Object(s.a)(n).call(this,e))).highlight=function(){a.ref&&a.ref.current&&u.a.highlightElement(a.ref.current)},a.ref=m.a.createRef(),a}return Object(o.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,a=(e.plugins,e.language);return m.a.createElement("pre",{className:"code-prism"},m.a.createElement("code",{ref:this.ref,className:"language-".concat(a)},n.trim()))}}]),n}(m.a.Component))},141:function(e,n,a){},145:function(e,n,a){"use strict";a.d(n,"a",(function(){return i}));var t=a(0),l=a.n(t),r=a(26),s=a(297),o=a(295),c=a(114),m=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function i(){var e=m();return l.a.createElement("div",{className:e.root},l.a.createElement(o.a,null,l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/apiLogic3",className:e.line},"new updated")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/ngRepeat",className:e.line},"NgRepeat")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/ngModel",className:e.line},"ng-model")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/scope",className:e.line},"Scope")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/filter",className:e.line},"Events")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/directives",className:e.line},"Directives")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/angularConditions",className:e.line},"Condition")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/angularlFlters",className:e.line},"Fiters")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/services",className:e.line},"Services")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/validations",className:e.line},"Validations")),l.a.createElement("p",null,"Angular 12"),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/introAngularjs",className:e.line},"Intro")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/flows",className:e.line},"Interviews")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/angularDir2",className:e.line},"Architecture")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/metedata",className:e.line},"MetaData")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/ngFor",className:e.line},"NgFor")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/pipes",className:e.line},"Pipes")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/anguRoutes",className:e.line},"Routes")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/lifeCycleAng",className:e.line},"LifeCycle")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/angularSelector",className:e.line},"Change Detection")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/angularDir",className:e.line},"Custom Elements")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/viewProvider",className:e.line},"ViewProvider")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/dynamicallyLoad",className:e.line},"DynamicallyLoad")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/rxjs",className:e.line},"Rxjs")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/ngrxCurd",className:e.line},"Ngrx")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/ngrxCounter",className:e.line},"NgrxCounter")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/projection",className:e.line},"Pro-Input-Output-Iterates-",l.a.createElement("br",null),"IncrDecr-Toggle-keyIn-If")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/angularCurd",className:e.line},"Curd")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/filterPlace",className:e.line},"FilterPlace-get-live-",l.a.createElement("br",null),"Agree-NoName-Excel")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/radioButton",className:e.line},"Radio-s/h-add-",l.a.createElement("br",null),"version-Launch-Font")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/multiCheck",className:e.line},"MultiSel-MultiCheck")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/services12",className:e.line},"Services")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/dropdownsAngu",className:e.line},"pick-ddSelectData")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/vote",className:e.line},"Vote")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/debounce",className:e.line},"Debounce")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/loader",className:e.line},"Loader")),l.a.createElement(s.a,null,l.a.createElement(r.b,{to:"/paginations",className:e.line},"Paginations"))),l.a.createElement("div",null))}},481:function(e,n,a){"use strict";a.r(n);var t=a(45),l=a(28),r=a(136),s=a(137),o=a(139),c=a(0),m=a.n(c),i=a(138),u=a.n(i),p=a(120),d=a(57),g=a(296),h=a(5),b=(a(141),a(145)),E=a(140),v={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},y="\nvar mockData=[];\nvar mockData2 = [6,7,8,9,23];\nvar commonEle = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then((res) => {\n        person = res.data;\n        person.map(val=>{\n            mockData.push(val.id)\n        })\n\n    var common = mockData.filter(item=>{\n        return mockData2.includes(item)\n    })\n\n    for(var i=0; i<=common.length; i++){\n        commonEle.push(common[i])\n    }\n    console.log(\"commonEle\",commonEle);\n    })\n}".trim(),f="var str='';\nvar str2='';\nvar dict = {};\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            str=val.name;\n            str2=val.username;\n        })\n        \n        for(var i=0; i < str.length; i++) {\n            dict[str.charAt(i)] = 1;\n          }\n          console.log('str',dict);\n\n          var commonChars =[];\n      for(var i=0; i < str2.length; i++) {\n        if( dict[str2.charAt(i)] == 1) {\n          commonChars.push(str2.charAt(i)); // this is optional we can simply print\n        }\n        console.log('str2',commonChars);  \n\n      }\n      \n      dict = commonChars.join(\"\"); \n      console.log('commonChars',dict);\n    })\n}".trim(),j="var arr = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        \n        console.log('arr',person)\n        console.log('obj',...person)\n        \n       })\n}".trim(),$="var obj = {};\nvar objKey = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            obj=val;\n        })\n        console.log('obj',obj)\n\n        //Convert the keys to Array using - Object.keys()\n        objKey = Object.keys(obj)\n        console.log('objKey',objKey)\n\n        //Converts the Values to Array using - Object.values()\n        objVal = Object.values(obj)\n        console.log('objVal',objVal)\n\n        //Converts both keys and values using - Object.entries()\n        objAll = Object.entries(obj)\n        console.log('objAll',objAll)\n       })\n}".trim(),C="var arr=[];\nvar sum = 0;\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        person = res.data;\n        person.map(val=>{\n            arr.push(val.id);\n        })\n        \n        var sum = arr.reduce((a, i) => {\n            return a + i;\n          });\n        console.log('sum',sum)\n       })\n}".trim(),N="var person=[];\nvar personEmail=[];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             personEmail.push(val.email);\n        })\n        console.log('personEmail',personEmail)\n        $scope.personEmail=personEmail\n    })\n}".trim(),O="\nvar mockData=[];\n var apiId = 10;\n var names = [];\nfunction myCtrl($scope, $http){\n    $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n    }).then(mySuccess = (res) => {\n        $scope.person = res.data;\n        $scope.person.map(val=>{\n             mockData.push(val.id);\n             if(val.id == apiId){\n                names.push(val.name)\n                for(let i=0; i<=names.length; i++){\n                    console.log('inside loop',names)\n                }\n             }\n        })\n    })\n}\n".trim(),k="\nvar app = angular.module(\"myApp\", []);\napp.controller(\"myCtrl\", myCtrl);\n\nvar mainId=1;\nvar subParameters=[];\nvar subParametersIds=[];\nvar matchingData=[];\n\nfunction myCtrl ($scope, $http){\n      $http({\n        method:'get',\n        url:'https://jsonplaceholder.typicode.com/users'\n      }).then(res => {\n        $scope.person = res.data;\n          \n        for(var i = 0; i < $scope.person.length; i++){\n         // console.log('json placeholder data in loop',$scope.person[i].id)\n         if(mainId == $scope.person[i].id){\n             // console.log('only match id',$scope.person[i].id)\n             \n             $scope.person.map(score=>{\n                 if(subParametersIds.indexOf(score.id)==-1){\n                     // console.log('only unique records',score.id)\n                     let newObj={\"id\":score.id, \"name\":score.name,'value':[]}\n                     // console.log('push object',newObj)\n                     $scope.newObj = newObj.value.push(score.address.zipcode)\n                     // console.log('after push object',newObj)\n                     subParametersIds.push(score.id);\n                     $scope.subParameters = subParameters.push(newObj);\n                     \n                     let scores={\"ids\":[\"2\"]}\n                     // console.log('hard coded',scores.ids)\n                     \n                     var index=subParameters.indexOf(score.id)\n                     // console.log('index value',index,\":\",score.id)\n                     // subParameters[index].value = subParameters[index].concat(score.id)\n                     \n                     if((score.id == scores.ids || score.id == mainId)){\n                         console.log('matching hard coded value: ',score.id,\"=\",scores.ids,\":\",mainId);\n                         matchingData=matchingData.concat(score.id);\n                         console.log('matching values: ',matchingData)\n                     }\n                     \n                 }\n                 else{\n                 var index=subParameters.indexOf(score.phone)\n                 subParameters[index].value = subParameters[index].value.concat(score.id)\n                 }\n             })\n         }\n     }\n    })\n    console.log('concate data in the array',subParameters)\n }".trim(),D='\n<body>\n    <div ng-controller="myCtrl">\n        <table>\n            <tr>\n              <th>Country</th>\n              <th>Address</th>\n              <th>Geo</th>\n            </tr>\n            <tr ng-repeat="persons in person">\n              <td>{{persons.name}}</td>\n              <td>{{persons.address.street}}</td>\n              <td>{{persons.address.geo.lat}}</td>\n            </tr>\n          </table> \n          <h1>SubParameters</h1>\n          {{subParameters}}\n          <br/>\n          <b>New object</b>\n          {{newObj}}\n    </div>  \n</body>\n'.trim(),A="\n//app.js\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \n var mockData=[];\n var apiId = 10;\n var names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n              mockData.push(fields.id);\n              \n              if(fields.id == apiId){\n                  console.log('fields',mockData)\n                  for(let i=0; i<=mockData.length; i++){\n                      console.log('Matched Id',fields.id)\n                  }\n              }\n          })\n       console.log('after map',mockData);\n   })\n}\n\n\n//index.html\n<body ng-controller=\"myCtrl\">\n</body>\n".trim(),x="\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar mockData=[];\nvar apiId = 2;\nvar names = ['Bret'];\nnameObj = []\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(fields => {\n        if(fields.id == apiId){\n            mockData.push(fields);\n            console.log('map function',mockData)\n        }\n    // apiId = mockData.push(fields);\n    if(fields.username == names){\n        for(let i=0; i<=mockData.length; i++){\n            nameObj.push(mockData)\n        }\n    }\n})\nconsole.log('inside for loop',nameObj)\nconsole.log('after map',mockData);\n});\n}".trim(),S="\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar tempObj = [];\nvar sum = 0;\nvar avg;\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n            $scope.person.map(fields => {\n                tempObj.push(fields.id) \n        });\n        for(let i =0; i<=tempObj.length;i++){\n            sum +=tempObj[i];\n            avg = sum/tempObj.length\n            console.log('sum',sum)\n            console.log('avg',avg)\n        }\n     });\n   \n//Flattening an array of arrays\n     const nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n     let flat = nested.reduce((acc, it) => [...acc, ...it], []);\n     console.log('flat',flat)\n  }".trim(),I="\nvar percentage;\n var sum=0;\n function timeCtrl (){\n        var data = \n           [\n            {label:1, quater :'Q1', y:34},\n            {label:2, quater:'Q1', y:20},\n            {label:3, quater:'Q1', y:30},\n     \n            {label:1, quater:'Q2', y:77},\n            {label:2, quater:'Q2', y:52},\n            {label:3, quater:'Q2', y:3},\n     \n            {label:1, quater:'Q3', y:65},\n            {label:2, quater:'Q3', y:12},\n            {label:3, quater:'Q3', y:9},\n     \n            {label:1, quater:'Q4', y:77},\n            {label:2, quater:'Q4', y:34},\n            {label:3, quater:'Q4', y:5}\n           ];\n \n quartersum = {}\n data.map(function(entry) {\n   quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n })\n \n data.map(function(entry) {\n   entry.percent = entry.y / quartersum[entry.label] * 100;\n   console.log(JSON.stringify(entry))\n })\n \n console.log('data',quartersum);\n console.log('extract object keys',Object.keys(quartersum));\n console.log('extract object values',Object.values(quartersum));\n \n        for(let [key, value] of Object.entries(quartersum)){\n            console.log('extract object property',key, value);\n        }\n        percentage = parseInt((sum*100/quartersum.length));\n        console.log('percentage',percentage);\n}".trim(),P="\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', timeCtrl);\n  \nvar names = [];\n function timeCtrl ($scope, $http){\n   $http({\n     method:'get',\n     url:'https://jsonplaceholder.typicode.com/users'\n   }).then(res => {\n    $scope.person = res.data;\n    $scope.person.map(data => {\n      names.push(data.id)\n    })\n    let scores = names.find(element => element > 4);\n    let filterScores = names.filter(element => element > 4);\n    let joinArr = filterScores.join(\"*\");\n    let spliceArr = filterScores.splice(0,2)\n    let concatArr = filterScores.concat(scores,joinArr,\"100\");\n    \n    //The slice() method slices out a piece of an array into a new array.\n    let sliceArr = filterScores.slice(0,2);\n    let toStringArr = names.toString()\n    let position = filterScores.indexOf(8)\n    \n    //The includes() method determines whether an array contains a specified element.\n    let includeArr = filterScores.includes(10)\n    console.log('find',includeArr)\n  });\n}\n".trim(),q=function(e){function n(){return Object(t.a)(this,n),Object(r.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(o.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return m.a.createElement(p.a,{container:!0},m.a.createElement(p.a,{item:!0,xs:2},m.a.createElement(d.a,{className:e.paper},m.a.createElement("h4",null,m.a.createElement(b.a,null)))),m.a.createElement(p.a,{item:!0,xs:10},m.a.createElement(d.a,{className:e.paper},m.a.createElement(g.a,null,m.a.createElement("h3",null,"Common element in arrays"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:y,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Common element in strings"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:f,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"convert an Array to Object"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:j,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Convert an Object into an Array "),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:$,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Sum of all elements of a given array"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:C,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Dispay dot value"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:N,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Last match name"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:O,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Apply deep logic"),m.a.createElement("b",null,"functions.js"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:k,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("b",null,"functions.html"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:D,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Add data in empty array from api values"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:A,language:"js",plugins:["line-numbers"]})),m.a.createElement("h3",null,"Pick a record from list of records"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:x,language:"js",plugins:["line-numbers"]})),m.a.createElement("h3",null,"Add sum/avg of number from a list"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:S,language:"js",plugins:["line-numbers"]})),m.a.createElement("h3",null,"Avrage and keys/valuue pair extract from an object"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:I,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Array methods"),m.a.createElement("div",{style:v},m.a.createElement(E.a,{code:P,language:"js",plugins:["line-numbers"]}))))))}}]),n}(c.Component);n.default=Object(h.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(q)}}]);
//# sourceMappingURL=130.4b14a179.chunk.js.map