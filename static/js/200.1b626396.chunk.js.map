{"version":3,"sources":["components/ReactJs/prismCode.js","components/mongoDB/sidebar.js","components/mongoDB/deepMongodb/mongoCurd.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","config","models","controllers","routes","server","students","controllersClass","controllersStudents","classRoutes","serverJoin","modelsJoin","controllersFinds","controllersItem","controllersItemsOp","routesJoin","serverJoinRef","MongoCurd","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/200.1b626396.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMD' className={classes.line}>IntroMD</Link></MenuItem>\n        <MenuItem><Link to='/intro' className={classes.line}>Queries</Link></MenuItem>\n        <MenuItem><Link to='/mongodbMethods' className={classes.line}>mongodbMethods</Link></MenuItem>\n        <MenuItem><Link to='/mongoCurd' className={classes.line}>MongoCurd-Ref</Link></MenuItem>\n        <MenuItem><Link to='/mongoQueries' className={classes.line}>Mongo Queries</Link></MenuItem>\n        <MenuItem><Link to='/searchErrorHandling' className={classes.line}>searchErrorHandling</Link></MenuItem>\n        <MenuItem><Link to='/bulkRight' className={classes.line}>BulkWright</Link></MenuItem>\n        <MenuItem><Link to='/mysql' className={classes.line}>Mysql</Link></MenuItem>\n        <MenuItem><Link to='/mysqlCurd' className={classes.line}>MysqlCurd</Link></MenuItem>\n        <MenuItem><Link to='/joinOp' className={classes.line}>JoinOp</Link></MenuItem>\n        <MenuItem><Link to='/sortOp' className={classes.line}>Sort</Link></MenuItem>\n        <MenuItem><Link to='/curdOp' className={classes.line}>CurdOp</Link></MenuItem>\n        <MenuItem><Link to='/gridFs' className={classes.line}>gridFs</Link></MenuItem>\n        <MenuItem><Link to='/postgressql' className={classes.line}>PostgreSql</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst config = `\nconst mongoose = require('mongoose');\n\nconst dbCon = mongoose.connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }, err =>{\n    if(err) throw err;\n    console.log('Connected to MongoDB')\n  })\n\n\n  module.exports = dbCon;`.trim();\n\nconst models = `\nconst mongoose = require('mongoose');\nconst Schems = mongoose.Schema;\n\nconst ItemSchema = new Schems({\n  name: {type:String, required:true, minlength: [3, \"Length aleast 3 characters or longer\"]},\n  rank: {type:Number, required: [true, \"Please provide a name to the bootcamp\"]},\n  counts: [Number],\n  isAdmin: { type: Boolean, required: true, default: false },\n  followers: {type:Array, default:[]},\n  desc: { type: String, max: 500 },\n  img: { type: String },\n  date: {type:Date, default:Date.now}\n  students: [{ type: 'ObjectId', ref: 'Student' }],               //ref name == schemma name\n  type: { type: String, required: true, default:'professional' }, //radio\n},\n{ timestamps: true })\n\nmodule.exports = Item = mongoose.model('item', ItemSchema);`.trim();\n\nconst controllers = `\nconst express = require('express');\nconst router = express.Router();\nconst Item = require('../models/items');\n\n\nrouter.getAll = async (req,res) => {\n    try{\n        Item.find()\n             .sort({date:-1})\n             .then(item=>res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.createItem = async (req,res) => {\n    try{\n        const newItem = new Item({\n            name: req.body.name\n        });\n\n        newItem.save().then(item => res.json(item));\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.getById = async (req,res) => {\n    try{\n        Item.findById(req.params.id)\n            .then(item => res.json(item))\n    }catch(err){\n        console.log(err)\n    }\n}\n\nrouter.remove = async (req, res) => {\n    Item.findByIdAndDelete(req.params.id)\n        .then(item => item.remove()\n        .then(() => res.json({success:true})))\n}\n\nrouter.updates = async (req,res) => {\n    Item.findByIdAndUpdate(req.params.id, {\n        name:req.body.name\n    }, {new:true}).then(data=>res.send(data))\n}\n\n\nmodule.exports = router;`.trim();\n\nconst routes = `\nconst express = require('express');\nconst router = express.Router();\nconst ItemControllers = require('../controllers/items');\n\nrouter.route(\"/\").get(ItemControllers.getAll);\nrouter.route(\"/:id\").get(ItemControllers.getById);\nrouter.route(\"/\").post(ItemControllers.createItem);\nrouter.route(\"/:id\").delete(ItemControllers.remove);\nrouter.route(\"/:id\").put(ItemControllers.updates);\n\nmodule.exports = router;`.trim();\n\nconst server = `\nconst express=require('express');\nconst app=express();\nrequire('dotenv').config();\nconst dbCon = require('./config/db');\nconst itemsRouter = require('./routes/items')\n\napp.use(express.urlencoded({extended:true}));\napp.use(express.json());\n\ndbCon;\n\napp.use(\"/items\", itemsRouter);\n\nconst port = process.env.PORT;\napp.listen(port,()=> console.log('Server is running on port '$'{port}'))`.trim();\n\nconst students = `\nconst classSchema = new Schema({\n  name: { type: String, unique: true },\n  students: [{ type: 'ObjectId', ref: 'Student' }]\n})\n//students is refress like objectId not data in a class can be many students should be ref name == schemma name\n\nmodule.exports = mongoose.model(\"Class\", classSchema);\n\n\n//studentSchema\nconst studentSchema = new Schema({\n  name: { type: String, unique: true },\n  age: Number,\n  subject: String,\n})\n\nmodule.exports = mongoose.model(\"Student\", studentSchema);\n`.trim();\n\nconst controllersClass = `\nconst Class = require('../models/class');\n\nrouter.all = async (req, res) => {\n    Class.find({}).populate('students').exec((err, docs) => {\n      //populate fields which want to pass\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createClass = async (req, res) => {\n    let newClass = new Class();\n    newClass.name = req.body.name;\n    newClass.students = [];\n    newClass.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(newClass)\n    })\n};\n\nrouter.updateClass = async (req, res) => {\n    Class.findOneAndUpdate({ _id: req.params.id },\n      { $push: { students: req.body.studentsId } }, { new: true }, (err, doc) => {\n        //$push used to push data in students array, we push studentsId\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};`.trim();\n\nconst controllersStudents = `\nconst Student = require('../models/students');\n\nrouter.all = async (req, res) => {\n    Student.find({}).exec((err, docs) => {\n      if (err) throw (err);\n      res.json(docs)\n    })\n};\n\nrouter.createStudent = async (req, res) => {\n    let student = new Student();\n    student.name = req.body.name;\n    student.age = req.body.age;\n    student.subject = req.body.subject;\n    student.save((err) => {\n      if (err) res.json({ \"error\": err });\n      else res.json(student)\n    })\n};\n\nrouter.updateStudent = async (req, res) => {\n    Student.findOneAndUpdate({ _id: req.param.id },\n      { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n        if (err) throw (err);\n        else res.json(doc)\n      })\n};\n\n// app.put('/students/:id', (req, res) => {\n//   Student.findOneAndUpdate({ _id: req.param.id },\n//     { $set: { age: req.body.age } }, { new: true }, (err, doc) => {\n//       if (err) throw (err);\n//       else res.json(doc)\n//     })\n// })`.trim();\n\nconst classRoutes = `\nconst classCont = require('../controllers/class');\n\nrouter.route(\"/\").get(classCont.all);\nrouter.route(\"/\").post(classCont.createClass);\nrouter.route(\"/:id\").put(classCont.updateClass);\n\n\n//Students Routes\nconst express = require('express');\nconst router = express.Router();\nconst studentsCont = require('../controllers/students');\n\nrouter.route(\"/\").get(studentsCont.all);\nrouter.route(\"/\").post(studentsCont.createStudent);\nrouter.route(\"/:id\").put(studentsCont.updateStudent);\n`.trim();\n\nconst serverJoin = `\nconst classRoutes = require('./routes/classRoutes');\nconst studetsRoutes = require('./routes/studentsRoutes');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/class', classRoutes);\napp.use('/students', studetsRoutes);\n\nconst PORT = process.env.PORT;\napp.listen(PORT, () => console.log('Server listening on port.'));`.trim();\n\nconst modelsJoin = `\nconst courseSchema = new mongoose.Schema({\n  _id: Number,\n  name: String,\n  category: String\n});\n\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  enroll: Number,\n  courseId: Number\n});\n\nconst Course = mongoose.model('course', courseSchema);\nconst Student = mongoose.model('student', studentSchema);\n\nmodule.exports = { Student, Course }\n\n\n//ItemsOp\nconst ItemsOp = mongoose.Schema({\n  name: String,\n  date: new Date(),\n  ItemsOps: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOps' }]\n});\n\nmodule.exports = mongoose.model('itemsOp', ItemsOp);\n\n\n//ItemsOps\nconst ItemsOps = mongoose.Schema({\n  name: String,\n  price: Number,\n  ItemsOp: [{ type: mongoose.Schema.ObjectId, ref: 'itemsOp' }]\n});\n\nmodule.exports = mongoose.model('itemsOps', ItemsOps);\n`.trim();\n\nconst controllersFinds = `\nconst { Student, Course } = require('../models/finds');\n\nvar dbcourse = [];\nrouter.all = async (req, res, next) => {\n    Course.find({ category: \"database\" })\n      .then(data => {\n        console.log(\"Database Courses:\", data)\n\n        data.map((d, k) => {\n          dbcourse.push(d._id);\n        })\n\n    Student.find({ courseId: { $in: dbcourse } })\n      .then(data => {\n        console.log(\"Students in Database Courses:\"+ data +\"dbcourse\", dbcourse)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  })\n};`.trim();\n\nconst controllersItem = `\nconst Item = require('../models/item');\n\nrouter.all = async (req, res, next) => {\n    Item.find()\n      .populate({\n        path: 'itemsOps',\n        populate: { path: 'itemsOps' }\n      })\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.getOne = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .sort({ date: -1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\nrouter.update = async (req, res, next) => {\n    Item.findByIdAndUpdate(req.params.id, {\n      name: req.body.name,\n    }, { new: true }).then(data => { res.send(data) })\n};\n\nrouter.remove = async (req, res, next) => {\n    Item.findById(req.params.id)\n      .then(item => item.remove().then(() => res.json({ success: true })))\n};`.trim();\n\nconst controllersItemsOp = `\nconst Item = require('../models/itemsOp');\n\nrouter.allsorts = async (req, res, next) => {\n    Item.find()\n      .sort({ price: 1 })\n      .then(items => res.json(items));\n};\n\nrouter.creates = async (req, res, next) => {\n    const newItem = new Item({\n      name: req.body.name,\n      price: req.body.price\n    });\n\n    newItem.save().then(item => res.json(item));\n};\n\n//Limit\nrouter.limits = async (req, res, next) => {\n    Item.find()\n      .limit(2)\n      .then(items => res.json(items));\n};\n\n//filter Regx\nrouter.filtersRegx = async (req, res, next) => {\n  var query = { name: /^C/ };\n  \n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//filter \nrouter.filters = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};\n\n//left join\nrouter.joins = async (req, res, next) => {\n  var query = { name: \"Mobile\" };\n    Item.find(query)\n      .then(items => res.json(items));\n};`.trim();\n\nconst routesJoin = `\nconst itemRoutes = require('../controllers/finds');\nrouter.route(\"/\").get(itemRoutes.all);\n\n\n//itemRoutes\nconst itemRoutes = require('../controllers/item');\n\nrouter.route(\"/\").get(itemRoutes.all);\nrouter.route(\"/:id\").get(itemRoutes.getOne);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/:id\").patch(itemRoutes.update);\nrouter.route(\"/:id\").delete(itemRoutes.remove);\n\n\n//itemOpRoutes\nconst itemRoutes = require('../controllers/itemsOp');\n\nrouter.route(\"/\").get(itemRoutes.allsorts);\nrouter.route(\"/\").post(itemRoutes.creates);\nrouter.route(\"/lmt\").get(itemRoutes.limits);\nrouter.route(\"/fltrebx\").get(itemRoutes.filtersRegx);\nrouter.route(\"/flt\").get(itemRoutes.filters);\nrouter.route(\"/ljoins\").get(itemRoutes.joins);\n`.trim();\n\nconst serverJoinRef = `\nconst itemsOp = require('./routes/itemsOp');\nconst findsOp = require('./routes/finds');\n\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\ndbCon;\n\napp.use('/itemsOp', itemsOp);\napp.use('/finds', findsOp);\n\nconst port = process.env.PORT;\napp.listen(port, () => console.log('Server listening on port.''));`.trim();\n\n\nclass MongoCurd extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>MongoCurd</h3>\n              <b>config/db.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={config}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>models/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={models}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllers}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={server}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Join</h3>\n              <b>models/class.js</b><br/>\n              <b>models/students.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={students}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllers/class.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersClass}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>controllersStudents/students.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersStudents}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>routes/items.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={classRoutes}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <h3>Join_Ref</h3>\n              <b>modelsJoin/finds.js</b><br/>\n              <b>modelsJoin/item.js</b><br/>\n              <b>modelsJoin/itemsOp.js</b><br/>\n              <div style={titles}>\n                <PrismCode\n                  code={modelsJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/finds.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersFinds}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/item.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersItem}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>controllers/itemsOp.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={controllersItemsOp}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>routes/find.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={routesJoin}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br/>\n              <br/>\n\n              <b>server.js</b>\n              <div style={titles}>\n                <PrismCode\n                  code={serverJoinRef}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MongoCurd));\n"],"sourceRoot":""}