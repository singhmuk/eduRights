(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[247],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return d}));var a=t(45),l=t(28),s=t(136),r=t(137),i=t(139),c=t(0),m=t.n(c),o=t(138),u=t.n(o),d=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(s.a)(this,Object(r.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&u.a.highlightElement(t.ref.current)},t.ref=m.a.createRef(),t}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return m.a.createElement("pre",{className:"code-prism"},m.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(m.a.Component))},141:function(e,n,t){},147:function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));var a=t(0),l=t.n(a),s=t(26),r=t(297),i=t(295),c=t(114),m=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function o(){var e=m();return l.a.createElement("div",{className:e.root},l.a.createElement(i.a,null,l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/introPython",className:e.line},"intro Python")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/tuples",className:e.line},"Tuples")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/stringPy",className:e.line},"Strings")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/iteratorsPy",className:e.line},"Iterators")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/json",className:e.line},"Json")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/mathematics",className:e.line},"Mathematics")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/oops_",className:e.line},"Oops")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/abstract",className:e.line},"Abstract")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/exceptionsPy",className:e.line},"ExceptionsHandling")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/pyIntro",className:e.line},"Pickle")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/threadings",className:e.line},"Thread")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/collections",className:e.line},"Collections")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/logging",className:e.line},"Logging")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/regex",className:e.line},"Regex")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/tkinter",className:e.line},"TKinter")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/logicalspy",className:e.line},"Logicals")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/pyLogic",className:e.line},"PyLogic")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/csv",className:e.line},"CsvPython")),l.a.createElement("br",null),"Flask",l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/conroutes",className:e.line},"routes")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/httpsMethods",className:e.line},"Https")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/flasksIn",className:e.line},"Interviews")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/flask_signUp",className:e.line},"Flask_signUp")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/get_search",className:e.line},"Get_Search")),l.a.createElement(r.a,null,l.a.createElement(s.b,{to:"/load_search",className:e.line},"Load_Search"))),l.a.createElement("div",null))}},413:function(e,n,t){"use strict";t.r(n);var a=t(45),l=t(28),s=t(136),r=t(137),i=t(139),c=t(0),m=t.n(c),o=t(138),u=t.n(o),d=t(120),f=t(57),h=t(296),b=t(5),g=(t(141),t(147)),E=t(140),p={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},_="\nclass Test:\n    x=10                                                                //static member varriable\n    def __init__(self,a,b):\n        self.a=a\n        self.b=b\n    def show(self):\n        print(self.a, self.b)\n\nprint(Test.x)                                                           //Static object\nobj = Test(3,4)                                   //Instance object, After creating ins obj, Automatically call __init__\nobj.show()".trim(),y="\n#1\nl=(4,3,5,6,8,0,1,2)                                                               \nprint(sorted(l))\n\n\n#2\nl=[4,3,5,6,8,0,1,2]                                                             \nprint(l.sort())\n".trim(),v="\nclass Items:\n    a=10                                                                  # Static member variables\n    def __init__(self):\n        self.a=1                                                          # InStance member variable\n        y=4                                                               # Local variable\n        Items.b=6                                                         # Static variable\n\n    @staticmethod\n    def f2():\n        Items.d=8                                                         #Static variable\n\n    @classmethod\n    def f3(cls):\n        cls.e=1                                                           #Static variable\n        Items.f=10                                                        #Static variable\n\nItems.g=11                                                                #Static variable\n".trim(),j='\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\np1 = Person("John", 36)\n\nprint(p1.name)\nprint(p1.age)\n\n\n#2\nclass Dog:\n    attr1 = "mammal"\n    attr2 = "dog"\n\n    def fun(self):\n        print("I\'m a", self.attr1)\n        print("I\'m a", self.attr2)\n\nRodger = Dog()\n\nprint(Rodger.attr1)\nRodger.fun()'.trim(),w='class Rectangle:\ndef __init__(self, length, breadth, unit_cost=0):\n    self.length = length\n    self.breadth = breadth\n    self.unit_cost = unit_cost\n    \ndef get_area(self):\n    return self.length * self.breadth\n    \ndef calculate_cost(self):\n    area = self.get_area()\n    return area * self.unit_cost\n\nr = Rectangle(160, 120, 2000)\nprint("%s sq units" % (r.get_area()))\n'.trim(),k="\nclass Person:\n\tdef __init__(self, name):                                        \n\t\tself.name = name\n\n\tdef say_hi(self):\n\t\tprint('Hello, my name is', self.name)\n\np = Person('Nikhil')\np.say_hi()".trim(),P='\nclass Dog:\n    animal = \'dog\'\n\n    def __init__(self, breed, color):\n        self.breed = breed                                                    # Instance Variable\n        self.color = color\n\n\nRodger = Dog("Pug", "brown")\nBuzo = Dog("Bulldog", "black")\n\nprint(\'Rodger is a\', Rodger.animal)\nprint(\'Breed: \', Rodger.breed)\n\nprint(Dog.animal)'.trim(),N="\nclass CSStudent:\n\tstream = 'cse'\n\tdef __init__(self,name,roll):\n\t\tself.name = name\t\t                                                        \n\t\tself.roll = roll\t\t                                                        \n\na = CSStudent('Geek', 1)\nb = CSStudent('Nerd', 2)\n\nprint(a.stream)                                                               \nprint(b.stream)                                                               \nprint(CSStudent.stream)                                       # Class variables can be accessed using class name also\n\na.stream = 'ece'\nprint(a.stream)                                                                   # prints 'ece'\nprint(b.stream)                                                                   # prints 'cse'\n\n  \n# To change the stream for all instances of the class we can change it directly from the class\nCSStudent.stream = 'mech'\n\nprint(a.stream)                                                                   # prints 'mech'\nprint(b.stream)                                                                   # prints 'mech'\n".trim(),S="\nfrom datetime import date\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    @classmethod\n    def fromBirthYear(cls, name, year):\n        return cls(name, date.today().year - year)\n\n    \n    @staticmethod                                                     # Static method to check if a Person is adult or not.\n    def isAdult(age):\n        return age > 18\n\nperson1 = Person('mayank', 21)\nperson2 = Person.fromBirthYear('mayank', 1996)\n\nprint(person1.age)\nprint(Person.isAdult(22))".trim(),C='\nclass GeekforGeeks:\n\tdef __init__(self):                                                                 # default constructor\n\t\tself.geek = "GeekforGeeks"\n\n\tdef print_Geek(self):\n\t\tprint(self.geek)\n\nobj = GeekforGeeks()\nobj.print_Geek()\n\n\n#2 \nclass Addition:\n    first = 0\n    second = 0\n    answer = 0\n    \n    def __init__(self, f, s):                                                           # parameterized constructor\n        self.first = f\n        self.second = s\n\n    def display(self):\n        print("First number = " + str(self.first))\n        print("Second number = " + str(self.second))\n        print("Addition of two numbers = " + str(self.answer))\n\n    def calculate(self):\n        self.answer = self.first + self.second\n\nobj = Addition(1000, 2000)\nobj.calculate()\nobj.display()'.trim(),I="\nclass Employee:\n\tdef __init__(self):\n\t\tprint('Employee created.')\n\n\tdef __del__(self):                                                            \n\t\tprint('Destructor called, Employee deleted.')\n\nobj = Employee()\ndel obj".trim(),A='\nclass Computer:\n\n    def __init__(self):\n        self.__maxprice = 900\n\n    def sell(self):\n        print("Selling Price: {}".format(self.__maxprice))\n\n    def setMaxPrice(self, price):\n        self.__maxprice = price\n\nc = Computer()\nc.sell()\n\nc.__maxprice = 1000\nc.sell()\n\nc.setMaxPrice(1000)                                                                 # using setter function\nc.sell()'.trim(),x="\nclass A:\n    def features(self):\n        print('features1')\n\n    def features2(self):\n        print('features2')\n\nclass B:\n    def features3(self):\n        print('features3')\n    def features4(self):\n        print('features4')\n\nclass C(A,B):\n    def features4(self):\n        print('features5')\n\na1=A()\n# a1.features()\n# a1.features2()\n\nb1=B()\nc1=C()\nc1.features()\n\n\n#2\nclass Person(object):\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\n    def isEmployee(self):\n        return False\n\n\nclass Employee(Person):\n    def isEmployee(self):\n        return True\n\nemp = Person(\"Geek1\")\nprint(emp.getName(), emp.isEmployee())\n\nemp = Employee(\"Geek2\")\nprint(emp.getName(), emp.isEmployee())".trim(),D='\nclass Base1(object):\n    def __init__(self):\n        self.str1 = "Geek1"\n        print("Base1")\n\nclass Base2(object):\n    def __init__(self):\n        self.str2 = "Geek2"\n        print("Base2")\n\nclass Derived(Base1, Base2):\n    def __init__(self):\n        Base1.__init__(self)\n        Base2.__init__(self)\n        print("Derived")\n\n    def printStrs(self):\n        print(self.str1, self.str2)\n\nob = Derived()\nob.printStrs()'.trim(),B='\nclass Base(object):\n\n    def __init__(self, name):\n        self.name = name\n    def getName(self):\n        return self.name\n\n\nclass Child(Base):\n    def __init__(self, name, age):\n        Base.__init__(self, name)\n        self.age = age\n    def getAge(self):\n        return self.age\n\n\nclass GrandChild(Child):\n    def __init__(self, name, age, address):\n        Child.__init__(self, name, age)\n        self.address = address\n\n    def getAddress(self):\n        return self.address\n\ng = GrandChild("Geek1", 23, "Noida")\nprint(g.getName(), g.getAge(), g.getAddress())'.trim(),T="\nclass C(object):\n\tdef __init__(self):\n\t\tself.c = 21\n\t\tself.d = 42\n    \nclass D(C):\n\tdef __init__(self):\n\t\tself.e = 84\n\t\tC.__init__(self)\nobject1 = D()\n\nprint(object1.d)".trim(),G='\nclass Animal:\n    multicellular = True\n    eukaryotic = True\n\n    def breathe(self):\n        print("I breathe oxygen.")\n\n    def feed(self):\n        print("I eat food.")\n\n\nclass Herbivorous(Animal):\n\n    def feed(self):\n        print("I eat only plants. I am vegetarian.")\n\n\nherbi = Herbivorous()\nherbi.feed()\nherbi.breathe()'.trim(),H='\ndef add(x, y, z = 0):\n\treturn x + y+z\n\nprint(add(2, 3))\nprint(add(2, 3, 4))\n\n\n#2\nclass India():\n\tdef capital(self):\n\t\tprint("New Delhi")\n\n\tdef language(self):\n\t\tprint("Hindi")\n\n\tdef type(self):\n\t\tprint("India")\n\nclass USA():\n\tdef capital(self):\n\t\tprint("Washington")\n\n\tdef language(self):\n\t\tprint("English")\n\n\tdef type(self):\n\t\tprint("USA")\n\nobj_ind = India()\nobj_usa = USA()\nfor country in (obj_ind, obj_usa):\n\tcountry.capital()\n\tcountry.language()\n\tcountry.type()\n\n\n\n\n#3\nclass Parrot:\n    def fly(self):\n        print("Parrot can fly")\n\n    def swim(self):\n        print("Parrot can\'t swim")\n\n\nclass Penguin:\n    def fly(self):\n        print("Penguin can\'t fly")\n\n    def swim(self):\n        print("Penguin can swim")\n\n\ndef flying_test(bird):                                                              # common interface\n    bird.fly()\n\nblu = Parrot()                                                                      # instantiate objects\npeggy = Penguin()\n\nflying_test(blu)                                                                    # passing the object\nflying_test(peggy)\n'.trim(),O=function(e){function n(){return Object(a.a)(this,n),Object(s.a)(this,Object(r.a)(n).apply(this,arguments))}return Object(i.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return m.a.createElement(d.a,{container:!0},m.a.createElement(d.a,{item:!0,xs:2},m.a.createElement(f.a,{className:e.paper},m.a.createElement("h4",null,m.a.createElement(g.a,null)))),m.a.createElement(d.a,{item:!0,xs:10},m.a.createElement(f.a,{className:e.paper},m.a.createElement(h.a,null,m.a.createElement("h3",null,"Objects"),"We can create one class object and many instance object. Class object has static member varriables.",m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:_,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Difference between sorted and sort function."),m.a.createElement("ul",null,m.a.createElement("li",null,m.a.createElement("b",null,"sort(): "),"Alwase apply on list and return None. sort() do changes on original list."),m.a.createElement("li",null,m.a.createElement("b",null,"sorted(): "),"Alwase return list even pass tuples/ string.")),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:y,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"How memory managed in Python"),m.a.createElement("ul",null,m.a.createElement("li",null,m.a.createElement("b",null,"Stack Memory: "),"Have refrences"),m.a.createElement("li",null,m.a.createElement("b",null,"Private Heap Space: "),"Have Id of declared values, Objects stored here.")),m.a.createElement("br",null),m.a.createElement("h3",null,"How to create static member variables in class"),m.a.createElement("ul",null,m.a.createElement("li",null,"Python don't have static keyword."),m.a.createElement("li",null,"Static variable get mempry inside class objects.")),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:v,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"classes"),m.a.createElement("ul",null,m.a.createElement("li",null,"The __init__() function is called automatically every time the class is being used to  create a new object."),m.a.createElement("li",null,"Create a class named Person, use the __init__() function to assign values for name and age."),m.a.createElement("li",null,"The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.")),m.a.createElement("br",null),m.a.createElement("b",null,"The self"),m.a.createElement("ul",null,m.a.createElement("li",null,"Class methods must have an extra first parameter in the method definition. We do not give a value for this parameter when we call the method, Python provides it."),m.a.createElement("li",null,"If we have a method that takes no arguments, then we still to have one argument."),m.a.createElement("li",null,"When we call a method of this object as myobject.method(arg1, arg2), this is automatically converted by Python into MyClass.method(myobject, arg1, arg2) \u2013 this is all the special self is about.")),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:j,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("b",null,"What is __init__  & self in Python?"),m.a.createElement("br",null),"'self' is used to represent the instance of a class. By using the \"self\" keyword we access the attributes and methods of the class in python.",m.a.createElement("br",null),m.a.createElement("b",null,"__init__ method: "),"This method is called when an object is created from a class and it allows the class to initialize the attributes of the class.",m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:w,language:"js",plugins:["line-numbers"]})),m.a.createElement("h3",null,"__init__ method"),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:k,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Class and Instance Variables"),m.a.createElement("ul",null,m.a.createElement("li",null,m.a.createElement("b",null,"Instance variables: ")),m.a.createElement("ul",null,m.a.createElement("li",null,"Instance variables are for data, unique to each instance."),m.a.createElement("li",null,"Instance variables are variables whose value is assigned inside a constructor/ method with self."),m.a.createElement("li",null,"Defining instance variable using a constructor. ")),m.a.createElement("br",null),m.a.createElement("li",null,m.a.createElement("b",null,"class variables: ")),m.a.createElement("ul",null,m.a.createElement("li",null,"class variables are for attributes and methods shared by all instances of the class."),m.a.createElement("li",null,"class variables are variables whose value is assigned in the class."))),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:P,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Class or Static Variables"),m.a.createElement("ul",null,m.a.createElement("li",null,"All variables which are assigned a value in the class declaration are class variables."),m.a.createElement("li",null,"And variables that are assigned values inside methods are instance variables.")),m.a.createElement("br",null),m.a.createElement("b",null,"class method vs static method"),m.a.createElement("ul",null,m.a.createElement("li",null,"A static method does not receive an implicit first argument."),m.a.createElement("li",null,"A static method is also a method which is bound to the class and not the object of the class."),m.a.createElement("li",null,"A static method can\u2019t access/ modify class state.")),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:N,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"How to define a class method and a static method?"),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:S,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Constructors"),"Constructors are generally used for instantiating an object.The task of constructors is to initialize(assign values) to the data members of the class when an object of class is created.In Python the __init__() method is called the constructor and is always called when an object is created.",m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("ul",null,m.a.createElement("li",null,m.a.createElement("b",null,"default constructor :"),"The default constructor is simple constructor which doesn\u2019t accept any arguments.It\u2019s definition has only one argument which is a reference to the instance being constructed."),m.a.createElement("li",null,m.a.createElement("b",null,"parameterized constructor :"),"The parameterized constructor take its first argument as a reference to the instance being constructed known as self and the rest of the arguments are provided by the programmer.")),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:C,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Destructors"),m.a.createElement("ul",null,m.a.createElement("li",null,"Destructors are called when an object gets destroyed. In Python, destructors are not needed because Python has a garbage collector that handles memory management automatically."),m.a.createElement("li",null,"The ",m.a.createElement("b",null,"__del__()")," method is called when all references to the object have been deleted.")),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:I,language:"js",plugins:["line-numbers"]})),m.a.createElement("b",null,"Note :"),"The destructor was called after the program ended or when all the references to object are deleted.",m.a.createElement("br",null),m.a.createElement("h3",null,"Encapsulation"),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:A,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Inherritance"),m.a.createElement("ul",null,m.a.createElement("li",null,m.a.createElement("b",null,"Single inheritance:  "),"A class inherits only one superclass"),m.a.createElement("li",null,m.a.createElement("b",null,"Multiple inheritance: "),"When a class inherits multiple superclasses"),m.a.createElement("li",null,m.a.createElement("b",null,"Multilevel inheritance: "),"When a class inherits a superclass and then another class inherits this derived class forming a \u2018parent, child, and grandchild\u2019 class structure"),m.a.createElement("li",null,m.a.createElement("b",null,"Hierarchical inheritance: "),"When one superclass is inherited by multiple derived classes")),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:x,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Multiple inheritance"),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:D,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Multilevel inheritance"),"When we have a child and grandchild relationship.",m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:B,language:"js",plugins:["line-numbers"]})),m.a.createElement("ul",null,m.a.createElement("li",null,m.a.createElement("b",null,"Hierarchical inheritance :"),"Hierarchical inheritance More than one derived classes are created from a single base."),m.a.createElement("li",null,m.a.createElement("b",null,"Hybrid inheritance :"),"This form combines more than one form of inheritance. Basically, it is a blend of more than one type of inheritance.")),m.a.createElement("br",null),m.a.createElement("h3",null,"Private members of parent class "),"We can make an instance variable by adding double underscores before its name.",m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:T,language:"js",plugins:["line-numbers"]})),m.a.createElement("b",null,"Note :"),"Since \u2018d\u2019 is made private by those underscores, it is not available to the child class \u2018D\u2019 and hence the error.",m.a.createElement("br",null),m.a.createElement("h3",null,"Overriding Methods"),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:G,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Polymorphism"),m.a.createElement("div",{style:p},m.a.createElement(E.a,{code:H,language:"js",plugins:["line-numbers"]}))))))}}]),n}(c.Component);n.default=Object(b.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(O)}}]);
//# sourceMappingURL=247.0d039e47.chunk.js.map