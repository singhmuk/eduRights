{"version":3,"sources":["components/ReactJs/prismCode.js","components/mern/sidebar.js","components/mern/projects/javaScript.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","item","routesItem","logic","Logic_2","Logic_3","MernLoic","setTimeout","highlightAll","container","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/170.6f8bf4e0.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/setUpFiles' className={classes.line}>SetUp</Link></MenuItem>\n        <MenuItem><Link to='/javaScript' className={classes.line}>JavaScript</Link></MenuItem>\n        <MenuItem><Link to='/reactCurdMern' className={classes.line}>Mern React</Link></MenuItem>\n        <MenuItem><Link to='/4_reactCurdHooks' className={classes.line}>Mern React Hooks</Link></MenuItem>\n        <MenuItem><Link to='/pagination' className={classes.line}>Sea Sort Pagi Auth_Token</Link></MenuItem>\n        <MenuItem><Link to='/propsModel' className={classes.line}>SS pagination-Captcha</Link></MenuItem>\n        <MenuItem><Link to='/imageGallery' className={classes.line}>ImageGallery</Link></MenuItem>\n        <MenuItem><Link to='/stripes' className={classes.line}>Stripes-Signin with gfb</Link></MenuItem>\n        <MenuItem><Link to='/paginationsMern' className={classes.line}>Paginations-push_notifis</Link></MenuItem>\n        <MenuItem><Link to='/googleMap' className={classes.line}>GoogleMap</Link></MenuItem>\n        <MenuItem><Link to='/videoChat' className={classes.line}>VideoChat</Link></MenuItem>\n        <MenuItem><Link to='/qrSccaners' className={classes.line}>QrCode-reCapcha</Link></MenuItem>\n        <MenuItem><Link to='/react_share' className={classes.line}>Share-Stripe</Link></MenuItem>\n        <MenuItem><Link to='/socialSignUp' className={classes.line}>SocialSignUp</Link></MenuItem>\n        <MenuItem><Link to='/mernSocial' className={classes.line}>MernSocial</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst item = `\n// Create Schema\nconst ItemSchema = new Schema({\n  name: {type: String, required: true},\n  username: {type: String, required: true},\n  email: {type: String, required: true},\n  date: {type: Date, default: Date.now},\n  \n  address: [{\n    street: {type: String, required: true},\n    suite: {type: String, required: true},\n    city: {type: String, required: true},\n    zipcode: {type: Number, required: true},\n    \n    geo: [{\n      lat: {type: Number },\n      lng: {type: Number }\n    }]\n  }],\n  \n  phone: {type: Number, required: true},\n  website: {type: String },\n  company: [{\n    name: {type: String, required: true},\n    catchPhrase: {type: String, required: true},\n    bs: {type: String, required: true},\n  }],\n  \n  Phone_Numbers: [{\n    Home_Phone: { type: Number },\n    Work_Phone: { type: Number },\n    Cell_Phone: { type: Number },\n    \n    Phone_verified: [{ \n      Home: { type: Boolean },\n      Work: { type: Boolean },\n      Cell: { type: Boolean }\n                  }],\n              }],\n});\n\nmodule.exports = Item = mongoose.model('item', ItemSchema);\n`.trim();\n\nconst routesItem = `\nconst Item = require('../models/item');\n\nrouter.get('/', (req, res) => {\n  Item.find()\n    .sort({ date: -1 })\n    .then(items => { \n      res.json(items);\n    console.log('dddddd',items)\n    }) \n});\n\nrouter.get('/:id', (req, res) => {\n  Item.findById(req.params.id)\n    .sort({ date: -1 })\n    .then(items => res.json(items));\n});\n\nrouter.post('/', (req, res) => {\n  const newItem = new Item({\n    name: req.body.name,\n    username: req.body.username,\n    email: req.body.email,\n    address: req.body.address,\n    geo: req.body.geo,\n    phone: req.body.phone,\n    website: req.body.website,\n    company: req.body.company,\n    Phone_Numbers: req.body.Phone_Numbers,\n    Phone_verified: req.body.Phone_verified,\n  });\n\n  newItem.save().then(item => res.json(item));\n});\n\nrouter.put('/:id', (req, res) => {\n  Item.findByIdAndUpdate(req.params.id, {\n    name:req.body.name,\n  }, {new: true}).then(data => {res.send(data)})\n})\n\nrouter.delete('/:id', (req, res) => {\n  Item.findById(req.params.id)\n    .then(item => item.remove().then(() => res.json({ success: true })))\n    .catch(err => res.status(404).json({ success: false }));\n});\n\n\n//postman\n{ \n   \"name\": \"Leanne Graham\",\n    \"username\":\"Bret\",\n    \"email\":\"Sincere@gmail.com\",\n    \"address\":[{\"street\":\"Kulas Light\",\"suite\":\"Apt. 556\",\"city\":\"Gwenborough\",\"zipcode\":\"929980\"}],\n    \"geo\":[{\"lat\":\"-37.3159\",\"lng\":\"81.1496\"}],\n    \"phone\":\"1234567890\",\n    \"website\":\"hildegard.org\",\n    \"company\":[{\"name\":\"Romaguera-Crona\", \"catchPhrase\":\"Multi-layered client-server neural-net\",\n                \"bs\":\"harness real-time e-markets\"}],\n    \"Phone_Numbers\":[{\"Home_Phone\":\"123\",\"Work_Phone\":\"456\",\"Cell_Phone\":\"7890\"}],\n    \"Phone_verified\":[{\"Home\":\"true\",\"Work\":\"true\",\"Cell\":\"true\"}]\n}\n`.trim();\n\nconst logic = `\nconst Logic = () => {\n  const [ mockData, setmockData ] = useState([])\n  const [ mainId ] = useState('5fdb0a046ef19d3384a42f69')\n  const [ subParameters ] = useState([])\n  const [ city ] = useState('South Christy')\n  const [ matchingData ] = useState([])\n  const [ name ] = useState('Clementina DuBuque')\n  var [ tempObj ] = useState([])\n  var [ sum ] = useState(0)\n  var [ avg ] = useState(0)\n  var [ arrayMet, setArrayMet ] = useState([])\n\nuseEffect(() => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n  \n  for(var i = 0; i < mockData.length; i++){\n      // console.log('api data in the loop',mockData[i])\n      if(mainId === mockData[i]._id){\n          // console.log('only match id',mockData[i]._id)\n          \n          mockData.map(val => {\n              if(city.indexOf(val.name)===-1){\n                  // console.log('only unique user city',val.address)\n                  val.address.map(valCity => {\n                      subParameters.push(valCity.city)\n                      // console.log('Push city name in subParameters',subParameters)\n                      \n                      let newObj={\"id\":val._id, \"name\":val.name,'value':[]}\n                      newObj = newObj.value.push(valCity.city)\n                      // console.log('Push city name in new created object',newObj)\n                      \n                      var index=subParameters.indexOf(valCity._id)\n                      // console.log('index value',index,\":\",valCity._id)\n                      \n                      // subParameters[index].value = subParameters[index].concat(valCity._id)\n                      // console.log('index value',subParameters[index].value)\n                      \n                      if((valCity._id === mainId || valCity._id === mockData._id)){\n                          // console.log('matching hard coded value: ',valCity._id,\"=\",mockData._ids,\":\",mainId);\n                          matchingData=matchingData.concat(valCity._id);\n                          // console.log('matching values: ',matchingData)\n                      }\n                  })\n              }\n              else{\n                  var index=subParameters.indexOf(val.phone)\n                  subParameters[index].value = subParameters[index].value.concat(val.id)\n                  // console.log('else values: ',subParameters)\n                  }\n              })\n          }\n      }\n })\n//    console.log('concate city names in the array',subParameters)\n  addData();\n  pickRecord();\n  SumAverage();\n  extractKey();\n  arrayMethod();\n},[])\n\n\n//Add data in empty array from api values\nconst addData = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n  mockData.map(add => {\n      mockData.push(add.name)\n      \n      if(add.name === name){\n          for(let i=0; i<=mockData.length; i++){\n              // console.log('Matched name',add.name)\n          }\n      }\n    })\n  })  \n}\n\n\n//Pick a record from list\nconst pickRecord = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n     mockData.map(pickRec => {\n      if(pickRec._id === mainId){\n          mockData.push(pickRec.email);\n      }\n      \n  // apiId = mockData.push(pickRec);\n  if(pickRec.name === name){\n      for(let i=0; i<=mockData[i].length; i++){\n         let obj = [];\n         obj.push(mockData.name)\n          console.log('matching values',obj)\n          }\n      }\n     })\n  })\n}\n\n\n//Add sum/avg of number from a list\nconst SumAverage = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var mockData= res.data\n     setmockData(res.data)\n     \n     mockData.map(fields => {\n      tempObj.push(fields._id) \n     })\n     for(let i =0; i<=tempObj.length;i++){\n      sum +=tempObj[i];\n      avg = sum/tempObj.length\n      // console.log('sum',sum)\n      }\n  })\n  \n  //Flattening an array of arrays\n  const nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n  let flat = nested.reduce((acc, it) => [...acc, ...it], []);\n  let sumOfArray = flat.reduce((a, b) => a+b)\n}\n\n\n//Extract key/value pair from an object\nconst extractKey = () => {\n  var data = \n         [\n          {label:1, quater :'Q1', y:34},\n          {label:2, quater:'Q1', y:20},\n          {label:3, quater:'Q1', y:30},\n   \n          {label:1, quater:'Q2', y:77},\n          {label:2, quater:'Q2', y:52},\n          {label:3, quater:'Q2', y:3},\n   \n          {label:1, quater:'Q3', y:65},\n          {label:2, quater:'Q3', y:12},\n          {label:3, quater:'Q3', y:9},\n   \n          {label:1, quater:'Q4', y:77},\n          {label:2, quater:'Q4', y:34},\n          {label:3, quater:'Q4', y:5}\n         ];\n         \n var quartersum = {}\n data.map(function(entry) {\n   quartersum[entry.label] = (quartersum[entry.label]||0) + entry.y\n })\n \n data.map(function(entry) {\n   entry.percent = entry.y / quartersum[entry.label] * 100;\n  //  console.log(JSON.stringify(entry))\n })\n \n \n    for(let [key, value] of Object.entries(quartersum)){\n         console.log('extract object property',key, value);\n    }\n    var percentage = parseInt((sum * 100/quartersum.length));\n     console.log('percentage',percentage);\n}\n\n\n//Array methods\nconst arrayMethod = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var arrayMeth= res.data\n     setArrayMet(res.data)\n     \n     arrayMeth.map(data => {\n      arrayMet.push(data._id)\n     })\n     \n     let scores = arrayMet.find(element => element > 4);\n     let filterScores = arrayMet.filter(element => element > 4);\n     let joinArr = filterScores.join(\"*\");\n     let spliceArr = filterScores.splice(0,2)\n     let concatArr = filterScores.concat(scores,joinArr,\"100\");\n     \n  \n     //The slice() method slices out a piece of an array into a new array.\n     let sliceArr = filterScores.slice(0,2);\n     let toStringArr = arrayMet.toString()\n     let position = filterScores.indexOf(8)\n     \n     \n     //The includes() method determines whether an array contains a specified element.\n     let includeArr = filterScores.includes(10)\n  //    console.log('find',includeArr)\n  })\n}\n\n    return(\n        <div>\n            {mockData.map((data,i) => (\n                <li key={i}>{data.name}\n                </li>\n            ))}\n        </div>\n    )\n}\n\nexport default Logic;\n`.trim();\n\nconst Logic_2 = `\nconst Logic_2 = () => {\n  const [ mockData, setmockData ] = useState([]);\n  const [ mockData2 ] = useState([\"Glenna Reicher\", \"Kurtis Weissnat\", \"Ervin Howell\",\"Leanne Graham\"]);\n  const [ commonElements ] = useState([]);\n  var [ str ] = useState('');\n  var [ str2 ] = useState('');\n  var [ dict ] = useState({});\n  var [ obj ] = useState({});\n  var [ objKey ] = useState([]);\n  var [ arr ] = useState([]);\n  var [ personEmail ] = useState([]);\n\nuseEffect(() => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n       mockData.push(val.name)\n     })\n     \n     var common = mockData.filter(item=>{\n      return mockData2.includes(item)\n  })\n  for(var i=0; i<=common.length; i++){\n    commonElements.push(common[i])\n    }\n })\n \n commChar();\n arrToObj();\n objTOArr();\n allSum();\n displayDot();\n matchName();\n},[])\n\n\n//Common element in strings\nconst commChar = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n      str=val.name;\n      str2=val.username;\n       })\n       \n       for(var i=0; i < str.length; i++) {\n        dict[str.charAt(i)] = 1;\n      }\n      // console.log('str',dict);\n      \n      var commonChars =[];\n    for(var i=0; i < str2.length; i++) {\n      if( dict[str2.charAt(i)] == 1) {\n        commonChars.push(str2.charAt(i)); // this is optional we can simply print\n      }\n      // console.log('str2',commonChars);  \n\n    }\n    \n    dict = commonChars.join(\"\"); \n     })\n}\n\n\n//convert an Array to Object\nconst arrToObj = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  })\n}\n\n\n//convert an Object to Array\nconst objTOArr = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     person.map(val => {\n      obj=val\n     })\n     \n     //Convert the keys to Array using - Object.keys()\n     objKey = Object.keys(obj)\n\n     //Converts the Values to Array using - Object.values()\n     const objVal = Object.values(obj)\n\n     //Converts both keys and values using - Object.entries()\n     const objAll = Object.entries(obj)\n    //  console.log('objAll',objAll)\n  })\n}\n\n\n//Sum of all elements of a given array\nconst allSum = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     person.map(val=>{\n      arr.push(val._id);\n  })\n  var sum = arr.reduce((a, i) => {\n    return a + i;\n    });\n  })\n}\n\n\n//Dispay dot value  \nconst displayDot = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     person.map(val=>{\n      personEmail.push(val.email);\n    })\n  })\n}\n\n\n//Last match name\nconst matchName = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n     \n     const mockData = [];\n     const names = [];\n     const apiId = '5fdb0a616ef19d3384a42f75';\n     person.map(val=>{\n      mockData.push(val._id);\n      \n      if(val._id == apiId){\n        names.push(val.name)\n        for(let i=0; i<=names.length; i++){\n          }\n       }\n    })\n  })\n}\n\n    return(\n        <div>\n            {mockData.map((data,i) => (\n                <li key={i}>{data.name}\n                </li>\n            ))}\n        </div>\n    )\n}\n\nexport default Logic_2;\n`.trim();\n\nconst Logic_3 = `\nconst Logic_3 = () => {\n  var [ mockData, setmockData ] = useState([]);\n  var [ num ] = useState();\n\nuseEffect(() => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n       mockData.push(val._id)\n       num = Number(mockData[0])\n     })\n   })\n \n   arrayFun();\n},[])\n\n\nconst arrayFun = () => {\n  axios.get(\"/item\")\n  .then(res => {\n     var person= res.data\n     setmockData(res.data)\n  \n     person.map(val => {\n       mockData.push(val._id)\n     })\n\n     const len = mockData.length;   \n     const sorting = mockData.sort();\n     const z = mockData[mockData.length - 1]\n     const joins = mockData.join('*')\n     const firstVal = mockData[0] = \"cars\"\n     const deleteFirst = delete mockData[0];  \n     const spliceArr = mockData.splice(2, 0, \"Lemon\", \"Kiwi\");\n     const sliceArr = mockData.slice(1);\n     \n     console.log(len,'-',sorting,'-',z,'-',joins,'-',firstVal,'-',deleteFirst,'-',spliceArr,'-',sliceArr);\n   })\n}  \n\n    return(\n        <div>\n            {mockData.map((data,i) => (\n                <li key={i}>{data.name}\n                </li>\n            ))}\n        </div>\n    )\n}\n\nexport default Logic_3;\n`.trim();\n\n\n\nclass MernLoic extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Logic</h3>\n      model/item.js\n      <div style={titles}>\n                <PrismCode\n                  code={item}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n      routes/item.js\n      <div style={titles}>\n                <PrismCode\n                  code={routesItem}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Logic</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={logic}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Logic 2</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Logic_2}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <h3>Logic 3</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={Logic_3}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\nexport default (withStyles(styles)(MernLoic));\n"],"sourceRoot":""}