(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[43],{140:function(e,a,t){"use strict";t.d(a,"a",(function(){return p}));var n=t(45),l=t(28),r=t(136),i=t(137),s=t(139),c=t(0),m=t.n(c),o=t(138),u=t.n(o),p=(t(59),function(e){function a(e){var t;return Object(n.a)(this,a),(t=Object(r.a)(this,Object(i.a)(a).call(this,e))).highlight=function(){t.ref&&t.ref.current&&u.a.highlightElement(t.ref.current)},t.ref=m.a.createRef(),t}return Object(s.a)(a,e),Object(l.a)(a,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,a=e.code,t=(e.plugins,e.language);return m.a.createElement("pre",{className:"code-prism"},m.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},a.trim()))}}]),a}(m.a.Component))},141:function(e,a,t){},150:function(e,a,t){"use strict";t.d(a,"a",(function(){return o}));var n=t(0),l=t.n(n),r=t(26),i=t(297),s=t(295),c=t(114),m=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function o(){var e=m();return l.a.createElement("div",{className:e.root},l.a.createElement(s.a,null,l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/introAngular",className:e.line},"AI")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/tensorflow",className:e.line},"Tensorflow")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/tensors",className:e.line},"Tensorboards")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/angCompiler",className:e.line},"Compiler")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/neural",className:e.line},"NeuralKeras")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/activationFunctions",className:e.line},"activationFuncs")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/loss",className:e.line},"Loss")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/gradientNeural",className:e.line},"GradientNeural")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/stochastic",className:e.line},"Stochastic")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/benchmarking",className:e.line},"Benchmarking")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/customer",className:e.line},"Customer")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/regularizationDeep",className:e.line},"Regularization Deep")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/imbalanced",className:e.line},"Imbalanced")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/imbalanced2",className:e.line},"Imbalanced2")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/convolutionals",className:e.line},"Convolutionals")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/data_augmentation",className:e.line},"data Augmentation")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/transfer",className:e.line},"Transfer")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/word_embedding",className:e.line},"Embedding")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/datatypests",className:e.line},"Datatypes")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/typeScript_2",className:e.line},"TS Function")),l.a.createElement(i.a,null,l.a.createElement(r.b,{to:"/typeScript_4",className:e.line},"Type Assertion"))),l.a.createElement("div",null))}},199:function(e,a,t){e.exports=t.p+"static/media/digits_nn.8352510e.jpg"},452:function(e,a,t){"use strict";t.r(a);var n=t(45),l=t(28),r=t(136),i=t(137),s=t(139),c=t(0),m=t.n(c),o=t(138),u=t.n(o),p=t(120),d=t(57),E=t(296),h=t(5),g=(t(141),t(150)),b=t(140),f=t(199),_=t.n(f),y={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},v={height:200,width:500},N="\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\n\n(X_train, y_train) , (X_test, y_test) = keras.datasets.mnist.load_data()\nX_train[0].shape\nplt.matshow(X_train[0])\n\nX_train = X_train / 255\nX_test = X_test / 255\n\nX_train_flattened = X_train.reshape(len(X_train), 28*28)\nX_test_flattened = X_test.reshape(len(X_test), 28*28)\n\nX_train_flattened.shape\nX_train_flattened[0]\n".trim(),k="\nmodel = keras.Sequential([keras.layers.Dense(10, input_shape=(784,), activation='sigmoid')])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_flattened, y_train, epochs=5)\n\nmodel.evaluate(X_test_flattened, y_test)\ny_predicted = model.predict(X_test_flattened)\n\nplt.matshow(X_test[0])\n".trim(),X="\nimport seaborn as sn\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')\n".trim(),w="\nmodel = keras.Sequential([\n  keras.layers.Dense(100, input_shape=(784,), activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(X_train_flattened, y_train, epochs=5)\nmodel.evaluate(X_test_flattened,y_test)\n\ny_predicted = model.predict(X_test_flattened)\ny_predicted_labels = [np.argmax(i) for i in y_predicted]\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')\n".trim(),j="\nmodel = keras.Sequential([\n  keras.layers.Flatten(input_shape=(28, 28)),\n  keras.layers.Dense(100, activation='relu'),\n  keras.layers.Dense(10, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam',\n            loss='sparse_categorical_crossentropy',\n            metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=10)\n\n\nmodel.evaluate(X_test,y_test)\n".trim(),x=function(e){function a(){return Object(n.a)(this,a),Object(r.a)(this,Object(i.a)(a).apply(this,arguments))}return Object(s.a)(a,e),Object(l.a)(a,[{key:"componentDidMount",value:function(){setTimeout((function(){return u.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return m.a.createElement(p.a,{container:!0},m.a.createElement(p.a,{item:!0,xs:2},m.a.createElement(d.a,{className:e.paper},m.a.createElement("h4",null,m.a.createElement(g.a,null)))),m.a.createElement(p.a,{item:!0,xs:10},m.a.createElement(d.a,{className:e.paper},m.a.createElement(E.a,null,m.a.createElement("h3",null,"Handwritten digits classification using neural network"),m.a.createElement("b",null,"we will classify handwritten digits using a simple neural network which has only input and output layers. We will than add a hidden layer and see how the performance of the model improves"),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("div",{style:y},m.a.createElement(b.a,{code:N,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Very simple neural network with no hidden layers"),m.a.createElement("img",{src:_.a,alt:"Theata",className:"responsive2",style:v}),m.a.createElement("br",null),m.a.createElement("br",null),m.a.createElement("div",{style:y},m.a.createElement(b.a,{code:k,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Seaborn"),m.a.createElement("ul",null,m.a.createElement("li",null,"Seaborn library used for making statistical graphics in Python. It builds on top of matplotlib and integrates with pandas data structures."),m.a.createElement("li",null,"Seaborn helps to explore and understand our data.")),m.a.createElement("br",null),m.a.createElement("div",{style:y},m.a.createElement(b.a,{code:X,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Using hidden layer"),m.a.createElement("div",{style:y},m.a.createElement(b.a,{code:w,language:"js",plugins:["line-numbers"]})),m.a.createElement("br",null),m.a.createElement("h3",null,"Using Flatten layer so that we don't have to call .reshape on input dataset"),m.a.createElement("div",{style:y},m.a.createElement(b.a,{code:j,language:"js",plugins:["line-numbers"]}))))))}}]),a}(c.Component);a.default=Object(h.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(x)}}]);
//# sourceMappingURL=43.b6fbe1b0.chunk.js.map