(this["webpackJsonpmern-stack-client"]=this["webpackJsonpmern-stack-client"]||[]).push([[125],{140:function(e,n,t){"use strict";t.d(n,"a",(function(){return b}));var a=t(45),r=t(28),l=t(136),o=t(137),s=t(139),c=t(0),i=t.n(c),u=t(138),m=t.n(u),b=(t(59),function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(l.a)(this,Object(o.a)(n).call(this,e))).highlight=function(){t.ref&&t.ref.current&&m.a.highlightElement(t.ref.current)},t.ref=i.a.createRef(),t}return Object(s.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){this.highlight()}},{key:"componentDidUpdate",value:function(){this.highlight()}},{key:"render",value:function(){var e=this.props,n=e.code,t=(e.plugins,e.language);return i.a.createElement("pre",{className:"code-prism"},i.a.createElement("code",{ref:this.ref,className:"language-".concat(t)},n.trim()))}}]),n}(i.a.Component))},141:function(e,n,t){},145:function(e,n,t){"use strict";t.d(n,"a",(function(){return u}));var a=t(0),r=t.n(a),l=t(26),o=t(297),s=t(295),c=t(114),i=Object(c.a)((function(e){return{root:{display:"flex"},paper:{marginRight:e.spacing(2)},line:{textDecoration:"none"}}}));function u(){var e=i();return r.a.createElement("div",{className:e.root},r.a.createElement(s.a,null,r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/apiLogic3",className:e.line},"new updated")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/ngRepeat",className:e.line},"NgRepeat")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/ngModel",className:e.line},"ng-model")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/scope",className:e.line},"Scope")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/filter",className:e.line},"Events")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/directives",className:e.line},"Directives")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/angularConditions",className:e.line},"Condition")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/angularlFlters",className:e.line},"Fiters")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/services",className:e.line},"Services")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/validations",className:e.line},"Validations")),r.a.createElement("p",null,"Angular 12"),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/introAngularjs",className:e.line},"Intro")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/flows",className:e.line},"Interviews")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/angularDir2",className:e.line},"Architecture")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/metedata",className:e.line},"MetaData")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/ngFor",className:e.line},"NgFor")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/pipes",className:e.line},"Pipes")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/anguRoutes",className:e.line},"Routes")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/lifeCycleAng",className:e.line},"LifeCycle")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/angularSelector",className:e.line},"Change Detection")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/angularDir",className:e.line},"Custom Elements")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/viewProvider",className:e.line},"ViewProvider")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/dynamicallyLoad",className:e.line},"DynamicallyLoad")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/rxjs",className:e.line},"Rxjs")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/ngrxCurd",className:e.line},"Ngrx")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/ngrxCounter",className:e.line},"NgrxCounter")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/projection",className:e.line},"Pro-Input-Output-Iterates-",r.a.createElement("br",null),"IncrDecr-Toggle-keyIn-If")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/angularCurd",className:e.line},"Curd")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/filterPlace",className:e.line},"FilterPlace-get-live-",r.a.createElement("br",null),"Agree-NoName-Excel")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/radioButton",className:e.line},"Radio-s/h-add-",r.a.createElement("br",null),"version-Launch-Font")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/multiCheck",className:e.line},"MultiSel-MultiCheck")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/services12",className:e.line},"Services")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/dropdownsAngu",className:e.line},"pick-ddSelectData")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/vote",className:e.line},"Vote")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/debounce",className:e.line},"Debounce")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/loader",className:e.line},"Loader")),r.a.createElement(o.a,null,r.a.createElement(l.b,{to:"/paginations",className:e.line},"Paginations"))),r.a.createElement("div",null))}},500:function(e,n,t){"use strict";t.r(n);var a=t(45),r=t(28),l=t(136),o=t(137),s=t(139),c=t(0),i=t.n(c),u=t(138),m=t.n(u),b=t(120),v=t(57),p=t(296),d=t(5),g=(t(141),t(145)),E=t(140),f={backgroundColor:"#F0F8FF",padding:"1px",fontSize:"16px"},h="\n//html\n<html>\n  <script src=\"https://unpkg.com/@reactivex/rxjs@5.3.0/dist/global/Rx.js\"><\/script>\n  <body>\n    <button>Click me</button>\n    <script src=\"app.js\"><\/script>\n  </body>\n</html>\n\n\n//js\ndocument.addEventListener('click', (event) => console.log(event));\n\n\n//2\nvar button = document.querySelector('button');\n\nRx.Observable.fromEvent(button, 'click')\n  .subscribe(\n    (value) => console.log(value.clientX)\n  );\n".trim(),x=("\n\n".trim(),"\nvar button = document.querySelector('button');\n\nvar observer = {\n  next: function (value) {\n    console.log(value);\n  },\n  error: function (error) {\n    console.log(error);\n  },\n  complete: function () {\n    console.log('Completed');\n  }\n};\n\n//Rx.Observable.fromEvent(button, 'click')\nvar subscription = Rx.Observable.create(function (obs) {\n  //obs.next('A value');\n  //obs.error('Error');\n  //setTimeout(function() {\n  //\tobs.complete();\n  //  obs.next('A second value');\n  //}, 2000);\n  button.onclick = function (event) {\n    obs.next(event);\n  }\n})\n  .subscribe(observer);\n\nsetTimeout(function () {\n  subscription.unsubscribe();\n}, 5000);\n".trim(),"\nvar observable = Rx.Observable.interval(1000);\nvar observer = {\n  next: function (value) {\n    console.log(value);\n  }\n};\n\nobservable.map(function (value) {\n  return 'Number: ' + value;\n}).throttleTime(1900).subscribe(observer);\n".trim()),j="\nvar subject = new Rx.Subject();\n\nsubject.subscribe({\n  next: function (value) {\n    console.log(value);\n  },\n  error: function (error) {\n    console.log(error);\n  },\n  complete: function () {\n    console.log('Complete');\n  }\n});\n\nsubject.subscribe({\n  next: function (value) {\n    console.log(value);\n  }\n});\n\nsubject.next('A new data piece');\nsubject.complete();\nsubject.next('New value');\n".trim(),y="\nvar observable = Rx.Observable.interval(1000);\n\nobservable\n  .filter(function (value) {\n    return value % 2 == 0;\n  })\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    },\n    error: function (error) {\n      console.log('Error: ', error);\n    }\n  });\n".trim(),S="\n//html\n<html>\n  <script src=\"https://unpkg.com/@reactivex/rxjs@5.3.0/dist/global/Rx.js\"><\/script>\n  <body>\n    <input type=\"text\">\n      <script src=\"app.js\"><\/script>\n  </body>\n</html>\n\n\n//js\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .subscribe({\n    next: function (event) {\n      console.log(event.target.value);\n    }\n  });\n  \n  \n  \n//2\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .map(event => event.target.value)\n  .debounceTime(500)\n  .distinctUntilChanged()\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n".trim(),N="\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.of(1, 2, 3, 4, 5);\n\nobservable\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n\n\n\n//2\nvar observable = Rx.Observable.of(1, 2, 3, 4, 5);\n\nobservable\n  .scan((total, currentValue) => {\n    return total + currentValue;\n  }, 0)\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n".trim(),O="\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .subscribe({\n    next: function (event) {\n      console.log(event.target.value);\n    }\n  });\n\n\n//2\nvar input = document.querySelector('input');\nvar observable = Rx.Observable.fromEvent(input, 'input');\n\nobservable\n  .pluck('target', 'value')\n  .debounceTime(500)\n  .distinctUntilChanged()\n  .subscribe({\n    next: function (value) {\n      console.log(value);\n    }\n  });\n".trim(),C="\n//html\n<body>\n    <input type=\"text\" id=\"input1\">\n      <input type=\"text\" id=\"input2\">\n        <p>Combined value: <span></span></p>\n        <script src=\"app.js\"><\/script>\n      </body>\n      \n      \n//js\nvar input1 = document.querySelector('#input1');\nvar input2 = document.querySelector('#input2');\n\nvar span = document.querySelector('span');\n\nvar obs1 = Rx.Observable.fromEvent(input1, 'input');\nvar obs2 = Rx.Observable.fromEvent(input2, 'input');\n\nobs1.mergeMap(\nevent1 => {\nreturn obs2.map(event2 => event1.target.value + ' ' + event2.target.value)\n      }\n    ).subscribe(\n    combinedValue => span.textContent = combinedValue\n  );\n".trim(),R="\nvar button = document.querySelector('button');\n\nvar obs1 = Rx.Observable.fromEvent(button, 'click');\nvar obs2 = Rx.Observable.interval(1000);\n\nobs1.switchMap(\n  event => {\n    return obs2\n  }\n).subscribe(\n  (value) => console.log(value)\n);\n".trim(),k="\nvar clickEmitted = new Rx.Subject();\nvar button = document.querySelector('button');\nvar div = document.querySelector('div');\n\nbutton.addEventListener('click', () => clickEmitted.next('Clicked!'));\n\nclickEmitted.subscribe(\n  (value) => div.textContent = value\n);\n\n\n//2\nvar clickEmitted = new Rx.BehaviorSubject('Not clicked');\nvar button = document.querySelector('button');\nvar div = document.querySelector('div');\n\nbutton.addEventListener('click', () => clickEmitted.next('Clicked!'));\n\nclickEmitted.subscribe(\n  (value) => div.textContent = value\n);\n".trim(),A="\nimport {Observable, interval} from 'rxjs';\nimport {map} from \"rxjs/operators\";\n\ninterval(1000).pipe(map(data => data * 2))\n              .subscribe((data:number) => {\n                console.log(data)\n              });\n\n\n\n//map\nimport {Observable, interval, Subscriber, pipe} from 'rxjs';\nimport {map} from \"rxjs/operators\";\n\nfunction fetchUser(){\n  const newObservable = new Observable((observer:Subscriber<unknown>) => {\n    const user={\n      data:{firstName: 'Sam', mob: 2345342290}\n    }\n    observer.next(user)\n  });\n  return newObservable.pipe(map(user)=>{\n    return user.data\n  })\n}\n\n\nfetchUser().Subscriber((user)=>{\n  console.log(user)\n})".trim(),w="\nimport {interval} from 'rxjs';\nimport {filter, map} from \"rxjs/operators\";\n\nconst observable = interval(100).pipe(filter(data=>{\n  return data<5\n}));\n\nobservable.subscribe(data => {\n  console.log(data);\n})\n".trim(),M="\nimport {Observable} from 'rxjs';\nimport {switchMap} from \"rxjs/operators\";\n\nfunction buySugarInBulk(){\n  return new Observable(observer=>{\n    observer.next('Suger Perchased');\n  })\n}\n\nfunction getSuger(quantity){\n  return new Observable((observer)=>{\n    return observer.next('Suger ' +quantity+ 'for you' )\n  })\n}\n\nfunction getSugarFromShop(quantity){\n  return buySugarInBulk().pipe(switchMap(()=>{\n    return getSuger(quantity);\n  }));\n}\n\ngetSugarFromShop('1Kg').subscribe(data=>{\n  console.log(data);\n});".trim(),q="\nimport {timer} from \"rxjs\";\nimport {concatMap, map} from \"rxjs/operators\";\n\nconst timer$ = timer(100, 500)\n                .pipe(map(data => data + 'timer1'));\n\nconst timer2$ = timer(100, 500)\n                .pipe(map(data => data + 'timer2'));\n\nconst observables = timer$.pipe(concatMap(timer1Data => {\n                 return timer2$.pipe(map(data => data + timer1Data));\n}))\n\n\nobservables.subscribe(data => console.log(data));".trim(),D="\nfunction isBreadAvailable(){\n  return true;\n}\n\nfunction isAggAvailable(){\n  return false;\n}\n\nfunction bringBread(){\n  return new Promise((res, rej) =>{\n    if(isBreadAvailable()) {\n      res('Bread is Available');\n    }\n    else if(isAggAvailable){\n      res('Agg is Available')\n    }\n    else{\n      rej('Bread is bring')\n    }\n  })\n}\n\nbringBread().then((data)=>{\n  console.log(data);\n})\n.catch(err => {\n  console.log(err)\n})".trim(),P="\nimport {BehaviorSubject, timeout} from 'rxjs';\n\nconst data = ['A', 'B', 'C', 'D', 'E'];\nconst fm = new BehaviorSubject('First Data');\n\nfunction changeSongs(){\n  for(let song of data){\n    fm.next(song);\n  }\n}\n\n\nfm.subscribe((song:string)=>{\n  console.log(song);\n});\n\nchangeSongs();\n\nsetTimeout(()=>{\n  fm.subscribe((song:string)=>{\n  console.log(song);\n});\n},1000);".trim(),I="import { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';".trim(),T="import { from } from 'rxjs'; // from function\nconst data = from(fetch('/api/endpoint')); //Created from Promise\ndata.subscribe({\n next(response) {console.log(response);},\n error(err) {console.error('Error: ' + err);},\n complete() {console.log('Completed');}\n});".trim(),B="\nimport { ajax } from 'rxjs/ajax'; // ajax function\nconst apiData = ajax('/api/data'); // Created from AJAX request\n// Subscribe to create the request\napiData.subscribe(res => console.log(res.status, res.response));".trim(),F="\nimport { interval } from 'rxjs'; // interval function\nconst secondsCounter = interval(1000); // Created from Counter value\nsecondsCounter.subscribe(n =>\n  console.log('Counter value: '$'{n}'));".trim(),J="\nimport { fromEvent } from 'rxjs';\nconst el = document.getElementById('custom-element');\nconst mouseMoves = fromEvent(el, 'mousemove');\nconst subscription = mouseMoves.subscribe((e: MouseEvent) => {\n  console.log('Coordnitaes of mouse pointer: '$'{e.clientX} * '$'{e.clientY}');\n  });".trim(),L="\n//app.component.ts\nimport {PlaceholderService} from \"./services/placeholder.service\"\n\n@Component({\n  selector: 'app-root',\n  template: '\n  <button (click)=\"getApi()\">GET</button>\n    <div *ngFor=\"let items of data\">\n      <p>{{items.id}} - {{items.title}}</p>\n    </div>\n  ',\n})\n\nexport class AppComponent implements OnInit{\n  data:Array<any>;\n  \n  constructor( private https:PlaceholderService) { \n    this.data=new Array<any>()\n   }\n\n  ngOnInit(): void {}\n  getApi(){\n    this.https.getData().subscribe((data)=>{\n      this.data=data\n    })\n  }\n}\n\n\n//services/placeholder.service.ts\nimport { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlaceholderService {\n\n  constructor(private http:HttpClient) { }\n\n  getData(): Observable<any>{\n    const url=\"https://jsonplaceholder.typicode.com/posts\";\n    return this.http.get<any>(url)\n  }\n}\n".trim(),V=function(e){function n(){return Object(a.a)(this,n),Object(l.a)(this,Object(o.a)(n).apply(this,arguments))}return Object(s.a)(n,e),Object(r.a)(n,[{key:"componentDidMount",value:function(){setTimeout((function(){return m.a.highlightAll()}),0)}},{key:"render",value:function(){var e=this.props.classes;return i.a.createElement(b.a,{container:!0},i.a.createElement(b.a,{item:!0,xs:2},i.a.createElement(v.a,{className:e.paper},i.a.createElement("h4",null,i.a.createElement(g.a,null)))),i.a.createElement(b.a,{item:!0,xs:10},i.a.createElement(v.a,{className:e.paper},i.a.createElement(p.a,null,i.a.createElement("h3",null,"Rxjs With Pure Js (Reactive Extension for JavaScript)"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:h,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"RxJS OPERATORS LIKE map() OR throttleTime()"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:x,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"RxJS SUBJECT (~EventEmitter)"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:j,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"filter() OPERATOR"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:y,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"debounceTime & distinctUntilChanged "),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:S,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"scan() vs reduce()"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:N,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"pluck()"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:O,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"mergeMap()"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:C,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"switchMap()"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:R,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"BehaviorSubject"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:k,language:"js",plugins:["line-numbers"]})),i.a.createElement("h3",null,"What is RxJS With Angular"),"RxJS is a library for composing asynchronous and callback-based code in a functional, reactive style using Observables. Many APIs such as HttpClient produce and consume RxJS Observables and also uses operators for processing observables.",i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:I,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"What are the utility functions provided by RxJS"),"The RxJS library also provides below utility functions for creating and working with observables.",i.a.createElement("ul",null,i.a.createElement("li",null,"Converting existing code for async operations into observables"),i.a.createElement("li",null,"Iterating through the values in a stream"),i.a.createElement("li",null,"Mapping values to different types"),i.a.createElement("li",null,"Filtering streams"),i.a.createElement("li",null,"Composing multiple streams")),i.a.createElement("br",null),i.a.createElement("h3",null,"What are observable creation functions"),"RxJS provides creation functions for the process of creating observables from things such as promises, events, timers and Ajax requests.",i.a.createElement("br",null),i.a.createElement("b",null,"1. Create an observable from a promise"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:T,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("b",null,"2. Create an observable that creates an AJAX request"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:B,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("b",null,"3. Create an observable from a counter"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:F,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("b",null,"4. Create an observable from an event"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:J,language:"js",plugins:["line-numbers"]})),i.a.createElement("h3",null,"Map"),i.a.createElement("ul",null,i.a.createElement("li",null,"map change observable value."),i.a.createElement("li",null,"map to transform a collection of items into a collection of different items.")),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:A,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"Filter"),"This operator takes values from the source Observable, passes them through a predicate function and only emits those values that get TRUE.",i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:w,language:"js",plugins:["line-numbers"]}),i.a.createElement("br",null),i.a.createElement("h3",null,"SwitchMap"),"switchMap operator is basically a combination of two operators - switchAll and map. The map part lets you map a value from a higher-order source observable to an inner observable stream. When a new value arrives from a source observable, execute a map function that returns an inner observable.",i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:M,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"concatMap"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:q,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"OservableVsPromises"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:D,language:"js",plugins:["line-numbers"]})),i.a.createElement("br",null),i.a.createElement("h3",null,"BehaviorSubject ObservableV:"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:P,language:"js",plugins:["line-numbers"]}))),i.a.createElement("br",null),i.a.createElement("h3",null,"Placeholders"),i.a.createElement("div",{style:f},i.a.createElement(E.a,{code:L,language:"js",plugins:["line-numbers"]}))))))}}]),n}(c.Component);n.default=Object(d.a)((function(e){return{paper:{margin:e.spacing(1),padding:e.spacing(1)},smMargin:{margin:e.spacing(1)},actionDiv:{textAlign:"center"}}}))(V)}}]);
//# sourceMappingURL=125.11a81d94.chunk.js.map