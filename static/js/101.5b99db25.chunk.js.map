{"version":3,"sources":["components/ReactJs/prismCode.js","components/angularjs/sidebar.js","components/angularjs/deepAngularjs/customer.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","titles","backgroundColor","padding","fontSize","childsFile","realize","visualization","columns","convert","encoding","split","tensorflow","precision","childsFiles","predictions","Customer","setTimeout","highlightAll","container","item","xs","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"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","file":"static/js/101.5b99db25.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/introAngular' className={classes.line}>AI</Link></MenuItem>\n        <MenuItem><Link to='/tensorflow' className={classes.line}>Tensorflow</Link></MenuItem>\n        <MenuItem><Link to='/tensors' className={classes.line}>Tensorboards</Link></MenuItem>\n        <MenuItem><Link to='/angCompiler' className={classes.line}>Compiler</Link></MenuItem>\n        <MenuItem><Link to='/neural' className={classes.line}>NeuralKeras</Link></MenuItem>\n        <MenuItem><Link to='/activationFunctions' className={classes.line}>activationFuncs</Link></MenuItem>\n        <MenuItem><Link to='/loss' className={classes.line}>Loss</Link></MenuItem>\n        <MenuItem><Link to='/gradientNeural' className={classes.line}>GradientNeural</Link></MenuItem>\n        <MenuItem><Link to='/stochastic' className={classes.line}>Stochastic</Link></MenuItem>\n        <MenuItem><Link to='/benchmarking' className={classes.line}>Benchmarking</Link></MenuItem>\n        <MenuItem><Link to='/customer' className={classes.line}>Customer</Link></MenuItem>\n        <MenuItem><Link to='/regularizationDeep' className={classes.line}>Regularization Deep</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced' className={classes.line}>Imbalanced</Link></MenuItem>\n        <MenuItem><Link to='/imbalanced2' className={classes.line}>Imbalanced2</Link></MenuItem>\n        <MenuItem><Link to='/convolutionals' className={classes.line}>Convolutionals</Link></MenuItem>\n        <MenuItem><Link to='/data_augmentation' className={classes.line}>data Augmentation</Link></MenuItem>\n        <MenuItem><Link to='/transfer' className={classes.line}>Transfer</Link></MenuItem>\n        <MenuItem><Link to='/word_embedding' className={classes.line}>Embedding</Link></MenuItem>\n        <MenuItem><Link to='/datatypests' className={classes.line}>Datatypes</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_2' className={classes.line}>TS Function</Link></MenuItem>\n        <MenuItem><Link to='/typeScript_4' className={classes.line}>Type Assertion</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst childsFile = `\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\ndf = pd.read_csv(\"customer_churn.csv\")\n\ndf.drop('customerID',axis='columns',inplace=True)\ndf.dtypes\n`.trim();\n\nconst realize = `\ndf.TotalCharges.values\npd.to_numeric(df.TotalCharges)                                                   #string Convert it to numbers.\n\npd.to_numeric(df.TotalCharges,errors='coerce').isnull()                          #some values not numbers but blank string.\n\ndf[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()]\ndf.iloc[488].TotalCharges\ndf[df.TotalCharges!=' '].shape\n\ndf1 = df[df.TotalCharges!=' ']                                                   #Remove rows with space in TotalCharges.\ndf1.TotalCharges = pd.to_numeric(df1.TotalCharges)\ndf1.TotalCharges.values\ndf1[df1.Churn=='No']\n`.trim();\n\nconst visualization = `\ntenure_churn_no = df1[df1.Churn=='No'].tenure\ntenure_churn_yes = df1[df1.Churn=='Yes'].tenure\n\nplt.xlabel(\"tenure\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([tenure_churn_yes, tenure_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n\n\nmc_churn_no = df1[df1.Churn=='No'].MonthlyCharges      \nmc_churn_yes = df1[df1.Churn=='Yes'].MonthlyCharges      \n\nplt.xlabel(\"Monthly Charges\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()\n`.trim();\n\nconst columns = `\ndef print_unique_col_values(df):\n       for column in df:\n            if df[column].dtypes=='object':\n                print(f'{column}: {df[column].unique()}') \n                \nprint_unique_col_values(df1)\n\n#Some columns have no internet service or no phone service, that can be replaced with No.\ndf1.replace('No internet service','No',inplace=True)\ndf1.replace('No phone service','No',inplace=True)\n\nprint_unique_col_values(df1)\n`.trim();\n\nconst convert = `\nyes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\n                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\n                  \nfor col in yes_no_columns:\n    df1[col].replace({'Yes': 1,'No': 0},inplace=True)\n    \nfor col in df1:\n    print(f'{col}: {df1[col].unique()}') \n    \ndf1['gender'].replace({'Female':1,'Male':0},inplace=True)\ndf1.gender.unique()\n`.trim();\n\nconst encoding = `\nfrom sklearn.preprocessing import MinMaxScaler\n\ndf2 = pd.get_dummies(data=df1, columns=['InternetService','Contract','PaymentMethod'])\ndf2.columns\n\ncols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\n\nscaler = MinMaxScaler()\ndf2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])\n\nfor col in df2:\n    print(f'{col}: {df2[col].unique()}')\n`.trim();\n\nconst split = `\nfrom sklearn.model_selection import train_test_split\n\nX = df2.drop('Churn',axis='columns')\ny = df2['Churn']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=5)\nlen(X_train.columns)\n`.trim();\n\nconst tensorflow = `\nimport tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential([\n    keras.layers.Dense(26, input_shape=(26,), activation='relu'),\n    keras.layers.Dense(15, activation='relu'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# opt = keras.optimizers.Adam(learning_rate=0.01)\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=100)\n\nmodel.evaluate(X_test, y_test)\n\nyp = model.predict(X_test)\nyp[:5]\n`.trim();\n\nconst compiles = `\ny_pred = []\nfor element in yp:\n    if element > 0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)\n        \n        \ny_pred[:10]\ny_test[:10]\n\n\nfrom sklearn.metrics import confusion_matrix , classification_report\nprint(classification_report(y_test,y_pred))\n\nimport seaborn as sn\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')\n\ny_test.shape\nround((862+229)/(862+229+137+179),2)                      #Accuracy\n`.trim();\n\nconst precision = `\nround(862/(862+179),2)\nround(229/(229+137),2)                             #Precision for 1 class. i.e.Precision for customers who actually churned.\n\nround(229/(229+137),2)\nround(862/(862+137),2)                             #Recall for 0 class.\n\nround(862/(862+137),2)\nround(229/(229+179),2)\n`.trim();\n\nconst childsFiles = `\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import confusion_matrix , classification_report\nimport pandas as pd\n\ntruth = [\"Dog\",\"Not a dog\",\"Dog\",\"Dog\", \"Dog\", \"Not a dog\", \"Not a dog\", \"Dog\", \"Dog\", \"Not a dog\"]\nprediction = [\"Dog\",\"Dog\", \"Dog\",\"Not a dog\",\"Dog\", \"Not a dog\", \"Dog\", \"Not a dog\", \"Dog\", \"Dog\"]\n\ncm = confusion_matrix(truth,prediction)\nprint_confusion_matrix(cm,[\"Dog\",\"Not a dog\"])\n\nprint(classification_report(truth, prediction))\n\n2*(0.57*0.67/(0.57+0.67))                                                                 #f1 score for Dog class.\n2*(0.33*0.25/(0.33+0.25))                                                                 #f1 score for Not a dog class.\n`.trim();\n\nconst predictions = `\nPrecision =  True Positive(TP)/ (TP+FP)\n\nRecall = TP/ (TP + FN)\n`.trim();\n\n\nclass Customer extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Customer Churn Prediction Using Artificial Neural Network (ANN)</h3>\n              Neural networks/ ANNs/ simulated neural networks (SNNs), are a subset of ML and are at the heart of DL algorithms. Their name and structure\n              are inspired by the human brain, mimicking the way that biological neurons signal to one another.\n\n              <br />\n              <br />\n              <i>Customer churn prediction is to measure why customers are leaving a business.\n                we look customer churn in telecom business. We will build a deep learning model to predict\n                the churn and use precision,recall, f1-score to measure performance of our model.</i>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={childsFile}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Quick glance at above makes me realize that TotalCharges should be float but it is an object.</b>\n              <br />\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={realize}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Data Visualization</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={visualization}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Many of the columns are yes, no etc. Print unique values in object columns to see data values</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={columns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Convert Yes and No to 1 or 0</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={convert}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>One hot encoding for categorical columns</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={encoding}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Train test split</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={split}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Build a model (ANN) in tensorflow/keras</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tensorflow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Precision for 0 class. i.e. Precision for customers who did not churn.</b>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={precision}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3></h3>\n              <div style={titles}>\n                <PrismCode\n                  code={tensorflow}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Precision Recall</h3>\n              <ul>\n                <li><b>Precision:</b>Is out of all Prediction how many got it right.</li>\n                <ul>\n                  <li>Think about Prediction as base.</li>\n                </ul>\n                <br />\n                <li><b>Recall:</b>Is out of all True how many got it right.</li>\n                <ul>\n                  <li>Think about truth is base.</li>\n                </ul>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={predictions}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <div style={titles}>\n                <PrismCode\n                  code={childsFiles}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    )\n  }\n}\n\n\nexport default (withStyles(styles)(Customer));\n"],"sourceRoot":""}