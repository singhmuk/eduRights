{"version":3,"sources":["components/ReactJs/prismCode.js","components/ml/sidebar.js","assets/ML/array_vs_list.png","components/ml/deepMl/numpyPy.js"],"names":["PrismCode","props","highlight","ref","current","Prism","highlightElement","React","createRef","this","code","language","plugins","className","trim","Component","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","line","textDecoration","Sidebar","classes","to","module","exports","titles","backgroundColor","padding","fontSize","redesign","height","width","ndarray","pyFuns","zeros","numpy","Copy","iterating","Numpys","setTimeout","highlightAll","container","item","xs","src","gradient","alt","style","withStyles","margin","smMargin","actionDiv","textAlign"],"mappings":"kPAIqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,UAAY,WACN,EAAKC,KAAO,EAAKA,IAAIC,SACvBC,IAAMC,iBAAiB,EAAKH,IAAIC,UAblC,EAAKD,IAAMI,IAAMC,YAFA,E,iFAMjBC,KAAKP,c,2CAILO,KAAKP,c,+BASG,IAAD,EAC6BO,KAAKR,MAAjCS,EADD,EACCA,KAAeC,GADhB,EACOC,QADP,EACgBD,UACvB,OACE,yBAAKE,UAAU,cACb,0BAAMV,IAAKM,KAAKN,IAAKU,UAAS,mBAAcF,IACzCD,EAAKI,a,GAzBuBP,IAAMQ,a,uDCJ7C,yFAMMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,MAAO,CACLC,YAAaJ,EAAMK,QAAQ,IAE7BC,KAAM,CACJC,eAAgB,YAIL,SAASC,IACtB,IAAMC,EAAUX,IAEhB,OACE,yBAAKH,UAAWc,EAAQR,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMS,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,oBAAoBf,UAAWc,EAAQH,MAAhD,qBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,YAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,oBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,aACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,QAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,qBAAqBf,UAAWc,EAAQH,MAAjD,uBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,eAAef,UAAWc,EAAQH,MAA3C,wBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,OAAOf,UAAWc,EAAQH,MAAnC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,OAAOf,UAAWc,EAAQH,MAAnC,QACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,mBAAmBf,UAAWc,EAAQH,MAA/C,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,YAAYf,UAAWc,EAAQH,MAAxC,gBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,kBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,gBAAgBf,UAAWc,EAAQH,MAA5C,kBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,SAASf,UAAWc,EAAQH,MAArC,QAEV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,UAAUf,UAAWc,EAAQH,MAAtC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,eACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,sBAAsBf,UAAWc,EAAQH,MAAlD,iBACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,UACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,WACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,WAAWf,UAAWc,EAAQH,MAAvC,YACV,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,cAAcf,UAAWc,EAAQH,MAA1C,eACV,6BA9BF,gBAiCE,kBAAC,IAAD,KAAU,kBAAC,IAAD,CAAMI,GAAG,aAAaf,UAAWc,EAAQH,MAAzC,eAEZ,iC,oBC1DNK,EAAOC,QAAU,IAA0B,2C,uMCUrCC,EAAS,CAAEC,gBAAiB,UAAWC,QAAS,MAAOC,SAAU,QAEjEC,EAAW,CACfC,OAAQ,IACRC,MAAO,KAiBHC,EAAU,ivBASdxB,OAEIyB,EAAS,miEA2CbzB,OAEI0B,EAAQ,yOAOZ1B,OAGI2B,EAAQ,0FAGZ3B,OAEI4B,EAAO,+MAiBX5B,OAEI6B,EAAY,uGAKhB7B,OAQI8B,E,4LAEFC,YAAW,kBAAMxC,IAAMyC,iBAAgB,K,+BAE/B,IACAnB,EAAYlB,KAAKR,MAAjB0B,QACR,OACE,kBAAC,IAAD,CAAMoB,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAOpC,UAAWc,EAAQN,OACxB,4BAAI,kBAAC,IAAD,SAGR,kBAAC,IAAD,CAAM2B,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAOpC,UAAWc,EAAQN,OACxB,kBAAC,IAAD,KACE,uDACA,4BACE,0IACA,4HAEF,wJACA,6BAEA,qCATF,sCAWE,4BACE,qCACA,4CACA,6EACA,6DACA,+HACA,6HACA,2DACA,yIAEF,6BACA,yBAAK6B,IAAKC,IAAUC,IAAI,WAAWvC,UAAU,aAAawC,MAAOlB,IACjE,6BAEA,0CACA,4BACE,4BAAI,kCAAJ,WACA,4BAAI,kCAAJ,WACA,4BAAI,kCAAJ,oBACA,4BAAI,kCAAJ,SACA,4BAAI,kCAAJ,iBACA,4BAAI,kCAAJ,aACA,4BAAI,kCAAJ,YACA,4BAAI,kCAAJ,UACA,4BAAI,kCAAJ,UACA,4BAAI,kCAAJ,kBACA,4BAAI,kCAAJ,kDAEF,6BAEA,6DACA,4BACE,4EACA,2EACA,+HACA,qEAEF,6BACA,yBAAKkB,MAAOtB,GACV,kBAAC,IAAD,CACErB,KAAM4B,EACN3B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,qCACA,yBAAKyC,MAAOtB,GACV,kBAAC,IAAD,CACErB,KAAM8B,EACN7B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,sGACA,yBAAKyC,MAAOtB,GACV,kBAAC,IAAD,CACErB,KAAM+B,EACN9B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,oEA/EF,0EAiFE,yBAAKyC,MAAOtB,GACV,kBAAC,IAAD,CACErB,KAAMgC,EACN/B,SAAS,KACTC,QAAS,CAAC,mBAGd,6BAEA,yCACA,yBAAKyC,MAAOtB,GACV,kBAAC,IAAD,CACErB,KAAMiC,EACNhC,SAAS,KACTC,QAAS,CAAC,mBAGd,6BACA,6BAEA,yCACA,4BACE,4BAAI,qCAAJ,8CACA,4BAAI,wCAAJ,2MAEA,4BAAI,kDAAJ,4BACA,4BAAI,uCAAJ,8CACA,4BAAI,sCAAJ,uCACA,4BAAI,0CAAJ,gFACA,4BAAI,sCAAJ,qGACA,4BAAI,wDAAJ,wBACA,4BAAI,wDAAJ,2BACA,4BAAI,wDAAJ,sDACA,4BAAI,mDAAJ,iFACA,4BAAI,sEAAJ,0IAEA,4BAAI,sDAAJ,mIAIF,6BACA,yBAAKyC,MAAOtB,GACV,kBAAC,IAAD,CACErB,KAAM6B,EACN5B,SAAS,KACTC,QAAS,CAAC,2B,GA7IPG,aAwJLuC,uBA7QD,SAAApC,GAAK,MAAK,CACvBG,MAAO,CACLkC,OAAQrC,EAAMK,QAAQ,GACtBU,QAASf,EAAMK,QAAQ,IAEzBiC,SAAU,CACRD,OAAQrC,EAAMK,QAAQ,IAExBkC,UAAW,CACTC,UAAW,aAoQCJ,CAAmBV","file":"static/js/62.8596a87d.chunk.js","sourcesContent":["import React from \"react\"\nimport Prism from \"prismjs\"\nimport '../dashboard/blog/styles.css'\n\nexport default class PrismCode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    this.highlight()\n  }\n\n  componentDidUpdate() {\n    this.highlight()\n  }\n\n  highlight = () => {\n    if (this.ref && this.ref.current) {\n      Prism.highlightElement(this.ref.current)\n    }\n  }\n\n  render() {\n    const { code, plugins, language } = this.props\n    return (\n      <pre className=\"code-prism\">\n        <code ref={this.ref} className={`language-${language}`}>\n          {code.trim()}\n        </code>\n      </pre>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  line: {\n    textDecoration: 'none'\n  }\n}));\n\nexport default function Sidebar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <MenuList>\n        <MenuItem><Link to='/infoMl' className={classes.line}>InfoMl</Link></MenuItem>\n        <MenuItem><Link to='/gredient_decents' className={classes.line}>Gredient Decents</Link></MenuItem>\n        <MenuItem><Link to='/training' className={classes.line}>Traning</Link></MenuItem>\n\n        <MenuItem><Link to='/regularizations' className={classes.line}>Regularizations</Link></MenuItem>\n        <MenuItem><Link to='/featuresEng' className={classes.line}>FeaturesEng</Link></MenuItem>\n        <MenuItem><Link to='/adaboost' className={classes.line}>Adaboots</Link></MenuItem>\n        <MenuItem><Link to='/greedSearch' className={classes.line}>Greed Search</Link></MenuItem>\n        <MenuItem><Link to='/perceptron' className={classes.line}>Perceptron</Link></MenuItem>\n        <MenuItem><Link to='/pcaPy' className={classes.line}>PCA</Link></MenuItem>\n\n        <MenuItem><Link to='/leanearRegression' className={classes.line}>Leanear Regression</Link></MenuItem>\n        <MenuItem><Link to='/logisticReg' className={classes.line}>Logistic Regression</Link></MenuItem>\n        <MenuItem><Link to='/lda' className={classes.line}>Lda</Link></MenuItem>\n        <MenuItem><Link to='/knn' className={classes.line}>Knn</Link></MenuItem>\n        <MenuItem><Link to='/k_meanClustring' className={classes.line}>K_Mean</Link></MenuItem>\n        <MenuItem><Link to='/naiveBar' className={classes.line}>Naive Bayes</Link></MenuItem>\n        <MenuItem><Link to='/randomForest' className={classes.line}>Random Forest</Link></MenuItem>\n        <MenuItem><Link to='/decisiontree' className={classes.line}>Decision Tree</Link></MenuItem>\n        <MenuItem><Link to='/svmPy' className={classes.line}>SVM</Link></MenuItem>\n\n        <MenuItem><Link to='/numpyPy' className={classes.line}>Numpy</Link></MenuItem>\n        <MenuItem><Link to='/pandas' className={classes.line}>Pandas</Link></MenuItem>\n        <MenuItem><Link to='/bagging' className={classes.line}>Matplotlib</Link></MenuItem>\n        <MenuItem><Link to='/logisticRegrations' className={classes.line}>Scikit Learn</Link></MenuItem>\n        <MenuItem><Link to='/regrations' className={classes.line}>SciPy</Link></MenuItem>\n        <MenuItem><Link to='/libraries' className={classes.line}>OpenCV</Link></MenuItem>\n        <MenuItem><Link to='/capture' className={classes.line}>Capture</Link></MenuItem>\n        <MenuItem><Link to='/joinImages' className={classes.line}>JoinImages</Link></MenuItem>\n        <br />\n\n        Deep Learning\n        <MenuItem><Link to='/superwise' className={classes.line}>Superwise</Link></MenuItem>\n      </MenuList>\n      <div>\n      </div>\n    </div>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/array_vs_list.2cd57325.png\";","import React, { Component } from 'react';\nimport Prism from \"prismjs\"\nimport { Grid, Paper, withStyles, List } from \"@material-ui/core\";\n\nimport '../../ReactJs/styles.css'\nimport Sidebar from '../sidebar';\nimport PrismCode from '../../ReactJs/prismCode';\n\nimport gradient from '../../../assets/ML/array_vs_list.png'\n\nconst titles = { backgroundColor: '#F0F8FF', padding: '1px', fontSize: '16px' }\n\nconst redesign = {\n  height: 200,\n  width: 500\n}\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n})\n\n\nconst ndarray = `\narr = np.array(42)                                                                      #0-D arrays, or Scalars.\narr = np.array([1, 2, 3, 4, 5])                                                         #1-D Arrays\narr = np.array([[1, 2, 3], [4, 5, 6]])                                                  #2-D Arrays\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])                        #3-D arrays\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narrStr = np.array([1, 2, 3, 4], dtype='S')                                              #Creating Arrays With a Data String.\narrFloat = np.array([1.1, 2.1, 3.1])\n`.trim()\n\nconst pyFuns = `\narr = np.array([1, 2, 3, 6, 7, 8, 9, 0])\narrs = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\narr2 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=np.float64)\narr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]], dtype=complex)\narr4 = np.array([[1,2],[3,4],[5,6]])\narrStr = np.array([1, 2, 3, 4], dtype='S')                             #array with data type string\narrFloat = np.array([1.1, 2.1, 3.1])\n\n\nx = arr[0]\nx = arr[0, 1]\nx = arr[1:5:2]                                                          #[start:end:step]\nx = arr.dtype\nx = arrFloat.astype(int)                                                #Change data type from float to integer\nx = arrFloat.astype(bool)                                               #float to boolean\n\n\nx = arr.ndim\nx = arr.itemsize                                                        # itemsize is 4 bytes\nx = arr.size                                                            # total bunber of elements\nx = arr.shape                                                           \nx = arr4.reshape(2,3)                                                   # information of dimension\nx = arr4.ravel()\nx = arr4.min() \nx = arr4.max() \nx = arr4.sum()  \nx = arr.sum(axis=0)\n\nnewarr = np.concatenate((arr, arr2), axis=1)                            #join array\nnewarr = np.stack((arr, arr2), axis=1)                                  #join array using stack\nnewarr = np.hstack((arr, arr2))                                         #join array along rows\nnewarr = np.vstack((arr, arr2))                                         #join array along colom\n\nnewarr = np.array_split(arr, 3, axis=0)                                #Splitting breaks one array into multiple.\nx = np.where(arr == 7)                                                 #Find the indexes where the value is 7.\nx = np.searchsorted(arr, 7)\nx = np.sort(arr)\n\nx = np.sqrt(arr)  \nx = np.std(arr)                                                         #standard deviation\nx = arr + arr2  \nx = arr.dot(arr4) \n`.trim()\n\nconst zeros = `\nx = np.zeros((3,4))\nx = np.ones((3,4))\nx = np.arange(1, 5, 2)                                                  # 2 steps\nx = np.linspace(1, 5, 50)                                               # start, stop, num\n\nprint(x)\n`.trim()\n\n\nconst numpy = `import numpy as np\nar = np.array([1, 3, 2, 4, 5, 6])\nprint(ar.argsort()[-3:][::-1])\n`.trim()\n\nconst Copy = `\n#Copy\narr = np.array([1, 2, 3])\narrCopy = arr.copy()\narr[0] = 42\n\nprint(arr)\nprint(arrCopy)\n\n\n#View\narr = np.array([1, 2, 3])\narrView = arr.view()\narr[0] = 42\n\nprint(arr)\nprint(arrView)\n`.trim()\n\nconst iterating = `\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nfor x in arr:\n  print(x)\n`.trim()\n\n// const Series = ``.trim()\n\n// const Series = ``.trim()\n\n\n\nclass Numpys extends Component {\n  componentDidMount() {\n    setTimeout(() => Prism.highlightAll(), 0)\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container>\n        <Grid item xs={2}>\n          <Paper className={classes.paper}>\n            <h4><Sidebar /></h4>\n          </Paper>\n        </Grid>\n        <Grid item xs={10}>\n          <Paper className={classes.paper}>\n            <List>\n              <h3>Different forms of data</h3>\n              <ul>\n                <li>Tabular/ spreadsheet-like data in which each column may be a different type (string, numeric, date, etc). </li>\n                <li>Multiple tables of data interrelated by key columns (primary/ foreign keys for a SQL user).</li>\n              </ul>\n              <b>A large percentage of datasets can be transformed into a structured form that is more suitable for analysis and modeling.</b>\n              <br />\n\n              <h3>NumPy</h3>\n              Benifits of numpy over python list.\n              <ul>\n                <li>Fast.</li>\n                <li>Less Memory.</li>\n                <li>NumPy create a N-dimensional array in python.</li>\n                <li>Used for working with arrays.</li>\n                <li>It also has functions for working in domain of linear algebra, fourier transform, and matrices.</li>\n                <li>NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.</li>\n                <li>NumPy Data Types is Objects</li>\n                <li>It internally stores data in a contiguous block of memory, independent of other built-in Python objects.</li>\n              </ul>\n              <br />\n              <img src={gradient} alt=\"gradient\" className=\"responsive\" style={redesign} />\n              <br />\n\n              <h3>Data Types</h3>\n              <ul>\n                <li><b>i: </b>integer</li>\n                <li><b>b: </b>boolean</li>\n                <li><b>u: </b>unsigned integer</li>\n                <li><b>f: </b>float</li>\n                <li><b>c: </b>complex float</li>\n                <li><b>m: </b>timedelta</li>\n                <li><b>M: </b>datetime</li>\n                <li><b>O: </b>object</li>\n                <li><b>S: </b>string</li>\n                <li><b>U: </b>unicode string</li>\n                <li><b>V: </b>fixed chunk of memory for other type ( void )</li>\n              </ul>\n              <br />\n\n              <h3>Create a NumPy ndarray Object</h3>\n              <ul>\n                <li>The array object in NumPy is called ndarray.</li>\n                <li>An array can have any number of dimensions.</li>\n                <li>When the array is created, you can define the number of dimensions by using the ndmin argument.</li>\n                <b>arr = np.array([1, 2, 3, 4], ndmin=5)</b>\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={ndarray}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>zeros</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={zeros}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Write a code to get the indices of N maximum values from a NumPy array.</b>\n              <div style={titles}>\n                <PrismCode\n                  code={numpy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>The Difference Between Copy and View</h3>\n              Copy is a new array, and the view is just a view of the original array.\n              <div style={titles}>\n                <PrismCode\n                  code={Copy}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n\n              <h3>Iterating</h3>\n              <div style={titles}>\n                <PrismCode\n                  code={iterating}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n              <br />\n              <br />\n\n              <b>Functions:</b>\n              <ul>\n                <li><b>ndim: </b>Return how many dimensions the array have.</li>\n                <li><b>ravel(): </b>Used to change a 2-dimensional array or a multi-dimensional array into a contiguous flattened array\n                  (1D array with all the input-array elements and with the same type as it. ravel() return new array.</li>\n                <li><b>arr.reshape(4, 3): </b>Reshape From 1-D to 2-D.</li>\n                <li><b>arr[0]: </b>Array indexing to access an array element.</li>\n                <li><b>dtype: </b>Returns the data type of the array.</li>\n                <li><b>arr.shape: </b>Returns a tuple with each index having the number of corresponding elements.</li>\n                <li><b>Stack: </b>Stacking is same as concatenation, the only difference is that stacking is done along a new axis.</li>\n                <li><b>np.hstack((arr1, arr2)): </b>To stack along rows.</li>\n                <li><b>np.vstack((arr1, arr2)): </b>To stack along columns.</li>\n                <li><b>np.dstack((arr1, arr2)): </b>To stack along height, which is the same as depth.</li>\n                <li><b>np.where(arr == 4): </b>Search an array for a certain value, and return the indexes that get a match.</li>\n                <li><b>np.searchsorted(arr, 7, side='right'): </b>Performs a binary search in the array, and returns the index where the specified\n                  value would be inserted to maintain the search order.</li>\n                <li><b>np.linspace(1, 5, 50): </b>Is Linear list space. Returns evenly separated values over a specified period. The system implicitly\n                  calculates the step size.</li>\n\n              </ul>\n              <br />\n              <div style={titles}>\n                <PrismCode\n                  code={pyFuns}\n                  language=\"js\"\n                  plugins={[\"line-numbers\"]}\n                />\n              </div>\n            </List>\n          </Paper>\n        </Grid>\n      </Grid >\n    )\n  }\n}\n\nexport default (withStyles(styles)(Numpys));\n"],"sourceRoot":""}